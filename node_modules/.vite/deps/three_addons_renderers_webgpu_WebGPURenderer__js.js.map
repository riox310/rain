{
  "version": 3,
  "sources": ["../../three/examples/jsm/renderers/common/Animation.js", "../../three/examples/jsm/renderers/common/RenderObject.js", "../../three/examples/jsm/renderers/common/RenderObjects.js", "../../three/examples/jsm/renderers/common/DataMap.js", "../../three/examples/jsm/renderers/common/Constants.js", "../../three/examples/jsm/renderers/common/Attributes.js", "../../three/examples/jsm/renderers/common/Geometries.js", "../../three/examples/jsm/renderers/common/Info.js", "../../three/examples/jsm/renderers/common/Pipeline.js", "../../three/examples/jsm/renderers/common/RenderPipeline.js", "../../three/examples/jsm/renderers/common/ComputePipeline.js", "../../three/examples/jsm/renderers/common/ProgrammableStage.js", "../../three/examples/jsm/renderers/common/Pipelines.js", "../../three/examples/jsm/renderers/common/Bindings.js", "../../three/examples/jsm/renderers/common/RenderList.js", "../../three/examples/jsm/renderers/common/RenderLists.js", "../../three/examples/jsm/renderers/common/RenderContext.js", "../../three/examples/jsm/renderers/common/RenderContexts.js", "../../three/examples/jsm/renderers/common/Textures.js", "../../three/examples/jsm/renderers/common/Color4.js", "../../three/examples/jsm/renderers/common/Background.js", "../../three/examples/jsm/renderers/common/nodes/NodeBuilderState.js", "../../three/examples/jsm/renderers/common/nodes/Nodes.js", "../../three/examples/jsm/renderers/common/Renderer.js", "../../three/examples/jsm/renderers/common/Binding.js", "../../three/examples/jsm/renderers/common/BufferUtils.js", "../../three/examples/jsm/renderers/common/Buffer.js", "../../three/examples/jsm/renderers/common/UniformBuffer.js", "../../three/examples/jsm/renderers/common/UniformsGroup.js", "../../three/examples/jsm/renderers/common/nodes/NodeUniformsGroup.js", "../../three/examples/jsm/renderers/common/SampledTexture.js", "../../three/examples/jsm/renderers/common/nodes/NodeSampledTexture.js", "../../three/examples/jsm/renderers/webgl/nodes/GLSLNodeBuilder.js", "../../three/examples/jsm/renderers/common/Backend.js", "../../three/examples/jsm/renderers/webgl/utils/WebGLAttributeUtils.js", "../../three/examples/jsm/renderers/webgl/utils/WebGLState.js", "../../three/examples/jsm/renderers/webgl/utils/WebGLUtils.js", "../../three/examples/jsm/renderers/webgl/utils/WebGLTextureUtils.js", "../../three/examples/jsm/renderers/webgl/utils/WebGLExtensions.js", "../../three/examples/jsm/renderers/webgl/utils/WebGLCapabilities.js", "../../three/examples/jsm/renderers/webgl/WebGLBackend.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUConstants.js", "../../three/examples/jsm/renderers/common/Sampler.js", "../../three/examples/jsm/renderers/common/nodes/NodeSampler.js", "../../three/examples/jsm/renderers/common/StorageBuffer.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUTexturePassUtils.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUTextureUtils.js", "../../three/examples/jsm/renderers/webgpu/nodes/WGSLNodeFunction.js", "../../three/examples/jsm/renderers/webgpu/nodes/WGSLNodeParser.js", "../../three/examples/jsm/renderers/webgpu/nodes/WGSLNodeBuilder.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUUtils.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUAttributeUtils.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUBindingUtils.js", "../../three/examples/jsm/renderers/webgpu/utils/WebGPUPipelineUtils.js", "../../three/examples/jsm/renderers/webgpu/WebGPUBackend.js", "../../three/examples/jsm/renderers/webgpu/WebGPURenderer.js"],
  "sourcesContent": ["class Animation {\n\n\tconstructor( nodes, info ) {\n\n\t\tthis.nodes = nodes;\n\t\tthis.info = info;\n\n\t\tthis.animationLoop = null;\n\t\tthis.requestId = null;\n\n\t\tthis._init();\n\n\t}\n\n\t_init() {\n\n\t\tconst update = ( time, frame ) => {\n\n\t\t\tthis.requestId = self.requestAnimationFrame( update );\n\n\t\t\tthis.nodes.nodeFrame.update();\n\n\t\t\tthis.info.frame = this.nodes.nodeFrame.frameId;\n\n\t\t\tif ( this.animationLoop !== null ) this.animationLoop( time, frame );\n\n\t\t};\n\n\t\tupdate();\n\n\t}\n\n\tdispose() {\n\n\t\tself.cancelAnimationFrame( this.requestId );\n\n\t}\n\n\tsetAnimationLoop( callback ) {\n\n\t\tthis.animationLoop = callback;\n\n\t}\n\n}\n\nexport default Animation;\n", "let id = 0;\n\nexport default class RenderObject {\n\n\tconstructor( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext ) {\n\n\t\tthis._nodes = nodes;\n\t\tthis._geometries = geometries;\n\n\t\tthis.id = id ++;\n\n\t\tthis.renderer = renderer;\n\t\tthis.object = object;\n\t\tthis.material = material;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\tthis.lightsNode = lightsNode;\n\t\tthis.context = renderContext;\n\n\t\tthis.geometry = object.geometry;\n\t\tthis.version = material.version;\n\n\t\tthis.attributes = null;\n\t\tthis.pipeline = null;\n\t\tthis.vertexBuffers = null;\n\n\t\tthis.initialNodesCacheKey = this.getNodesCacheKey();\n\t\tthis.initialCacheKey = this.getCacheKey();\n\n\t\tthis._nodeBuilderState = null;\n\t\tthis._bindings = null;\n\n\t\tthis.onDispose = null;\n\n\t\tthis.isRenderObject = true;\n\n\t\tthis.onMaterialDispose = () => {\n\n\t\t\tthis.dispose();\n\n\t\t};\n\n\t\tthis.material.addEventListener( 'dispose', this.onMaterialDispose );\n\n\t}\n\n\tgetNodeBuilderState() {\n\n\t\treturn this._nodeBuilderState || ( this._nodeBuilderState = this._nodes.getForRender( this ) );\n\n\t}\n\n\tgetBindings() {\n\n\t\treturn this._bindings || ( this._bindings = this.getNodeBuilderState().createBindings() );\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this._geometries.getIndex( this );\n\n\t}\n\n\tgetChainArray() {\n\n\t\treturn [ this.object, this.material, this.context, this.lightsNode ];\n\n\t}\n\n\tgetAttributes() {\n\n\t\tif ( this.attributes !== null ) return this.attributes;\n\n\t\tconst nodeAttributes = this.getNodeBuilderState().nodeAttributes;\n\t\tconst geometry = this.geometry;\n\n\t\tconst attributes = [];\n\t\tconst vertexBuffers = new Set();\n\n\t\tfor ( const nodeAttribute of nodeAttributes ) {\n\n\t\t\tconst attribute = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute( nodeAttribute.name );\n\n\t\t\tattributes.push( attribute );\n\n\t\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\t\tvertexBuffers.add( bufferAttribute );\n\n\t\t}\n\n\t\tthis.attributes = attributes;\n\t\tthis.vertexBuffers = Array.from( vertexBuffers.values() );\n\n\t\treturn attributes;\n\n\t}\n\n\tgetVertexBuffers() {\n\n\t\tif ( this.vertexBuffers === null ) this.getAttributes();\n\n\t\treturn this.vertexBuffers;\n\n\t}\n\n\tgetMaterialCacheKey() {\n\n\t\tconst { object, material } = this;\n\n\t\tlet cacheKey = material.customProgramCacheKey();\n\n\t\tfor ( const property in material ) {\n\n\t\t\tif ( /^(is[A-Z])|^(visible|version|uuid|name|opacity|userData)$/.test( property ) ) continue;\n\n\t\t\tlet value = material[ property ];\n\n\t\t\tif ( value !== null ) {\n\n\t\t\t\tconst type = typeof value;\n\n\t\t\t\tif ( type === 'number' ) value = value !== 0 ? '1' : '0'; // Convert to on/off, important for clearcoat, transmission, etc\n\t\t\t\telse if ( type === 'object' ) value = '{}';\n\n\t\t\t}\n\n\t\t\tcacheKey += /*property + ':' +*/ value + ',';\n\n\t\t}\n\n\t\tif ( object.skeleton ) {\n\n\t\t\tcacheKey += object.skeleton.uuid + ',';\n\n\t\t}\n\n\t\tif ( object.morphTargetInfluences ) {\n\n\t\t\tcacheKey += object.morphTargetInfluences.length + ',';\n\n\t\t}\n\n\t\treturn cacheKey;\n\n\t}\n\n\tget needsUpdate() {\n\n\t\treturn this.initialNodesCacheKey !== this.getNodesCacheKey();\n\n\t}\n\n\tgetNodesCacheKey() {\n\n\t\t// Environment Nodes Cache Key\n\n\t\treturn this._nodes.getCacheKey( this.scene, this.lightsNode );\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn this.getMaterialCacheKey() + ',' + this.getNodesCacheKey();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.material.removeEventListener( 'dispose', this.onMaterialDispose );\n\n\t\tthis.onDispose();\n\n\t}\n\n}\n", "import ChainMap from './ChainMap.js';\nimport RenderObject from './RenderObject.js';\n\nclass RenderObjects {\n\n\tconstructor( renderer, nodes, geometries, pipelines, bindings, info ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\t\tthis.geometries = geometries;\n\t\tthis.pipelines = pipelines;\n\t\tthis.bindings = bindings;\n\t\tthis.info = info;\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\tget( object, material, scene, camera, lightsNode, renderContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\t\tconst chainArray = [ object, material, renderContext, lightsNode ];\n\n\t\tlet renderObject = chainMap.get( chainArray );\n\n\t\tif ( renderObject === undefined ) {\n\n\t\t\trenderObject = this.createRenderObject( this.nodes, this.geometries, this.renderer, object, material, scene, camera, lightsNode, renderContext, passId );\n\n\t\t\tchainMap.set( chainArray, renderObject );\n\n\t\t} else {\n\n\t\t\tif ( renderObject.version !== material.version || renderObject.needsUpdate ) {\n\n\t\t\t\tif ( renderObject.initialCacheKey !== renderObject.getCacheKey() ) {\n\n\t\t\t\t\trenderObject.dispose();\n\n\t\t\t\t\trenderObject = this.get( object, material, scene, camera, lightsNode, renderContext, passId );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderObject.version = material.version;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderObject;\n\n\t}\n\n\tgetChainMap( passId = 'default' ) {\n\n\t\treturn this.chainMaps[ passId ] || ( this.chainMaps[ passId ] = new ChainMap() );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\tcreateRenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext, passId ) {\n\n\t\tconst chainMap = this.getChainMap( passId );\n\n\t\tconst renderObject = new RenderObject( nodes, geometries, renderer, object, material, scene, camera, lightsNode, renderContext );\n\n\t\trenderObject.onDispose = () => {\n\n\t\t\tthis.pipelines.delete( renderObject );\n\t\t\tthis.bindings.delete( renderObject );\n\t\t\tthis.nodes.delete( renderObject );\n\n\t\t\tchainMap.delete( renderObject.getChainArray() );\n\n\t\t};\n\n\t\treturn renderObject;\n\n\t}\n\n\n}\n\nexport default RenderObjects;\n", "class DataMap {\n\n\tconstructor() {\n\n\t\tthis.data = new WeakMap();\n\n\t}\n\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tlet map;\n\n\t\tif ( this.data.has( object ) ) {\n\n\t\t\tmap = this.data.get( object );\n\n\t\t\tthis.data.delete( object );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\thas( object ) {\n\n\t\treturn this.data.has( object );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.data.clear();\n\n\t}\n\n}\n\nexport default DataMap;\n", "export const AttributeType = {\n\tVERTEX: 1,\n\tINDEX: 2,\n\tSTORAGE: 4\n};\n\n// size of a chunk in bytes (STD140 layout)\n\nexport const GPU_CHUNK_BYTES = 16;\n\n// @TODO: Move to src/constants.js\n\nexport const BlendColorFactor = 211;\nexport const OneMinusBlendColorFactor = 212;\n", "import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\nimport { DynamicDrawUsage } from 'three';\n\nclass Attributes extends DataMap {\n\n\tconstructor( backend ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tdelete( attribute ) {\n\n\t\tconst attributeData = super.delete( attribute );\n\n\t\tif ( attributeData !== undefined ) {\n\n\t\t\tthis.backend.destroyAttribute( attribute );\n\n\t\t}\n\n\t}\n\n\tupdate( attribute, type ) {\n\n\t\tconst data = this.get( attribute );\n\n\t\tif ( data.version === undefined ) {\n\n\t\t\tif ( type === AttributeType.VERTEX ) {\n\n\t\t\t\tthis.backend.createAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.INDEX ) {\n\n\t\t\t\tthis.backend.createIndexAttribute( attribute );\n\n\t\t\t} else if ( type === AttributeType.STORAGE ) {\n\n\t\t\t\tthis.backend.createStorageAttribute( attribute );\n\n\t\t\t}\n\n\t\t\tdata.version = this._getBufferAttribute( attribute ).version;\n\n\t\t} else {\n\n\t\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\t\tif ( data.version < bufferAttribute.version || bufferAttribute.usage === DynamicDrawUsage ) {\n\n\t\t\t\tthis.backend.updateAttribute( attribute );\n\n\t\t\t\tdata.version = bufferAttribute.version;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_getBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n}\n\nexport default Attributes;\n", "import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\nimport { Uint32BufferAttribute, Uint16BufferAttribute } from 'three';\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nfunction getWireframeVersion( geometry ) {\n\n\treturn ( geometry.index !== null ) ? geometry.index.version : geometry.attributes.position.version;\n\n}\n\nfunction getWireframeIndex( geometry ) {\n\n\tconst indices = [];\n\n\tconst geometryIndex = geometry.index;\n\tconst geometryPosition = geometry.attributes.position;\n\n\tif ( geometryIndex !== null ) {\n\n\t\tconst array = geometryIndex.array;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst a = array[ i + 0 ];\n\t\t\tconst b = array[ i + 1 ];\n\t\t\tconst c = array[ i + 2 ];\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = geometryPosition.array;\n\n\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\tconst a = i + 0;\n\t\t\tconst b = i + 1;\n\t\t\tconst c = i + 2;\n\n\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t}\n\n\t}\n\n\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\tattribute.version = getWireframeVersion( geometry );\n\n\treturn attribute;\n\n}\n\nclass Geometries extends DataMap {\n\n\tconstructor( attributes, info ) {\n\n\t\tsuper();\n\n\t\tthis.attributes = attributes;\n\t\tthis.info = info;\n\n\t\tthis.wireframes = new WeakMap();\n\t\tthis.attributeCall = new WeakMap();\n\n\t}\n\n\thas( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\n\t\treturn super.has( geometry ) && this.get( geometry ).initialized === true;\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tif ( this.has( renderObject ) === false ) this.initGeometry( renderObject );\n\n\t\tthis.updateAttributes( renderObject );\n\n\t}\n\n\tinitGeometry( renderObject ) {\n\n\t\tconst geometry = renderObject.geometry;\n\t\tconst geometryData = this.get( geometry );\n\n\t\tgeometryData.initialized = true;\n\n\t\tthis.info.memory.geometries ++;\n\n\t\tconst onDispose = () => {\n\n\t\t\tthis.info.memory.geometries --;\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst geometryAttributes = renderObject.getAttributes();\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tthis.attributes.delete( index );\n\n\t\t\t}\n\n\t\t\tfor ( const geometryAttribute of geometryAttributes ) {\n\n\t\t\t\tthis.attributes.delete( geometryAttribute );\n\n\t\t\t}\n\n\t\t\tconst wireframeAttribute = this.wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute !== undefined ) {\n\n\t\t\t\tthis.attributes.delete( wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener( 'dispose', onDispose );\n\n\t\t};\n\n\t\tgeometry.addEventListener( 'dispose', onDispose );\n\n\t}\n\n\tupdateAttributes( renderObject ) {\n\n\t\tconst attributes = renderObject.getAttributes();\n\n\t\tfor ( const attribute of attributes ) {\n\n\t\t\tthis.updateAttribute( attribute, AttributeType.VERTEX );\n\n\t\t}\n\n\t\tconst index = this.getIndex( renderObject );\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.updateAttribute( index, AttributeType.INDEX );\n\n\t\t}\n\n\t}\n\n\tupdateAttribute( attribute, type ) {\n\n\t\tconst callId = this.info.render.calls;\n\n\t\tif ( this.attributeCall.get( attribute ) !== callId ) {\n\n\t\t\tthis.attributes.update( attribute, type );\n\n\t\t\tthis.attributeCall.set( attribute, callId );\n\n\t\t}\n\n\t}\n\n\tgetIndex( renderObject ) {\n\n\t\tconst { geometry, material } = renderObject;\n\n\t\tlet index = geometry.index;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tconst wireframes = this.wireframes;\n\n\t\t\tlet wireframeAttribute = wireframes.get( geometry );\n\n\t\t\tif ( wireframeAttribute === undefined ) {\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t} else if ( wireframeAttribute.version !== getWireframeVersion( geometry ) ) {\n\n\t\t\t\tthis.attributes.delete( wireframeAttribute );\n\n\t\t\t\twireframeAttribute = getWireframeIndex( geometry );\n\n\t\t\t\twireframes.set( geometry, wireframeAttribute );\n\n\t\t\t}\n\n\t\t\tindex = wireframeAttribute;\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n}\n\nexport default Geometries;\n", "class Info {\n\n\tconstructor() {\n\n\t\tthis.autoReset = true;\n\n\t\tthis.frame = 0;\n\t\tthis.calls = 0;\n\n\t\tthis.render = {\n\t\t\tcalls: 0,\n\t\t\tdrawCalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tthis.compute = {\n\t\t\tcalls: 0\n\t\t};\n\n\t\tthis.memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\n\t}\n\n\tupdate( object, count, instanceCount ) {\n\n\t\tthis.render.drawCalls ++;\n\n\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\tthis.render.triangles += instanceCount * ( count / 3 );\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\tthis.render.points += instanceCount * count;\n\n\t\t} else if ( object.isLineSegments ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count / 2 );\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tthis.render.lines += instanceCount * ( count - 1 );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPUInfo: Unknown object type.' );\n\n\t\t}\n\n\t}\n\n\treset() {\n\n\t\tthis.render.drawCalls = 0;\n\t\tthis.render.triangles = 0;\n\t\tthis.render.points = 0;\n\t\tthis.render.lines = 0;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.reset();\n\n\t\tthis.calls = 0;\n\n\t\tthis.render.calls = 0;\n\t\tthis.compute.calls = 0;\n\n\t\tthis.memory.geometries = 0;\n\t\tthis.memory.textures = 0;\n\n\t}\n\n}\n\n\nexport default Info;\n", "class Pipeline {\n\n\tconstructor( cacheKey ) {\n\n\t\tthis.cacheKey = cacheKey;\n\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nexport default Pipeline;\n", "import Pipeline from './Pipeline.js';\n\nclass RenderPipeline extends Pipeline {\n\n\tconstructor( cacheKey, vertexProgram, fragmentProgram ) {\n\n\t\tsuper( cacheKey );\n\n\t\tthis.vertexProgram = vertexProgram;\n\t\tthis.fragmentProgram = fragmentProgram;\n\n\t}\n\n}\n\nexport default RenderPipeline;\n", "import Pipeline from './Pipeline.js';\n\nclass ComputePipeline extends Pipeline {\n\n\tconstructor( cacheKey, computeProgram ) {\n\n\t\tsuper( cacheKey );\n\n\t\tthis.computeProgram = computeProgram;\n\n\t\tthis.isComputePipeline = true;\n\n\t}\n\n}\n\nexport default ComputePipeline;\n", "let _id = 0;\n\nclass ProgrammableStage {\n\n\tconstructor( code, type ) {\n\n\t\tthis.id = _id ++;\n\n\t\tthis.code = code;\n\t\tthis.stage = type;\n\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nexport default ProgrammableStage;\n", "import DataMap from './DataMap.js';\nimport RenderPipeline from './RenderPipeline.js';\nimport ComputePipeline from './ComputePipeline.js';\nimport ProgrammableStage from './ProgrammableStage.js';\n\nclass Pipelines extends DataMap {\n\n\tconstructor( backend, nodes ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\t\tthis.nodes = nodes;\n\n\t\tthis.bindings = null; // set by the bindings\n\n\t\tthis.caches = new Map();\n\t\tthis.programs = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map()\n\t\t};\n\n\t}\n\n\tgetForCompute( computeNode, bindings ) {\n\n\t\tconst { backend } = this;\n\n\t\tconst data = this.get( computeNode );\n\n\t\tif ( this._needsComputeUpdate( computeNode ) ) {\n\n\t\t\tconst previousPipeline = data.pipeline;\n\n\t\t\tif ( previousPipeline ) {\n\n\t\t\t\tpreviousPipeline.usedTimes --;\n\t\t\t\tpreviousPipeline.computeProgram.usedTimes --;\n\n\t\t\t}\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilder = this.nodes.getForCompute( computeNode );\n\n\t\t\t// programmable stage\n\n\t\t\tlet stageCompute = this.programs.compute.get( nodeBuilder.computeShader );\n\n\t\t\tif ( stageCompute === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.computeProgram );\n\n\t\t\t\tstageCompute = new ProgrammableStage( nodeBuilder.computeShader, 'compute' );\n\t\t\t\tthis.programs.compute.set( nodeBuilder.computeShader, stageCompute );\n\n\t\t\t\tbackend.createProgram( stageCompute );\n\n\t\t\t}\n\n\t\t\t// determine compute pipeline\n\n\t\t\tconst cacheKey = this._getComputeCacheKey( computeNode, stageCompute );\n\n\t\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\t\tif ( pipeline === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( computeNode );\n\n\t\t\t\tpipeline = this._getComputePipeline( computeNode, stageCompute, cacheKey, bindings );\n\n\t\t\t}\n\n\t\t\t// keep track of all used times\n\n\t\t\tpipeline.usedTimes ++;\n\t\t\tstageCompute.usedTimes ++;\n\n\t\t\t//\n\n\t\t\tdata.version = computeNode.version;\n\t\t\tdata.pipeline = pipeline;\n\n\t\t}\n\n\t\treturn data.pipeline;\n\n\t}\n\n\tgetForRender( renderObject ) {\n\n\t\tconst { backend } = this;\n\n\t\tconst data = this.get( renderObject );\n\n\t\tif ( this._needsRenderUpdate( renderObject ) ) {\n\n\t\t\tconst previousPipeline = data.pipeline;\n\n\t\t\tif ( previousPipeline ) {\n\n\t\t\t\tpreviousPipeline.usedTimes --;\n\t\t\t\tpreviousPipeline.vertexProgram.usedTimes --;\n\t\t\t\tpreviousPipeline.fragmentProgram.usedTimes --;\n\n\t\t\t}\n\n\t\t\t// get shader\n\n\t\t\tconst nodeBuilderState = renderObject.getNodeBuilderState();\n\n\t\t\t// programmable stages\n\n\t\t\tlet stageVertex = this.programs.vertex.get( nodeBuilderState.vertexShader );\n\n\t\t\tif ( stageVertex === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.vertexProgram );\n\n\t\t\t\tstageVertex = new ProgrammableStage( nodeBuilderState.vertexShader, 'vertex' );\n\t\t\t\tthis.programs.vertex.set( nodeBuilderState.vertexShader, stageVertex );\n\n\t\t\t\tbackend.createProgram( stageVertex );\n\n\t\t\t}\n\n\t\t\tlet stageFragment = this.programs.fragment.get( nodeBuilderState.fragmentShader );\n\n\t\t\tif ( stageFragment === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( previousPipeline.fragmentProgram );\n\n\t\t\t\tstageFragment = new ProgrammableStage( nodeBuilderState.fragmentShader, 'fragment' );\n\t\t\t\tthis.programs.fragment.set( nodeBuilderState.fragmentShader, stageFragment );\n\n\t\t\t\tbackend.createProgram( stageFragment );\n\n\t\t\t}\n\n\t\t\t// determine render pipeline\n\n\t\t\tconst cacheKey = this._getRenderCacheKey( renderObject, stageVertex, stageFragment );\n\n\t\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\t\tif ( pipeline === undefined ) {\n\n\t\t\t\tif ( previousPipeline && previousPipeline.usedTimes === 0 ) this._releasePipeline( previousPipeline );\n\n\t\t\t\tpipeline = this._getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey );\n\n\t\t\t} else {\n\n\t\t\t\trenderObject.pipeline = pipeline;\n\n\t\t\t}\n\n\t\t\t// keep track of all used times\n\n\t\t\tpipeline.usedTimes ++;\n\t\t\tstageVertex.usedTimes ++;\n\t\t\tstageFragment.usedTimes ++;\n\n\t\t\t//\n\n\t\t\tdata.pipeline = pipeline;\n\n\t\t}\n\n\t\treturn data.pipeline;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tconst pipeline = this.get( object ).pipeline;\n\n\t\tif ( pipeline ) {\n\n\t\t\t// pipeline\n\n\t\t\tpipeline.usedTimes --;\n\n\t\t\tif ( pipeline.usedTimes === 0 ) this._releasePipeline( pipeline );\n\n\t\t\t// programs\n\n\t\t\tif ( pipeline.isComputePipeline ) {\n\n\t\t\t\tpipeline.computeProgram.usedTimes --;\n\n\t\t\t\tif ( pipeline.computeProgram.usedTimes === 0 ) this._releaseProgram( pipeline.computeProgram );\n\n\t\t\t} else {\n\n\t\t\t\tpipeline.fragmentProgram.usedTimes --;\n\t\t\t\tpipeline.vertexProgram.usedTimes --;\n\n\t\t\t\tif ( pipeline.vertexProgram.usedTimes === 0 ) this._releaseProgram( pipeline.vertexProgram );\n\t\t\t\tif ( pipeline.fragmentProgram.usedTimes === 0 ) this._releaseProgram( pipeline.fragmentProgram );\n\n\t\t\t}\n\n\t\t}\n\n\t\tsuper.delete( object );\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.caches = new Map();\n\t\tthis.programs = {\n\t\t\tvertex: new Map(),\n\t\t\tfragment: new Map(),\n\t\t\tcompute: new Map()\n\t\t};\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tthis.getForRender( renderObject );\n\n\t}\n\n\t_getComputePipeline( computeNode, stageCompute, cacheKey, bindings ) {\n\n\t\t// check for existing pipeline\n\n\t\tcacheKey = cacheKey || this._getComputeCacheKey( computeNode, stageCompute );\n\n\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new ComputePipeline( cacheKey, stageCompute );\n\n\t\t\tthis.caches.set( cacheKey, pipeline );\n\n\t\t\tthis.backend.createComputePipeline( pipeline, bindings );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t_getRenderPipeline( renderObject, stageVertex, stageFragment, cacheKey ) {\n\n\t\t// check for existing pipeline\n\n\t\tcacheKey = cacheKey || this._getRenderCacheKey( renderObject, stageVertex, stageFragment );\n\n\t\tlet pipeline = this.caches.get( cacheKey );\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = new RenderPipeline( cacheKey, stageVertex, stageFragment );\n\n\t\t\tthis.caches.set( cacheKey, pipeline );\n\n\t\t\trenderObject.pipeline = pipeline;\n\n\t\t\tthis.backend.createRenderPipeline( renderObject );\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\t_getComputeCacheKey( computeNode, stageCompute ) {\n\n\t\treturn computeNode.id + ',' + stageCompute.id;\n\n\t}\n\n\t_getRenderCacheKey( renderObject, stageVertex, stageFragment ) {\n\n\t\treturn stageVertex.id + ',' + stageFragment.id + ',' + this.backend.getRenderCacheKey( renderObject );\n\n\t}\n\n\t_releasePipeline( pipeline ) {\n\n\t\tthis.caches.delete( pipeline.cacheKey );\n\n\t}\n\n\t_releaseProgram( program ) {\n\n\t\tconst code = program.code;\n\t\tconst stage = program.stage;\n\n\t\tthis.programs[ stage ].delete( code );\n\n\t}\n\n\t_needsComputeUpdate( computeNode ) {\n\n\t\tconst data = this.get( computeNode );\n\n\t\treturn data.pipeline === undefined || data.version !== computeNode.version;\n\n\t}\n\n\t_needsRenderUpdate( renderObject ) {\n\n\t\tconst data = this.get( renderObject );\n\n\t\treturn data.pipeline === undefined || this.backend.needsRenderUpdate( renderObject );\n\n\t}\n\n}\n\nexport default Pipelines;\n", "import DataMap from './DataMap.js';\nimport { AttributeType } from './Constants.js';\n\nclass Bindings extends DataMap {\n\n\tconstructor( backend, nodes, textures, attributes, pipelines, info ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\t\tthis.textures = textures;\n\t\tthis.pipelines = pipelines;\n\t\tthis.attributes = attributes;\n\t\tthis.nodes = nodes;\n\t\tthis.info = info;\n\n\t\tthis.pipelines.bindings = this; // assign bindings to pipelines\n\n\t}\n\n\tgetForRender( renderObject ) {\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tconst data = this.get( renderObject );\n\n\t\tif ( data.bindings !== bindings ) {\n\n\t\t\t// each object defines an array of bindings (ubos, textures, samplers etc.)\n\n\t\t\tdata.bindings = bindings;\n\n\t\t\tthis._init( bindings );\n\n\t\t\tthis.backend.createBindings( bindings );\n\n\t\t}\n\n\t\treturn data.bindings;\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tconst data = this.get( computeNode );\n\n\t\tif ( data.bindings === undefined ) {\n\n\t\t\tconst nodeBuilderState = this.nodes.getForCompute( computeNode );\n\n\t\t\tconst bindings = nodeBuilderState.bindings.compute;\n\n\t\t\tdata.bindings = bindings;\n\n\t\t\tthis._init( bindings );\n\n\t\t\tthis.backend.createBindings( bindings );\n\n\t\t}\n\n\t\treturn data.bindings;\n\n\t}\n\n\tupdateForCompute( computeNode ) {\n\n\t\tthis._update( computeNode, this.getForCompute( computeNode ) );\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tthis._update( renderObject, this.getForRender( renderObject ) );\n\n\t}\n\n\t_init( bindings ) {\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tif ( binding.isSampledTexture ) {\n\n\t\t\t\tthis.textures.updateTexture( binding.texture );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst attribute = binding.attribute;\n\n\t\t\t\tthis.attributes.update( attribute, AttributeType.STORAGE );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_update( object, bindings ) {\n\n\t\tconst { backend } = this;\n\n\t\tlet needsBindingsUpdate = false;\n\n\t\t// iterate over all bindings and check if buffer updates or a new binding group is required\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tif ( binding.isNodeUniformsGroup ) {\n\n\t\t\t\tconst updated = this.nodes.updateGroup( binding );\n\n\t\t\t\tif ( ! updated ) continue;\n\n\t\t\t}\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst updated = binding.update();\n\n\t\t\t\tif ( updated ) {\n\n\t\t\t\t\tbackend.updateBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst texture = binding.texture;\n\n\t\t\t\tif ( binding.needsBindingsUpdate ) needsBindingsUpdate = true;\n\n\t\t\t\tconst updated = binding.update();\n\n\t\t\t\tif ( updated ) {\n\n\t\t\t\t\tthis.textures.updateTexture( binding.texture );\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.isStorageTexture === true ) {\n\n\t\t\t\t\tconst textureData = this.get( texture );\n\n\t\t\t\t\tif ( binding.store === true ) {\n\n\t\t\t\t\t\ttextureData.needsMipmap = true;\n\n\t\t\t\t\t} else if ( texture.generateMipmaps === true && this.textures.needsMipmaps( texture ) && textureData.needsMipmap === true ) {\n\n\t\t\t\t\t\tthis.backend.generateMipmaps( texture );\n\n\t\t\t\t\t\ttextureData.needsMipmap = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsBindingsUpdate === true ) {\n\n\t\t\tconst pipeline = this.pipelines.getForRender( object );\n\n\t\t\tthis.backend.updateBindings( bindings, pipeline );\n\n\t\t}\n\n\t}\n\n}\n\nexport default Bindings;\n", "import { LightsNode } from '../../nodes/Nodes.js';\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nclass RenderList {\n\n\tconstructor() {\n\n\t\tthis.renderItems = [];\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque = [];\n\t\tthis.transparent = [];\n\n\t\tthis.lightsNode = new LightsNode( [] );\n\t\tthis.lightsArray = [];\n\n\t\tthis.occlusionQueryCount = 0;\n\n\t}\n\n\tbegin() {\n\n\t\tthis.renderItemsIndex = 0;\n\n\t\tthis.opaque.length = 0;\n\t\tthis.transparent.length = 0;\n\t\tthis.lightsArray.length = 0;\n\n\t\tthis.occlusionQueryCount = 0;\n\n\t\treturn this;\n\n\t}\n\n\tgetNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = this.renderItems[ this.renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\tthis.renderItems[ this.renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\tthis.renderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tpush( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( object.occlusionTest === true ) this.occlusionQueryCount ++;\n\n\t\t( material.transparent === true ? this.transparent : this.opaque ).push( renderItem );\n\n\t}\n\n\tunshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = this.getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\t( material.transparent === true ? this.transparent : this.opaque ).unshift( renderItem );\n\n\t}\n\n\tpushLight( light ) {\n\n\t\tthis.lightsArray.push( light );\n\n\t}\n\n\tgetLightsNode() {\n\n\t\treturn this.lightsNode.fromLights( this.lightsArray );\n\n\t}\n\n\tsort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( this.opaque.length > 1 ) this.opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( this.transparent.length > 1 ) this.transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfinish() {\n\n\t\t// update lights\n\n\t\tthis.lightsNode.fromLights( this.lightsArray );\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = this.renderItemsIndex, il = this.renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = this.renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.groupOrder = null;\n\t\t\trenderItem.renderOrder = null;\n\t\t\trenderItem.z = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n}\n\nexport default RenderList;\n", "import ChainMap from './ChainMap.js';\nimport RenderList from './RenderList.js';\n\nclass RenderLists {\n\n\tconstructor() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n\tget( scene, camera ) {\n\n\t\tconst lists = this.lists;\n\t\tconst keys = [ scene, camera ];\n\n\t\tlet list = lists.get( keys );\n\n\t\tif ( list === undefined ) {\n\n\t\t\tlist = new RenderList();\n\t\t\tlists.set( keys, list );\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lists = new ChainMap();\n\n\t}\n\n}\n\nexport default RenderLists;\n", "import { Vector4 } from 'three';\n\nlet id = 0;\n\nclass RenderContext {\n\n\tconstructor() {\n\n\t\tthis.id = id ++;\n\n\t\tthis.color = true;\n\t\tthis.clearColor = true;\n\t\tthis.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };\n\n\t\tthis.depth = true;\n\t\tthis.clearDepth = true;\n\t\tthis.clearDepthValue = 1;\n\n\t\tthis.stencil = true;\n\t\tthis.clearStencil = true;\n\t\tthis.clearStencilValue = 1;\n\n\t\tthis.viewport = false;\n\t\tthis.viewportValue = new Vector4();\n\n\t\tthis.scissor = false;\n\t\tthis.scissorValue = new Vector4();\n\n\t\tthis.textures = null;\n\t\tthis.depthTexture = null;\n\t\tthis.activeCubeFace = 0;\n\t\tthis.sampleCount = 1;\n\n\t\tthis.width = 0;\n\t\tthis.height = 0;\n\n\t}\n\n}\n\nexport default RenderContext;\n", "import ChainMap from './ChainMap.js';\nimport RenderContext from './RenderContext.js';\n\nclass RenderContexts {\n\n\tconstructor() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n\tget( scene, camera, renderTarget = null ) {\n\n\t\tconst chainKey = [ scene, camera ];\n\n\t\tlet attachmentState;\n\n\t\tif ( renderTarget === null ) {\n\n\t\t\tattachmentState = 'default';\n\n\t\t} else {\n\n\t\t\tlet format, count;\n\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\tformat = renderTarget.texture[ 0 ].format;\n\t\t\t\tcount = renderTarget.texture.length;\n\n\t\t\t} else {\n\n\t\t\t\tformat = renderTarget.texture.format;\n\t\t\t\tcount = 1;\n\n\t\t\t}\n\n\t\t\tattachmentState = `${ count }:${ format }:${ renderTarget.samples }:${ renderTarget.depthBuffer }:${ renderTarget.stencilBuffer }`;\n\n\t\t}\n\n\t\tconst chainMap = this.getChainMap( attachmentState );\n\n\t\tlet renderState = chainMap.get( chainKey );\n\n\t\tif ( renderState === undefined ) {\n\n\t\t\trenderState = new RenderContext();\n\n\t\t\tchainMap.set( chainKey, renderState );\n\n\t\t}\n\n\t\tif ( renderTarget !== null ) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\n\t\treturn renderState;\n\n\t}\n\n\tgetChainMap( attachmentState ) {\n\n\t\treturn this.chainMaps[ attachmentState ] || ( this.chainMaps[ attachmentState ] = new ChainMap() );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.chainMaps = {};\n\n\t}\n\n}\n\nexport default RenderContexts;\n", "import DataMap from './DataMap.js';\n\nimport { Vector3, DepthTexture, DepthStencilFormat, UnsignedInt248Type, LinearFilter, NearestFilter, EquirectangularReflectionMapping, EquirectangularRefractionMapping, CubeReflectionMapping, CubeRefractionMapping } from 'three';\n\nconst _size = new Vector3();\n\nclass Textures extends DataMap {\n\n\tconstructor( backend, info ) {\n\n\t\tsuper();\n\n\t\tthis.backend = backend;\n\t\tthis.info = info;\n\n\t}\n\n\tupdateRenderTarget( renderTarget, activeMipmapLevel = 0 ) {\n\n\t\tconst renderTargetData = this.get( renderTarget );\n\n\t\tconst sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;\n\t\tconst depthTextureMips = renderTargetData.depthTextureMips || ( renderTargetData.depthTextureMips = {} );\n\n\t\tlet texture, textures;\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\ttextures = renderTarget.texture;\n\t\t\ttexture = renderTarget.texture[ 0 ];\n\n\t\t} else {\n\n\t\t\ttextures = [ renderTarget.texture ];\n\t\t\ttexture = renderTarget.texture;\n\n\t\t}\n\n\t\tconst size = this.getSize( texture );\n\n\t\tconst mipWidth = size.width >> activeMipmapLevel;\n\t\tconst mipHeight = size.height >> activeMipmapLevel;\n\n\t\tlet depthTexture = renderTarget.depthTexture || depthTextureMips[ activeMipmapLevel ];\n\t\tlet textureNeedsUpdate = false;\n\n\t\tif ( depthTexture === undefined ) {\n\n\t\t\tdepthTexture = new DepthTexture();\n\t\t\tdepthTexture.format = DepthStencilFormat;\n\t\t\tdepthTexture.type = UnsignedInt248Type;\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\n\t\t\tdepthTextureMips[ activeMipmapLevel ] = depthTexture;\n\n\t\t}\n\n\t\tif ( renderTargetData.width !== size.width || size.height !== renderTargetData.height ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\tdepthTexture.image.width = mipWidth;\n\t\t\tdepthTexture.image.height = mipHeight;\n\n\t\t}\n\n\t\trenderTargetData.width = size.width;\n\t\trenderTargetData.height = size.height;\n\t\trenderTargetData.textures = textures;\n\t\trenderTargetData.depthTexture = depthTexture;\n\t\trenderTargetData.depth = renderTarget.depthBuffer;\n\t\trenderTargetData.stencil = renderTarget.stencilBuffer;\n\n\t\tif ( renderTargetData.sampleCount !== sampleCount ) {\n\n\t\t\ttextureNeedsUpdate = true;\n\t\t\tdepthTexture.needsUpdate = true;\n\n\t\t\trenderTargetData.sampleCount = sampleCount;\n\n\t\t}\n\n\t\t//\n\n\t\tconst options = { sampleCount };\n\n\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsUpdate ) texture.needsUpdate = true;\n\n\t\t\tthis.updateTexture( texture, options );\n\n\t\t}\n\n\t\tthis.updateTexture( depthTexture, options );\n\n\t\t// dispose handler\n\n\t\tif ( renderTargetData.initialized !== true ) {\n\n\t\t\trenderTargetData.initialized = true;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\trenderTarget.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tif ( textures !== undefined ) {\n\n\t\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\t\tthis._destroyTexture( textures[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._destroyTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t\tthis._destroyTexture( depthTexture );\n\n\t\t\t};\n\n\t\t\trenderTarget.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t}\n\n\tupdateTexture( texture, options = {} ) {\n\n\t\tconst textureData = this.get( texture );\n\t\tif ( textureData.initialized === true && textureData.version === texture.version ) return;\n\n\t\tconst isRenderTarget = texture.isRenderTargetTexture || texture.isDepthTexture || texture.isFramebufferTexture;\n\t\tconst backend = this.backend;\n\n\t\tif ( isRenderTarget && textureData.initialized === true ) {\n\n\t\t\t// it's an update\n\n\t\t\tbackend.destroySampler( texture );\n\t\t\tbackend.destroyTexture( texture );\n\n\t\t}\n\n\t\t//\n\n\t\tconst { width, height, depth } = this.getSize( texture );\n\n\t\toptions.width = width;\n\t\toptions.height = height;\n\t\toptions.depth = depth;\n\t\toptions.needsMipmaps = this.needsMipmaps( texture );\n\t\toptions.levels = options.needsMipmaps ? this.getMipLevels( texture, width, height ) : 1;\n\n\t\t//\n\n\t\tif ( isRenderTarget || texture.isStorageTexture === true ) {\n\n\t\t\tbackend.createSampler( texture );\n\t\t\tbackend.createTexture( texture, options );\n\n\t\t} else {\n\n\t\t\tconst needsCreate = textureData.initialized !== true;\n\n\t\t\tif ( needsCreate ) backend.createSampler( texture );\n\n\t\t\tif ( texture.version > 0 ) {\n\n\t\t\t\tconst image = texture.image;\n\n\t\t\t\tif ( image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is undefined.' );\n\n\t\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.Renderer: Texture marked for update but image is incomplete.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.images ) {\n\n\t\t\t\t\t\tconst images = [];\n\n\t\t\t\t\t\tfor ( const image of texture.images ) {\n\n\t\t\t\t\t\t\timages.push( image );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toptions.images = images;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\toptions.image = image;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( textureData.isDefaultTexture === undefined || textureData.isDefaultTexture === true ) {\n\n\t\t\t\t\t\tbackend.createTexture( texture, options );\n\n\t\t\t\t\t\ttextureData.isDefaultTexture = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbackend.updateTexture( texture, options );\n\n\t\t\t\t\tif ( options.needsMipmaps && texture.mipmaps.length === 0 ) backend.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// async update\n\n\t\t\t\tbackend.createDefaultTexture( texture );\n\n\t\t\t\ttextureData.isDefaultTexture = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// dispose handler\n\n\t\tif ( textureData.initialized !== true ) {\n\n\t\t\ttextureData.initialized = true;\n\n\t\t\t//\n\n\t\t\tthis.info.memory.textures ++;\n\n\t\t\t// dispose\n\n\t\t\tconst onDispose = () => {\n\n\t\t\t\ttexture.removeEventListener( 'dispose', onDispose );\n\n\t\t\t\tthis._destroyTexture( texture );\n\n\t\t\t\tthis.info.memory.textures --;\n\n\t\t\t};\n\n\t\t\ttexture.addEventListener( 'dispose', onDispose );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t}\n\n\tgetSize( texture, target = _size ) {\n\n\t\tlet image = texture.images ? texture.images[ 0 ] : texture.image;\n\n\t\tif ( image ) {\n\n\t\t\tif ( image.image !== undefined ) image = image.image;\n\n\t\t\ttarget.width = image.width;\n\t\t\ttarget.height = image.height;\n\t\t\ttarget.depth = texture.isCubeTexture ? 6 : ( image.depth || 1 );\n\n\t\t} else {\n\n\t\t\ttarget.width = target.height = target.depth = 1;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetMipLevels( texture, width, height ) {\n\n\t\tlet mipLevelCount;\n\n\t\tif ( texture.isCompressedTexture ) {\n\n\t\t\tmipLevelCount = texture.mipmaps.length;\n\n\t\t} else {\n\n\t\t\tmipLevelCount = Math.floor( Math.log2( Math.max( width, height ) ) ) + 1;\n\n\t\t}\n\n\t\treturn mipLevelCount;\n\n\t}\n\n\tneedsMipmaps( texture ) {\n\n\t\tif ( this.isEnvironmentTexture( texture ) ) return true;\n\n\t\treturn ( texture.isCompressedTexture === true ) || ( ( texture.minFilter !== NearestFilter ) && ( texture.minFilter !== LinearFilter ) );\n\n\t}\n\n\tisEnvironmentTexture( texture ) {\n\n\t\tconst mapping = texture.mapping;\n\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t}\n\n\t_destroyTexture( texture ) {\n\n\t\tthis.backend.destroySampler( texture );\n\t\tthis.backend.destroyTexture( texture );\n\n\t\tthis.delete( texture );\n\n\t}\n\n}\n\nexport default Textures;\n", "import { Color } from 'three';\n\nclass Color4 extends Color {\n\n\tconstructor( r, g, b, a = 1 ) {\n\n\t\tsuper( r, g, b );\n\n\t\tthis.a = a;\n\n\t}\n\n\tset( r, g, b, a = 1 ) {\n\n\t\tthis.a = a;\n\n\t\treturn super.set( r, g, b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tif ( color.a !== undefined ) this.a = color.a;\n\n\t\treturn super.copy( color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b, this.a );\n\n\t}\n\n}\n\nexport default Color4;\n", "import DataMap from './DataMap.js';\nimport Color4 from './Color4.js';\nimport { Mesh, SphereGeometry, BackSide } from 'three';\nimport { vec4, context, normalWorld, backgroundBlurriness, backgroundIntensity, NodeMaterial, modelViewProjection } from '../../nodes/Nodes.js';\n\nconst _clearColor = new Color4();\n\nclass Background extends DataMap {\n\n\tconstructor( renderer, nodes ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.nodes = nodes;\n\n\t}\n\n\tupdate( scene, renderList, renderContext ) {\n\n\t\tconst renderer = this.renderer;\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\n\n\t\tlet forceClear = false;\n\n\t\tif ( background === null ) {\n\n\t\t\t// no background settings, use clear color configuration from the renderer\n\n\t\t\trenderer._clearColor.getRGB( _clearColor, this.renderer.currentColorSpace );\n\t\t\t_clearColor.a = renderer._clearColor.a;\n\n\t\t} else if ( background.isColor === true ) {\n\n\t\t\t// background is an opaque color\n\n\t\t\tbackground.getRGB( _clearColor, this.renderer.currentColorSpace );\n\t\t\t_clearColor.a = 1;\n\n\t\t\tforceClear = true;\n\n\t\t} else if ( background.isNode === true ) {\n\n\t\t\tconst sceneData = this.get( scene );\n\t\t\tconst backgroundNode = background;\n\n\t\t\t_clearColor.copy( renderer._clearColor );\n\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\n\n\t\t\tif ( backgroundMesh === undefined ) {\n\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ), {\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\n\t\t\t\t\tgetUV: () => normalWorld,\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\n\t\t\t\t} ).mul( backgroundIntensity );\n\n\t\t\t\tlet viewProj = modelViewProjection();\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\n\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\n\t\t\t\tnodeMaterial.side = BackSide;\n\t\t\t\tnodeMaterial.depthTest = false;\n\t\t\t\tnodeMaterial.depthWrite = false;\n\t\t\t\tnodeMaterial.fog = false;\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\n\t\t\t\tnodeMaterial.fragmentNode = backgroundMeshNode;\n\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\n\t\t\t\tbackgroundMesh.frustumCulled = false;\n\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\n\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\n\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode );\n\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\n\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\n\n\t\t\t}\n\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\n\n\t\t\t_clearColor.multiplyScalar( _clearColor.a );\n\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\n\n\t\t\tclearColorValue.r = _clearColor.r;\n\t\t\tclearColorValue.g = _clearColor.g;\n\t\t\tclearColorValue.b = _clearColor.b;\n\t\t\tclearColorValue.a = _clearColor.a;\n\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\n\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\n\n\t\t} else {\n\n\t\t\trenderContext.clearColor = false;\n\t\t\trenderContext.clearDepth = false;\n\t\t\trenderContext.clearStencil = false;\n\n\t\t}\n\n\t}\n\n}\n\nexport default Background;\n", "class NodeBuilderState {\n\n\tconstructor( vertexShader, fragmentShader, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes ) {\n\n\t\tthis.vertexShader = vertexShader;\n\t\tthis.fragmentShader = fragmentShader;\n\t\tthis.computeShader = computeShader;\n\n\t\tthis.nodeAttributes = nodeAttributes;\n\t\tthis.bindings = bindings;\n\n\t\tthis.updateNodes = updateNodes;\n\t\tthis.updateBeforeNodes = updateBeforeNodes;\n\n\t\tthis.usedTimes = 0;\n\n\t}\n\n\tcreateBindings() {\n\n\t\tconst bindingsArray = [];\n\n\t\tfor ( const instanceBinding of this.bindings ) {\n\n\t\t\tlet binding = instanceBinding;\n\n\t\t\tif ( instanceBinding.shared !== true ) {\n\n\t\t\t\tbinding = instanceBinding.clone();\n\n\t\t\t}\n\n\t\t\tbindingsArray.push( binding );\n\n\t\t}\n\n\t\treturn bindingsArray;\n\n\t}\n\n}\n\nexport default NodeBuilderState;\n", "import DataMap from '../DataMap.js';\nimport ChainMap from '../ChainMap.js';\nimport NodeBuilderState from './NodeBuilderState.js';\nimport { NoToneMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping } from 'three';\nimport { NodeFrame, objectGroup, renderGroup, frameGroup, cubeTexture, texture, rangeFog, densityFog, reference, toneMapping, equirectUV, viewportBottomLeft, normalWorld } from '../../../nodes/Nodes.js';\n\nclass Nodes extends DataMap {\n\n\tconstructor( renderer, backend ) {\n\n\t\tsuper();\n\n\t\tthis.renderer = renderer;\n\t\tthis.backend = backend;\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\t\tthis.callHashCache = new ChainMap();\n\t\tthis.groupsData = new ChainMap();\n\n\t}\n\n\tupdateGroup( nodeUniformsGroup ) {\n\n\t\tconst groupNode = nodeUniformsGroup.groupNode;\n\t\tconst name = groupNode.name;\n\n\t\t// objectGroup is every updated\n\n\t\tif ( name === objectGroup.name ) return true;\n\n\t\t// renderGroup is updated once per render/compute call\n\n\t\tif ( name === renderGroup.name ) {\n\n\t\t\tconst uniformsGroupData = this.get( nodeUniformsGroup );\n\t\t\tconst renderId = this.nodeFrame.renderId;\n\n\t\t\tif ( uniformsGroupData.renderId !== renderId ) {\n\n\t\t\t\tuniformsGroupData.renderId = renderId;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// frameGroup is updated once per frame\n\n\t\tif ( name === frameGroup.name ) {\n\n\t\t\tconst uniformsGroupData = this.get( nodeUniformsGroup );\n\t\t\tconst frameId = this.nodeFrame.frameId;\n\n\t\t\tif ( uniformsGroupData.frameId !== frameId ) {\n\n\t\t\t\tuniformsGroupData.frameId = frameId;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// other groups are updated just when groupNode.needsUpdate is true\n\n\t\tconst groupChain = [ groupNode, nodeUniformsGroup ];\n\n\t\tlet groupData = this.groupsData.get( groupChain );\n\t\tif ( groupData === undefined ) this.groupsData.set( groupChain, groupData = {} );\n\n\t\tif ( groupData.version !== groupNode.version ) {\n\n\t\t\tgroupData.version = groupNode.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tgetForRenderCacheKey( renderObject ) {\n\n\t\treturn renderObject.initialCacheKey;\n\n\t}\n\n\tgetForRender( renderObject ) {\n\n\t\tconst renderObjectData = this.get( renderObject );\n\n\t\tlet nodeBuilderState = renderObjectData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst { nodeBuilderCache } = this;\n\n\t\t\tconst cacheKey = this.getForRenderCacheKey( renderObject );\n\n\t\t\tnodeBuilderState = nodeBuilderCache.get( cacheKey );\n\n\t\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( renderObject.object, this.renderer, renderObject.scene );\n\t\t\t\tnodeBuilder.material = renderObject.material;\n\t\t\t\tnodeBuilder.context.material = renderObject.material;\n\t\t\t\tnodeBuilder.lightsNode = renderObject.lightsNode;\n\t\t\t\tnodeBuilder.environmentNode = this.getEnvironmentNode( renderObject.scene );\n\t\t\t\tnodeBuilder.fogNode = this.getFogNode( renderObject.scene );\n\t\t\t\tnodeBuilder.toneMappingNode = this.getToneMappingNode();\n\t\t\t\tnodeBuilder.build();\n\n\t\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\t\tnodeBuilderCache.set( cacheKey, nodeBuilderState );\n\n\t\t\t}\n\n\t\t\tnodeBuilderState.usedTimes ++;\n\n\t\t\trenderObjectData.nodeBuilderState = nodeBuilderState;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tif ( object.isRenderObject ) {\n\n\t\t\tconst nodeBuilderState = this.get( object ).nodeBuilderState;\n\t\t\tnodeBuilderState.usedTimes --;\n\n\t\t\tif ( nodeBuilderState.usedTimes === 0 ) {\n\n\t\t\t\tthis.nodeBuilderCache.delete( this.getForRenderCacheKey( object ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.delete( object );\n\n\t}\n\n\tgetForCompute( computeNode ) {\n\n\t\tconst computeData = this.get( computeNode );\n\n\t\tlet nodeBuilderState = computeData.nodeBuilderState;\n\n\t\tif ( nodeBuilderState === undefined ) {\n\n\t\t\tconst nodeBuilder = this.backend.createNodeBuilder( computeNode, this.renderer );\n\t\t\tnodeBuilder.build();\n\n\t\t\tnodeBuilderState = this._createNodeBuilderState( nodeBuilder );\n\n\t\t\tcomputeData.nodeBuilderState = nodeBuilder;\n\n\t\t}\n\n\t\treturn nodeBuilderState;\n\n\t}\n\n\t_createNodeBuilderState( nodeBuilder ) {\n\n\t\treturn new NodeBuilderState(\n\t\t\tnodeBuilder.vertexShader,\n\t\t\tnodeBuilder.fragmentShader,\n\t\t\tnodeBuilder.computeShader,\n\t\t\tnodeBuilder.getAttributesArray(),\n\t\t\tnodeBuilder.getBindings(),\n\t\t\tnodeBuilder.updateNodes,\n\t\t\tnodeBuilder.updateBeforeNodes\n\t\t);\n\n\t}\n\n\tgetEnvironmentNode( scene ) {\n\n\t\treturn scene.environmentNode || this.get( scene ).environmentNode || null;\n\n\t}\n\n\tgetBackgroundNode( scene ) {\n\n\t\treturn scene.backgroundNode || this.get( scene ).backgroundNode || null;\n\n\t}\n\n\tgetFogNode( scene ) {\n\n\t\treturn scene.fogNode || this.get( scene ).fogNode || null;\n\n\t}\n\n\tgetToneMappingNode() {\n\n\t\tif ( this.isToneMappingState === false ) return null;\n\n\t\treturn this.renderer.toneMappingNode || this.get( this.renderer ).toneMappingNode || null;\n\n\t}\n\n\tgetCacheKey( scene, lightsNode ) {\n\n\t\tconst chain = [ scene, lightsNode ];\n\t\tconst callId = this.renderer.info.calls;\n\n\t\tlet cacheKeyData = this.callHashCache.get( chain );\n\n\t\tif ( cacheKeyData === undefined || cacheKeyData.callId !== callId ) {\n\n\t\t\tconst environmentNode = this.getEnvironmentNode( scene );\n\t\t\tconst fogNode = this.getFogNode( scene );\n\t\t\tconst toneMappingNode = this.getToneMappingNode();\n\n\t\t\tconst cacheKey = [];\n\n\t\t\tif ( lightsNode ) cacheKey.push( lightsNode.getCacheKey() );\n\t\t\tif ( environmentNode ) cacheKey.push( environmentNode.getCacheKey() );\n\t\t\tif ( fogNode ) cacheKey.push( fogNode.getCacheKey() );\n\t\t\tif ( toneMappingNode ) cacheKey.push( toneMappingNode.getCacheKey() );\n\n\t\t\tcacheKeyData = {\n\t\t\t\tcallId,\n\t\t\t\tcacheKey: cacheKey.join( ',' )\n\t\t\t};\n\n\t\t\tthis.callHashCache.set( chain, cacheKeyData );\n\n\t\t}\n\n\t\treturn cacheKeyData.cacheKey;\n\n\t}\n\n\tupdateScene( scene ) {\n\n\t\tthis.updateEnvironment( scene );\n\t\tthis.updateFog( scene );\n\t\tthis.updateBackground( scene );\n\t\tthis.updateToneMapping();\n\n\t}\n\n\tget isToneMappingState() {\n\n\t\tconst renderer = this.renderer;\n\t\tconst renderTarget = renderer.getRenderTarget();\n\n\t\treturn renderTarget && renderTarget.isCubeRenderTarget ? false : true;\n\n\t}\n\n\tupdateToneMapping() {\n\n\t\tconst renderer = this.renderer;\n\t\tconst rendererData = this.get( renderer );\n\t\tconst rendererToneMapping = renderer.toneMapping;\n\n\t\tif ( this.isToneMappingState && rendererToneMapping !== NoToneMapping ) {\n\n\t\t\tif ( rendererData.toneMapping !== rendererToneMapping ) {\n\n\t\t\t\tconst rendererToneMappingNode = rendererData.rendererToneMappingNode || toneMapping( rendererToneMapping, reference( 'toneMappingExposure', 'float', renderer ) );\n\t\t\t\trendererToneMappingNode.toneMapping = rendererToneMapping;\n\n\t\t\t\trendererData.rendererToneMappingNode = rendererToneMappingNode;\n\t\t\t\trendererData.toneMappingNode = rendererToneMappingNode;\n\t\t\t\trendererData.toneMapping = rendererToneMapping;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Don't delete rendererData.rendererToneMappingNode\n\t\t\tdelete rendererData.toneMappingNode;\n\t\t\tdelete rendererData.toneMapping;\n\n\t\t}\n\n\t}\n\n\tupdateBackground( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( sceneData.background !== background ) {\n\n\t\t\t\tlet backgroundNode = null;\n\n\t\t\t\tif ( background.isCubeTexture === true ) {\n\n\t\t\t\t\tbackgroundNode = cubeTexture( background, normalWorld );\n\n\t\t\t\t} else if ( background.isTexture === true ) {\n\n\t\t\t\t\tlet nodeUV = null;\n\n\t\t\t\t\tif ( background.mapping === EquirectangularReflectionMapping || background.mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\t\t\tnodeUV = equirectUV();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnodeUV = viewportBottomLeft;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbackgroundNode = texture( background, nodeUV ).setUpdateMatrix( true );\n\n\t\t\t\t} else if ( background.isColor !== true ) {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported background configuration.', background );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.backgroundNode = backgroundNode;\n\t\t\t\tsceneData.background = background;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.backgroundNode ) {\n\n\t\t\tdelete sceneData.backgroundNode;\n\t\t\tdelete sceneData.background;\n\n\t\t}\n\n\t}\n\n\tupdateFog( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst fog = scene.fog;\n\n\t\tif ( fog ) {\n\n\t\t\tif ( sceneData.fog !== fog ) {\n\n\t\t\t\tlet fogNode = null;\n\n\t\t\t\tif ( fog.isFogExp2 ) {\n\n\t\t\t\t\tfogNode = densityFog( reference( 'color', 'color', fog ), reference( 'density', 'float', fog ) );\n\n\t\t\t\t} else if ( fog.isFog ) {\n\n\t\t\t\t\tfogNode = rangeFog( reference( 'color', 'color', fog ), reference( 'near', 'float', fog ), reference( 'far', 'float', fog ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'WebGPUNodes: Unsupported fog configuration.', fog );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.fogNode = fogNode;\n\t\t\t\tsceneData.fog = fog;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdelete sceneData.fogNode;\n\t\t\tdelete sceneData.fog;\n\n\t\t}\n\n\t}\n\n\tupdateEnvironment( scene ) {\n\n\t\tconst sceneData = this.get( scene );\n\t\tconst environment = scene.environment;\n\n\t\tif ( environment ) {\n\n\t\t\tif ( sceneData.environment !== environment ) {\n\n\t\t\t\tlet environmentNode = null;\n\n\t\t\t\tif ( environment.isCubeTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = cubeTexture( environment );\n\n\t\t\t\t} else if ( environment.isTexture === true ) {\n\n\t\t\t\t\tenvironmentNode = texture( environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'Nodes: Unsupported environment configuration.', environment );\n\n\t\t\t\t}\n\n\t\t\t\tsceneData.environmentNode = environmentNode;\n\t\t\t\tsceneData.environment = environment;\n\n\t\t\t}\n\n\t\t} else if ( sceneData.environmentNode ) {\n\n\t\t\tdelete sceneData.environmentNode;\n\t\t\tdelete sceneData.environment;\n\n\t\t}\n\n\t}\n\n\tgetNodeFrame( renderer = this.renderer, scene = null, object = null, camera = null, material = null ) {\n\n\t\tconst nodeFrame = this.nodeFrame;\n\t\tnodeFrame.renderer = renderer;\n\t\tnodeFrame.scene = scene;\n\t\tnodeFrame.object = object;\n\t\tnodeFrame.camera = camera;\n\t\tnodeFrame.material = material;\n\n\t\treturn nodeFrame;\n\n\t}\n\n\tgetNodeFrameForRender( renderObject ) {\n\n\t\treturn this.getNodeFrame( renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material );\n\n\t}\n\n\tupdateBefore( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrameForRender( renderObject );\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateBeforeNodes ) {\n\n\t\t\tnodeFrame.updateBeforeNode( node );\n\n\t\t}\n\n\t}\n\n\tupdateForCompute( computeNode ) {\n\n\t\tconst nodeFrame = this.getNodeFrame();\n\t\tconst nodeBuilder = this.getForCompute( computeNode );\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\tupdateForRender( renderObject ) {\n\n\t\tconst nodeFrame = this.getNodeFrameForRender( renderObject );\n\t\tconst nodeBuilder = renderObject.getNodeBuilderState();\n\n\t\tfor ( const node of nodeBuilder.updateNodes ) {\n\n\t\t\tnodeFrame.updateNode( node );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\n\t\tthis.nodeFrame = new NodeFrame();\n\t\tthis.nodeBuilderCache = new Map();\n\n\t}\n\n}\n\nexport default Nodes;\n", "import Animation from './Animation.js';\nimport RenderObjects from './RenderObjects.js';\nimport Attributes from './Attributes.js';\nimport Geometries from './Geometries.js';\nimport Info from './Info.js';\nimport Pipelines from './Pipelines.js';\nimport Bindings from './Bindings.js';\nimport RenderLists from './RenderLists.js';\nimport RenderContexts from './RenderContexts.js';\nimport Textures from './Textures.js';\nimport Background from './Background.js';\nimport Nodes from './nodes/Nodes.js';\nimport Color4 from './Color4.js';\nimport { Scene, Frustum, Matrix4, Vector2, Vector3, Vector4, DoubleSide, BackSide, FrontSide, SRGBColorSpace, NoToneMapping } from 'three';\n\nconst _scene = new Scene();\nconst _drawingBufferSize = new Vector2();\nconst _screen = new Vector4();\nconst _frustum = new Frustum();\nconst _projScreenMatrix = new Matrix4();\nconst _vector3 = new Vector3();\n\nclass Renderer {\n\n\tconstructor( backend, parameters = {} ) {\n\n\t\tthis.isRenderer = true;\n\n\t\t//\n\n\t\tconst {\n\t\t\tlogarithmicDepthBuffer = false,\n\t\t} = parameters;\n\n\t\t// public\n\n\t\tthis.domElement = backend.getDomElement();\n\n\t\tthis.backend = backend;\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\tthis.logarithmicDepthBuffer = logarithmicDepthBuffer;\n\n\t\tthis.outputColorSpace = SRGBColorSpace;\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\tthis.sortObjects = true;\n\n\t\tthis.depth = true;\n\t\tthis.stencil = true;\n\n\t\tthis.info = new Info();\n\n\t\t// internals\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = this.domElement.width;\n\t\tthis._height = this.domElement.height;\n\n\t\tthis._viewport = new Vector4( 0, 0, this._width, this._height );\n\t\tthis._scissor = new Vector4( 0, 0, this._width, this._height );\n\t\tthis._scissorTest = false;\n\n\t\tthis._properties = null;\n\t\tthis._attributes = null;\n\t\tthis._geometries = null;\n\t\tthis._nodes = null;\n\t\tthis._animation = null;\n\t\tthis._bindings = null;\n\t\tthis._objects = null;\n\t\tthis._pipelines = null;\n\t\tthis._renderLists = null;\n\t\tthis._renderContexts = null;\n\t\tthis._textures = null;\n\t\tthis._background = null;\n\n\t\tthis._currentRenderContext = null;\n\n\t\tthis._opaqueSort = null;\n\t\tthis._transparentSort = null;\n\n\t\tthis._clearColor = new Color4( 0x000000 );\n\t\tthis._clearDepth = 1;\n\t\tthis._clearStencil = 0;\n\n\t\tthis._renderTarget = null;\n\t\tthis._activeCubeFace = 0;\n\t\tthis._activeMipmapLevel = 0;\n\n\t\tthis._renderObjectFunction = null;\n\t\tthis._currentRenderObjectFunction = null;\n\n\t\tthis._initialized = false;\n\t\tthis._initPromise = null;\n\n\t\t// backwards compatibility\n\n\t\tthis.shadowMap = {\n\t\t\tenabled: false,\n\t\t\ttype: null\n\t\t};\n\n\t\tthis.xr = {\n\t\t\tenabled: false\n\t\t};\n\n\t}\n\n\tasync init() {\n\n\t\tif ( this._initialized ) {\n\n\t\t\tthrow new Error( 'Renderer: Backend has already been initialized.' );\n\n\t\t}\n\n\t\tif ( this._initPromise !== null ) {\n\n\t\t\treturn this._initPromise;\n\n\t\t}\n\n\t\tthis._initPromise = new Promise( async ( resolve, reject ) => {\n\n\t\t\tconst backend = this.backend;\n\n\t\t\ttry {\n\n\t\t\t\tawait backend.init( this );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\treject( error );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tthis._nodes = new Nodes( this, backend );\n\t\t\tthis._animation = new Animation( this._nodes, this.info );\n\t\t\tthis._attributes = new Attributes( backend );\n\t\t\tthis._background = new Background( this, this._nodes );\n\t\t\tthis._geometries = new Geometries( this._attributes, this.info );\n\t\t\tthis._textures = new Textures( backend, this.info );\n\t\t\tthis._pipelines = new Pipelines( backend, this._nodes );\n\t\t\tthis._bindings = new Bindings( backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info );\n\t\t\tthis._objects = new RenderObjects( this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info );\n\t\t\tthis._renderLists = new RenderLists();\n\t\t\tthis._renderContexts = new RenderContexts();\n\n\t\t\t//\n\n\t\t\tthis._initialized = true;\n\n\t\t\tresolve();\n\n\t\t} );\n\n\t\treturn this._initPromise;\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn this.backend.coordinateSystem;\n\n\t}\n\n\tasync compile( /*scene, camera*/ ) {\n\n\t\tconsole.warn( 'THREE.Renderer: .compile() is not implemented yet.' );\n\n\t}\n\n\tasync render( scene, camera ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\t// preserve render tree\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\t\tconst previousRenderContext = this._currentRenderContext;\n\t\tconst previousRenderObjectFunction = this._currentRenderObjectFunction;\n\n\t\t//\n\n\t\tconst sceneRef = ( scene.isScene === true ) ? scene : _scene;\n\n\t\tconst renderTarget = this._renderTarget;\n\t\tconst renderContext = this._renderContexts.get( scene, camera, renderTarget );\n\t\tconst activeCubeFace = this._activeCubeFace;\n\t\tconst activeMipmapLevel = this._activeMipmapLevel;\n\n\t\tthis._currentRenderContext = renderContext;\n\t\tthis._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;\n\n\t\t//\n\n\t\tthis.info.calls ++;\n\t\tthis.info.render.calls ++;\n\n\t\tnodeFrame.renderId = this.info.calls;\n\n\t\t//\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tif ( camera.coordinateSystem !== coordinateSystem ) {\n\n\t\t\tcamera.coordinateSystem = coordinateSystem;\n\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tlet viewport = this._viewport;\n\t\tlet scissor = this._scissor;\n\t\tlet pixelRatio = this._pixelRatio;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tviewport = renderTarget.viewport;\n\t\t\tscissor = renderTarget.scissor;\n\t\t\tpixelRatio = 1;\n\n\t\t}\n\n\t\tthis.getDrawingBufferSize( _drawingBufferSize );\n\n\t\t_screen.set( 0, 0, _drawingBufferSize.width, _drawingBufferSize.height );\n\n\t\tconst minDepth = ( viewport.minDepth === undefined ) ? 0 : viewport.minDepth;\n\t\tconst maxDepth = ( viewport.maxDepth === undefined ) ? 1 : viewport.maxDepth;\n\n\t\trenderContext.viewportValue.copy( viewport ).multiplyScalar( pixelRatio ).floor();\n\t\trenderContext.viewportValue.width >>= activeMipmapLevel;\n\t\trenderContext.viewportValue.height >>= activeMipmapLevel;\n\t\trenderContext.viewportValue.minDepth = minDepth;\n\t\trenderContext.viewportValue.maxDepth = maxDepth;\n\t\trenderContext.viewport = renderContext.viewportValue.equals( _screen ) === false;\n\n\t\trenderContext.scissorValue.copy( scissor ).multiplyScalar( pixelRatio ).floor();\n\t\trenderContext.scissor = this._scissorTest && renderContext.scissorValue.equals( _screen ) === false;\n\t\trenderContext.scissorValue.width >>= activeMipmapLevel;\n\t\trenderContext.scissorValue.height >>= activeMipmapLevel;\n\n\t\trenderContext.depth = this.depth;\n\t\trenderContext.stencil = this.stencil;\n\n\t\t//\n\n\t\tsceneRef.onBeforeRender( this, scene, camera, renderTarget );\n\n\t\t//\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix, coordinateSystem );\n\n\t\tconst renderList = this._renderLists.get( scene, camera );\n\t\trenderList.begin();\n\n\t\tthis._projectObject( scene, camera, 0, renderList );\n\n\t\trenderList.finish();\n\n\t\tif ( this.sortObjects === true ) {\n\n\t\t\trenderList.sort( this._opaqueSort, this._transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget, activeMipmapLevel );\n\n\t\t\tconst renderTargetData = this._textures.get( renderTarget );\n\n\t\t\trenderContext.textures = renderTargetData.textures;\n\t\t\trenderContext.depthTexture = renderTargetData.depthTexture;\n\t\t\trenderContext.width = renderTargetData.width;\n\t\t\trenderContext.height = renderTargetData.height;\n\t\t\trenderContext.renderTarget = renderTarget;\n\n\t\t} else {\n\n\t\t\trenderContext.textures = null;\n\t\t\trenderContext.depthTexture = null;\n\t\t\trenderContext.width = this.domElement.width;\n\t\t\trenderContext.height = this.domElement.height;\n\n\t\t}\n\n\t\trenderContext.width >>= activeMipmapLevel;\n\t\trenderContext.height >>= activeMipmapLevel;\n\t\trenderContext.activeCubeFace = activeCubeFace;\n\t\trenderContext.activeMipmapLevel = activeMipmapLevel;\n\t\trenderContext.occlusionQueryCount = renderList.occlusionQueryCount;\n\n\t\t//\n\n\t\tthis._nodes.updateScene( sceneRef );\n\n\t\t//\n\n\t\tthis._background.update( sceneRef, renderList, renderContext );\n\n\t\t//\n\n\t\tthis.backend.beginRender( renderContext );\n\n\t\t// process render lists\n\n\t\tconst opaqueObjects = renderList.opaque;\n\t\tconst transparentObjects = renderList.transparent;\n\t\tconst lightsNode = renderList.lightsNode;\n\n\t\tif ( opaqueObjects.length > 0 ) this._renderObjects( opaqueObjects, camera, sceneRef, lightsNode );\n\t\tif ( transparentObjects.length > 0 ) this._renderObjects( transparentObjects, camera, sceneRef, lightsNode );\n\n\t\t// finish render pass\n\n\t\tthis.backend.finishRender( renderContext );\n\n\t\t// restore render tree\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t\tthis._currentRenderContext = previousRenderContext;\n\t\tthis._currentRenderObjectFunction = previousRenderObjectFunction;\n\n\t\t//\n\n\t\tsceneRef.onAfterRender( this, scene, camera, renderTarget );\n\n\t}\n\n\tgetMaxAnisotropy() {\n\n\t\treturn this.backend.getMaxAnisotropy();\n\n\t}\n\n\tgetActiveCubeFace() {\n\n\t\treturn this._activeCubeFace;\n\n\t}\n\n\tgetActiveMipmapLevel() {\n\n\t\treturn this._activeMipmapLevel;\n\n\t}\n\n\tasync setAnimationLoop( callback ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tthis._animation.setAnimationLoop( callback );\n\n\t}\n\n\tgetArrayBuffer( attribute ) { // @deprecated, r155\n\n\t\tconsole.warn( 'THREE.Renderer: getArrayBuffer() is deprecated. Use getArrayBufferAsync() instead.' );\n\n\t\treturn this.getArrayBufferAsync( attribute );\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.backend.getArrayBufferAsync( attribute );\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this._context;\n\n\t}\n\n\tgetPixelRatio() {\n\n\t\treturn this._pixelRatio;\n\n\t}\n\n\tgetDrawingBufferSize( target ) {\n\n\t\treturn target.set( this._width * this._pixelRatio, this._height * this._pixelRatio ).floor();\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn target.set( this._width, this._height );\n\n\t}\n\n\tsetPixelRatio( value = 1 ) {\n\n\t\tthis._pixelRatio = value;\n\n\t\tthis.setSize( this._width, this._height, false );\n\n\t}\n\n\tsetDrawingBufferSize( width, height, pixelRatio ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.domElement.width = Math.floor( width * pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t\tif ( this._initialized ) this.backend.updateSize();\n\n\t}\n\n\tsetSize( width, height, updateStyle = true ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tthis.domElement.width = Math.floor( width * this._pixelRatio );\n\t\tthis.domElement.height = Math.floor( height * this._pixelRatio );\n\n\t\tif ( updateStyle === true ) {\n\n\t\t\tthis.domElement.style.width = width + 'px';\n\t\t\tthis.domElement.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t\tif ( this._initialized ) this.backend.updateSize();\n\n\t}\n\n\tsetOpaqueSort( method ) {\n\n\t\tthis._opaqueSort = method;\n\n\t}\n\n\tsetTransparentSort( method ) {\n\n\t\tthis._transparentSort = method;\n\n\t}\n\n\tgetScissor( target ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\ttarget.x = scissor.x;\n\t\ttarget.y = scissor.y;\n\t\ttarget.width = scissor.width;\n\t\ttarget.height = scissor.height;\n\n\t\treturn target;\n\n\t}\n\n\tsetScissor( x, y, width, height ) {\n\n\t\tconst scissor = this._scissor;\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\tscissor.copy( x );\n\n\t\t} else {\n\n\t\t\tscissor.set( x, y, width, height );\n\n\t\t}\n\n\t}\n\n\tgetScissorTest() {\n\n\t\treturn this._scissorTest;\n\n\t}\n\n\tsetScissorTest( boolean ) {\n\n\t\tthis._scissorTest = boolean;\n\n\t}\n\n\tgetViewport( target ) {\n\n\t\treturn target.copy( this._viewport );\n\n\t}\n\n\tsetViewport( x, y, width, height, minDepth = 0, maxDepth = 1 ) {\n\n\t\tconst viewport = this._viewport;\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\tviewport.copy( x );\n\n\t\t} else {\n\n\t\t\tviewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tviewport.minDepth = minDepth;\n\t\tviewport.maxDepth = maxDepth;\n\n\t}\n\n\tgetClearColor( target ) {\n\n\t\treturn target.copy( this._clearColor );\n\n\t}\n\n\tsetClearColor( color, alpha = 1 ) {\n\n\t\tthis._clearColor.set( color );\n\t\tthis._clearColor.a = alpha;\n\n\t}\n\n\tgetClearAlpha() {\n\n\t\treturn this._clearColor.a;\n\n\t}\n\n\tsetClearAlpha( alpha ) {\n\n\t\tthis._clearColor.a = alpha;\n\n\t}\n\n\tgetClearDepth() {\n\n\t\treturn this._clearDepth;\n\n\t}\n\n\tsetClearDepth( depth ) {\n\n\t\tthis._clearDepth = depth;\n\n\t}\n\n\tgetClearStencil() {\n\n\t\treturn this._clearStencil;\n\n\t}\n\n\tsetClearStencil( stencil ) {\n\n\t\tthis._clearStencil = stencil;\n\n\t}\n\n\tisOccluded( object ) {\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\treturn renderContext && this.backend.isOccluded( renderContext, object );\n\n\t}\n\n\tclear( color = true, depth = true, stencil = true ) {\n\n\t\tlet renderTargetData = null;\n\t\tconst renderTarget = this._renderTarget;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tthis._textures.updateRenderTarget( renderTarget );\n\n\t\t\trenderTargetData = this._textures.get( renderTarget );\n\n\t\t}\n\n\t\tthis.backend.clear( color, depth, stencil, renderTargetData );\n\n\t}\n\n\tclearColor() {\n\n\t\tthis.clear( true, false, false );\n\n\t}\n\n\tclearDepth() {\n\n\t\tthis.clear( false, true, false );\n\n\t}\n\n\tclearStencil() {\n\n\t\tthis.clear( false, false, true );\n\n\t}\n\n\tget currentColorSpace() {\n\n\t\tconst renderTarget = this._renderTarget;\n\n\t\tif ( renderTarget !== null ) {\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\treturn ( Array.isArray( texture ) ? texture[ 0 ] : texture ).colorSpace;\n\n\t\t}\n\n\t\treturn this.outputColorSpace;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.info.dispose();\n\n\t\tthis._animation.dispose();\n\t\tthis._objects.dispose();\n\t\tthis._properties.dispose();\n\t\tthis._pipelines.dispose();\n\t\tthis._nodes.dispose();\n\t\tthis._bindings.dispose();\n\t\tthis._renderLists.dispose();\n\t\tthis._renderContexts.dispose();\n\t\tthis._textures.dispose();\n\n\t\tthis.setRenderTarget( null );\n\t\tthis.setAnimationLoop( null );\n\n\t}\n\n\tsetRenderTarget( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\tthis._renderTarget = renderTarget;\n\t\tthis._activeCubeFace = activeCubeFace;\n\t\tthis._activeMipmapLevel = activeMipmapLevel;\n\n\t}\n\n\tgetRenderTarget() {\n\n\t\treturn this._renderTarget;\n\n\t}\n\n\tsetRenderObjectFunction( renderObjectFunction ) {\n\n\t\tthis._renderObjectFunction = renderObjectFunction;\n\n\t}\n\n\tgetRenderObjectFunction() {\n\n\t\treturn this._renderObjectFunction;\n\n\t}\n\n\tasync compute( computeNodes ) {\n\n\t\tif ( this._initialized === false ) await this.init();\n\n\t\tconst nodeFrame = this._nodes.nodeFrame;\n\n\t\tconst previousRenderId = nodeFrame.renderId;\n\n\t\t//\n\n\t\tthis.info.calls ++;\n\t\tthis.info.compute.calls ++;\n\n\t\tnodeFrame.renderId = this.info.calls;\n\n\t\t//\n\n\t\tconst backend = this.backend;\n\t\tconst pipelines = this._pipelines;\n\t\tconst bindings = this._bindings;\n\t\tconst nodes = this._nodes;\n\t\tconst computeList = Array.isArray( computeNodes ) ? computeNodes : [ computeNodes ];\n\n\t\tif ( computeList[ 0 ] === undefined || computeList[ 0 ].isComputeNode !== true ) {\n\n\t\t\tthrow new Error( 'THREE.Renderer: .compute() expects a ComputeNode.' );\n\n\t\t}\n\n\t\tbackend.beginCompute( computeNodes );\n\n\t\tfor ( const computeNode of computeList ) {\n\n\t\t\t// onInit\n\n\t\t\tif ( pipelines.has( computeNode ) === false ) {\n\n\t\t\t\tconst dispose = () => {\n\n\t\t\t\t\tcomputeNode.removeEventListener( 'dispose', dispose );\n\n\t\t\t\t\tpipelines.delete( computeNode );\n\t\t\t\t\tbindings.delete( computeNode );\n\t\t\t\t\tnodes.delete( computeNode );\n\n\t\t\t\t};\n\n\t\t\t\tcomputeNode.addEventListener( 'dispose', dispose );\n\n\t\t\t\t//\n\n\t\t\t\tcomputeNode.onInit( { renderer: this } );\n\n\t\t\t}\n\n\t\t\tnodes.updateForCompute( computeNode );\n\t\t\tbindings.updateForCompute( computeNode );\n\n\t\t\tconst computeBindings = bindings.getForCompute( computeNode );\n\t\t\tconst computePipeline = pipelines.getForCompute( computeNode, computeBindings );\n\n\t\t\tbackend.compute( computeNodes, computeNode, computeBindings, computePipeline );\n\n\t\t}\n\n\t\tbackend.finishCompute( computeNodes );\n\n\t\t//\n\n\t\tnodeFrame.renderId = previousRenderId;\n\n\t}\n\n\thasFeature( name ) {\n\n\t\treturn this.backend.hasFeature( name );\n\n\t}\n\n\tcopyFramebufferToTexture( framebufferTexture ) {\n\n\t\tconst renderContext = this._currentRenderContext;\n\n\t\tthis._textures.updateTexture( framebufferTexture );\n\n\t\tthis.backend.copyFramebufferToTexture( framebufferTexture, renderContext );\n\n\t}\n\n\treadRenderTargetPixelsAsync( renderTarget, x, y, width, height ) {\n\n\t\treturn this.backend.copyTextureToBuffer( renderTarget.texture, x, y, width, height );\n\n\t}\n\n\t_projectObject( object, camera, groupOrder, renderList ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\trenderList.pushLight( object );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld ).applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = object.geometry;\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\tconsole.error( 'THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.' );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tconst geometry = object.geometry;\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( this.sortObjects === true ) {\n\n\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t\t\t\t_vector3\n\t\t\t\t\t\t\t.copy( geometry.boundingSphere.center )\n\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\trenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\trenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis._projectObject( children[ i ], camera, groupOrder, renderList );\n\n\t\t}\n\n\t}\n\n\t_renderObjects( renderList, camera, scene, lightsNode ) {\n\n\t\t// process renderable objects\n\n\t\tfor ( let i = 0, il = renderList.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\t// @TODO: Add support for multiple materials per object. This will require to extract\n\t\t\t// the material from the renderItem object and pass it with its group data to renderObject().\n\n\t\t\tconst { object, geometry, material, group } = renderItem;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor ( let j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tconst vp = camera2.viewport;\n\t\t\t\t\t\tconst minDepth = ( vp.minDepth === undefined ) ? 0 : vp.minDepth;\n\t\t\t\t\t\tconst maxDepth = ( vp.maxDepth === undefined ) ? 1 : vp.maxDepth;\n\n\t\t\t\t\t\tconst viewportValue = this._currentRenderContext.viewportValue;\n\t\t\t\t\t\tviewportValue.copy( vp ).multiplyScalar( this._pixelRatio ).floor();\n\t\t\t\t\t\tviewportValue.minDepth = minDepth;\n\t\t\t\t\t\tviewportValue.maxDepth = maxDepth;\n\n\t\t\t\t\t\tthis.backend.updateViewport( this._currentRenderContext );\n\n\t\t\t\t\t\tthis._currentRenderObjectFunction( object, scene, camera2, geometry, material, group, lightsNode );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis._currentRenderObjectFunction( object, scene, camera, geometry, material, group, lightsNode );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\trenderObject( object, scene, camera, geometry, material, group, lightsNode ) {\n\n\t\tlet overridePositionNode;\n\n\t\t//\n\n\t\tobject.onBeforeRender( this, scene, camera, geometry, material, group );\n\n\t\tmaterial.onBeforeRender( this, scene, camera, geometry, material, group );\n\n\t\t//\n\n\t\tif ( scene.overrideMaterial !== null ) {\n\n\t\t\tconst overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( material.positionNode && material.positionNode.isNode ) {\n\n\t\t\t\toverridePositionNode = overrideMaterial.positionNode;\n\n\t\t\t\toverrideMaterial.positionNode = material.positionNode;\n\n\t\t\t}\n\n\t\t\tmaterial = overrideMaterial;\n\n\t\t}\n\n\t\t//\n\n\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tthis._renderObjectDirect( object, material, scene, camera, lightsNode, 'backSide' ); // create backSide pass id\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tthis._renderObjectDirect( object, material, scene, camera, lightsNode ); // use default pass id\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\tthis._renderObjectDirect( object, material, scene, camera, lightsNode );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( overridePositionNode !== undefined ) {\n\n\t\t\tscene.overrideMaterial.positionNode = overridePositionNode;\n\n\t\t}\n\n\t\t//\n\n\t\tobject.onAfterRender( this, scene, camera, geometry, material, group );\n\n\t}\n\n\t_renderObjectDirect( object, material, scene, camera, lightsNode, passId ) {\n\n\t\tconst renderObject = this._objects.get( object, material, scene, camera, lightsNode, this._currentRenderContext, passId );\n\n\t\t//\n\n\t\tthis._nodes.updateBefore( renderObject );\n\n\t\t//\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t//\n\n\t\tthis._nodes.updateForRender( renderObject );\n\t\tthis._geometries.updateForRender( renderObject );\n\t\tthis._bindings.updateForRender( renderObject );\n\t\tthis._pipelines.updateForRender( renderObject );\n\n\t\t//\n\n\t\tthis.backend.draw( renderObject, this.info );\n\n\t}\n\n}\n\nexport default Renderer;\n", "class Binding {\n\n\tconstructor( name = '' ) {\n\n\t\tthis.name = name;\n\n\t\tthis.visibility = 0;\n\n\t}\n\n\tsetVisibility( visibility ) {\n\n\t\tthis.visibility |= visibility;\n\n\t}\n\n\tclone() {\n\n\t\treturn Object.assign( new this.constructor(), this );\n\n\t}\n\n}\n\nexport default Binding;\n", "import { GPU_CHUNK_BYTES } from './Constants.js';\n\nfunction getFloatLength( floatLength ) {\n\n\t// ensure chunk size alignment (STD140 layout)\n\n\treturn floatLength + ( ( GPU_CHUNK_BYTES - ( floatLength % GPU_CHUNK_BYTES ) ) % GPU_CHUNK_BYTES );\n\n}\n\nfunction getVectorLength( count, vectorLength = 4 ) {\n\n\tconst strideLength = getStrideLength( vectorLength );\n\n\tconst floatLength = strideLength * count;\n\n\treturn getFloatLength( floatLength );\n\n}\n\nfunction getStrideLength( vectorLength ) {\n\n\tconst strideLength = 4;\n\n\treturn vectorLength + ( ( strideLength - ( vectorLength % strideLength ) ) % strideLength );\n\n}\n\nexport {\n\tgetFloatLength,\n\tgetVectorLength,\n\tgetStrideLength\n};\n", "import Binding from './Binding.js';\nimport { getFloatLength } from './BufferUtils.js';\n\nclass Buffer extends Binding {\n\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name );\n\n\t\tthis.isBuffer = true;\n\n\t\tthis.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;\n\n\t\tthis._buffer = buffer;\n\n\t}\n\n\tget byteLength() {\n\n\t\treturn getFloatLength( this._buffer.byteLength );\n\n\t}\n\n\tget buffer() {\n\n\t\treturn this._buffer;\n\n\t}\n\n\tupdate() {\n\n\t\treturn true;\n\n\t}\n\n}\n\nexport default Buffer;\n", "import Buffer from './Buffer.js';\n\nclass UniformBuffer extends Buffer {\n\n\tconstructor( name, buffer = null ) {\n\n\t\tsuper( name, buffer );\n\n\t\tthis.isUniformBuffer = true;\n\n\t}\n\n}\n\nexport default UniformBuffer;\n", "import UniformBuffer from './UniformBuffer.js';\nimport { GPU_CHUNK_BYTES } from './Constants.js';\n\nclass UniformsGroup extends UniformBuffer {\n\n\tconstructor( name ) {\n\n\t\tsuper( name );\n\n\t\tthis.isUniformsGroup = true;\n\n\t\t// the order of uniforms in this array must match the order of uniforms in the shader\n\n\t\tthis.uniforms = [];\n\n\t}\n\n\taddUniform( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremoveUniform( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.uniforms.splice( index, 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tget buffer() {\n\n\t\tlet buffer = this._buffer;\n\n\t\tif ( buffer === null ) {\n\n\t\t\tconst byteLength = this.byteLength;\n\n\t\t\tbuffer = new Float32Array( new ArrayBuffer( byteLength ) );\n\n\t\t\tthis._buffer = buffer;\n\n\t\t}\n\n\t\treturn buffer;\n\n\t}\n\n\tget byteLength() {\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\n\t\tfor ( let i = 0, l = this.uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = this.uniforms[ i ];\n\n\t\t\t// offset within a single chunk in bytes\n\n\t\t\tconst chunkOffset = offset % GPU_CHUNK_BYTES;\n\t\t\tconst remainingSizeInChunk = GPU_CHUNK_BYTES - chunkOffset;\n\n\t\t\t// conformance tests\n\n\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - uniform.boundary ) < 0 ) {\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\toffset += ( GPU_CHUNK_BYTES - chunkOffset );\n\n\t\t\t} else if ( chunkOffset % uniform.boundary !== 0 ) {\n\n\t\t\t\t// check for correct alignment\n\n\t\t\t\toffset += ( chunkOffset % uniform.boundary );\n\n\t\t\t}\n\n\t\t\tuniform.offset = ( offset / this.bytesPerElement );\n\n\t\t\toffset += ( uniform.itemSize * this.bytesPerElement );\n\n\t\t}\n\n\t\treturn Math.ceil( offset / GPU_CHUNK_BYTES ) * GPU_CHUNK_BYTES;\n\n\t}\n\n\tupdate() {\n\n\t\tlet updated = false;\n\n\t\tfor ( const uniform of this.uniforms ) {\n\n\t\t\tif ( this.updateByType( uniform ) === true ) {\n\n\t\t\t\tupdated = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateByType( uniform ) {\n\n\t\tif ( uniform.isFloatUniform ) return this.updateNumber( uniform );\n\t\tif ( uniform.isVector2Uniform ) return this.updateVector2( uniform );\n\t\tif ( uniform.isVector3Uniform ) return this.updateVector3( uniform );\n\t\tif ( uniform.isVector4Uniform ) return this.updateVector4( uniform );\n\t\tif ( uniform.isColorUniform ) return this.updateColor( uniform );\n\t\tif ( uniform.isMatrix3Uniform ) return this.updateMatrix3( uniform );\n\t\tif ( uniform.isMatrix4Uniform ) return this.updateMatrix4( uniform );\n\n\t\tconsole.error( 'THREE.WebGPUUniformsGroup: Unsupported uniform type.', uniform );\n\n\t}\n\n\tupdateNumber( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset ] !== v ) {\n\n\t\t\ta[ offset ] = v;\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector2( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y ) {\n\n\t\t\ta[ offset + 0 ] = v.x;\n\t\t\ta[ offset + 1 ] = v.y;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z ) {\n\n\t\t\ta[ offset + 0 ] = v.x;\n\t\t\ta[ offset + 1 ] = v.y;\n\t\t\ta[ offset + 2 ] = v.z;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateVector4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst v = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== v.x || a[ offset + 1 ] !== v.y || a[ offset + 2 ] !== v.z || a[ offset + 4 ] !== v.w ) {\n\n\t\t\ta[ offset + 0 ] = v.x;\n\t\t\ta[ offset + 1 ] = v.y;\n\t\t\ta[ offset + 2 ] = v.z;\n\t\t\ta[ offset + 3 ] = v.w;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateColor( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst c = uniform.getValue();\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== c.r || a[ offset + 1 ] !== c.g || a[ offset + 2 ] !== c.b ) {\n\n\t\t\ta[ offset + 0 ] = c.r;\n\t\t\ta[ offset + 1 ] = c.g;\n\t\t\ta[ offset + 2 ] = c.b;\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateMatrix3( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( a[ offset + 0 ] !== e[ 0 ] || a[ offset + 1 ] !== e[ 1 ] || a[ offset + 2 ] !== e[ 2 ] ||\n\t\t\ta[ offset + 4 ] !== e[ 3 ] || a[ offset + 5 ] !== e[ 4 ] || a[ offset + 6 ] !== e[ 5 ] ||\n\t\t\ta[ offset + 8 ] !== e[ 6 ] || a[ offset + 9 ] !== e[ 7 ] || a[ offset + 10 ] !== e[ 8 ] ) {\n\n\t\t\ta[ offset + 0 ] = e[ 0 ];\n\t\t\ta[ offset + 1 ] = e[ 1 ];\n\t\t\ta[ offset + 2 ] = e[ 2 ];\n\t\t\ta[ offset + 4 ] = e[ 3 ];\n\t\t\ta[ offset + 5 ] = e[ 4 ];\n\t\t\ta[ offset + 6 ] = e[ 5 ];\n\t\t\ta[ offset + 8 ] = e[ 6 ];\n\t\t\ta[ offset + 9 ] = e[ 7 ];\n\t\t\ta[ offset + 10 ] = e[ 8 ];\n\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n\tupdateMatrix4( uniform ) {\n\n\t\tlet updated = false;\n\n\t\tconst a = this.buffer;\n\t\tconst e = uniform.getValue().elements;\n\t\tconst offset = uniform.offset;\n\n\t\tif ( arraysEqual( a, e, offset ) === false ) {\n\n\t\t\ta.set( e, offset );\n\t\t\tupdated = true;\n\n\t\t}\n\n\t\treturn updated;\n\n\t}\n\n}\n\nfunction arraysEqual( a, b, offset ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\tif ( a[ offset + i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nexport default UniformsGroup;\n", "import UniformsGroup from '../UniformsGroup.js';\n\nlet id = 0;\n\nclass NodeUniformsGroup extends UniformsGroup {\n\n\tconstructor( name, groupNode ) {\n\n\t\tsuper( name );\n\n\t\tthis.id = id ++;\n\t\tthis.groupNode = groupNode;\n\n\t\tthis.isNodeUniformsGroup = true;\n\n\t}\n\n\tget shared() {\n\n\t\treturn this.groupNode.shared;\n\n\t}\n\n\tgetNodes() {\n\n\t\tconst nodes = [];\n\n\t\tfor ( const uniform of this.uniforms ) {\n\n\t\t\tconst node = uniform.nodeUniform.node;\n\n\t\t\tif ( ! node ) throw new Error( 'NodeUniformsGroup: Uniform has no node.' );\n\n\t\t\tnodes.push( node );\n\n\t\t}\n\n\t\treturn nodes;\n\n\t}\n\n}\n\nexport default NodeUniformsGroup;\n", "import Binding from './Binding.js';\n\nlet id = 0;\n\nclass SampledTexture extends Binding {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\tthis.id = id ++;\n\n\t\tthis.texture = texture;\n\t\tthis.version = texture ? texture.version : 0;\n\t\tthis.store = false;\n\n\t\tthis.isSampledTexture = true;\n\n\t}\n\n\tget needsBindingsUpdate() {\n\n\t\tconst { texture, version } = this;\n\n\t\treturn texture.isVideoTexture ? true : version !== texture.version; // @TODO: version === 0 && texture.version > 0 ( add it just to External Textures like PNG,JPG )\n\n\t}\n\n\tupdate() {\n\n\t\tconst { texture, version } = this;\n\n\t\tif ( version !== texture.version ) {\n\n\t\t\tthis.version = texture.version;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n\nclass SampledArrayTexture extends SampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampledArrayTexture = true;\n\n\t}\n\n}\n\nclass Sampled3DTexture extends SampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampled3DTexture = true;\n\n\t}\n\n}\n\nclass SampledCubeTexture extends SampledTexture {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name, texture );\n\n\t\tthis.isSampledCubeTexture = true;\n\n\t}\n\n}\n\nexport { SampledTexture, SampledArrayTexture, Sampled3DTexture, SampledCubeTexture };\n", "import { SampledTexture } from '../SampledTexture.js';\n\nclass NodeSampledTexture extends SampledTexture {\n\n\tconstructor( name, textureNode ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\tthis.textureNode = textureNode;\n\n\t}\n\n\tget needsBindingsUpdate() {\n\n\t\treturn this.textureNode.value !== this.texture || super.needsBindingsUpdate;\n\n\t}\n\n\tupdate() {\n\n\t\tconst { textureNode } = this;\n\n\t\tif ( this.texture !== textureNode.value ) {\n\n\t\t\tthis.texture = textureNode.value;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn super.update();\n\n\t}\n\n}\n\nclass NodeSampledCubeTexture extends NodeSampledTexture {\n\n\tconstructor( name, textureNode ) {\n\n\t\tsuper( name, textureNode );\n\n\t\tthis.isSampledCubeTexture = true;\n\n\t}\n\n}\n\nexport { NodeSampledTexture, NodeSampledCubeTexture };\n", "import { MathNode, GLSLNodeParser, NodeBuilder, NodeMaterial } from '../../../nodes/Nodes.js';\n\nimport UniformBuffer from '../../common/UniformBuffer.js';\nimport NodeUniformsGroup from '../../common/nodes/NodeUniformsGroup.js';\n\nimport { NodeSampledTexture, NodeSampledCubeTexture } from '../../common/nodes/NodeSampledTexture.js';\n\nimport { IntType } from 'three';\n\nconst glslMethods = {\n\t[ MathNode.ATAN2 ]: 'atan',\n\ttextureDimensions: 'textureSize'\n};\n\nconst precisionLib = {\n\tlow: 'lowp',\n\tmedium: 'mediump',\n\thigh: 'highp'\n};\n\nconst supports = {\n\tinstance: true\n};\n\nconst defaultPrecisions = `\nprecision highp float;\nprecision highp int;\nprecision mediump sampler2DArray;\nprecision lowp sampler2DShadow;\n`;\n\nclass GLSLNodeBuilder extends NodeBuilder {\n\n\tconstructor( object, renderer, scene = null ) {\n\n\t\tsuper( object, renderer, new GLSLNodeParser(), scene );\n\n\t\tthis.uniformGroups = {};\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\treturn glslMethods[ method ] || method;\n\n\t}\n\n\tgetPropertyName( node, shaderStage ) {\n\n\t\tif ( node.isOutputStructVar ) return '';\n\n\t\treturn super.getPropertyName( node, shaderStage );\n\n\t}\n\n\tbuildFunctionCode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\t\tconst flowData = this.flowShaderNode( shaderNode );\n\n\t\tconst parameters = [];\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tparameters.push( this.getType( input.type ) + ' ' + input.name );\n\n\t\t}\n\n\t\t//\n\n\t\tconst code = `${ this.getType( layout.type ) } ${ layout.name }( ${ parameters.join( ', ' ) } ) {\n\n\t${ flowData.vars }\n\n${ flowData.code }\n\treturn ${ flowData.result };\n\n}`;\n\n\t\t//\n\n\t\treturn code;\n\n\t}\n\n\tgenerateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0' ) {\n\n\t\tif ( depthSnippet ) {\n\n\t\t\treturn `texelFetch( ${ textureProperty }, ivec3( ${ uvIndexSnippet }, ${ depthSnippet } ), ${ levelSnippet } )`;\n\n\t\t} else {\n\n\t\t\treturn `texelFetch( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;\n\n\t\t}\n\n\t}\n\n\tgenerateTexture( texture, textureProperty, uvSnippet, depthSnippet ) {\n\n\t\tif ( texture.isTextureCube ) {\n\n\t\t\treturn `textureCube( ${ textureProperty }, ${ uvSnippet } )`;\n\n\t\t} else if ( texture.isDepthTexture ) {\n\n\t\t\treturn `texture( ${ textureProperty }, ${ uvSnippet } ).x`;\n\n\t\t} else {\n\n\t\t\tif ( depthSnippet ) uvSnippet = `vec3( ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\treturn `texture( ${ textureProperty }, ${ uvSnippet } )`;\n\n\t\t}\n\n\t}\n\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet ) {\n\n\t\treturn `textureLod( ${ textureProperty }, ${ uvSnippet }, ${ levelSnippet } )`;\n\n\t}\n\n\tgenerateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `texture( ${ textureProperty }, vec3( ${ uvSnippet }, ${ compareSnippet } ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tif ( variable.isOutputStructVar ) continue;\n\n\t\t\t\tsnippets.push( `${ this.getVar( variable.type, variable.name ) };` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\t' );\n\n\t}\n\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst uniformGroups = {};\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tlet snippet = null;\n\t\t\tlet group = false;\n\n\t\t\tif ( uniform.type === 'texture' ) {\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tif ( texture.compareFunction ) {\n\n\t\t\t\t\tsnippet = `sampler2DShadow ${ uniform.name };`;\n\n\t\t\t\t} else if ( texture.isDataArrayTexture === true ) {\n\n\t\t\t\t\tsnippet = `sampler2DArray ${ uniform.name };`;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = `sampler2D ${ uniform.name };`;\n\n\t\t\t\t}\n\n\t\t\t} else if ( uniform.type === 'cubeTexture' ) {\n\n\t\t\t\tsnippet = `samplerCube ${ uniform.name };`;\n\n\t\t\t} else if ( uniform.type === 'buffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.bufferType );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 ? bufferCount : '';\n\t\t\t\tsnippet = `${bufferNode.name} {\\n\\t${ bufferType } ${ uniform.name }[${ bufferCountSnippet }];\\n};\\n`;\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getVectorType( uniform.type );\n\n\t\t\t\tsnippet = `${vectorType} ${uniform.name};`;\n\n\t\t\t\tgroup = true;\n\n\t\t\t}\n\n\t\t\tconst precision = uniform.node.precision;\n\n\t\t\tif ( precision !== null ) {\n\n\t\t\t\tsnippet = precisionLib[ precision ] + ' ' + snippet;\n\n\t\t\t}\n\n\t\t\tif ( group ) {\n\n\t\t\t\tsnippet = '\\t' + snippet;\n\n\t\t\t\tconst groupName = uniform.groupNode.name;\n\t\t\t\tconst groupSnippets = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = [] );\n\n\t\t\t\tgroupSnippets.push( snippet );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = 'uniform ' + snippet;\n\n\t\t\t\tbindingSnippets.push( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet output = '';\n\n\t\tfor ( const name in uniformGroups ) {\n\n\t\t\tconst groupSnippets = uniformGroups[ name ];\n\n\t\t\toutput += this._getGLSLUniformStruct( shaderStage + '_' + name, groupSnippets.join( '\\n' ) ) + '\\n';\n\n\t\t}\n\n\t\toutput += bindingSnippets.join( '\\n' );\n\n\t\treturn output;\n\n\t}\n\n\tgetTypeFromAttribute( attribute ) {\n\n\t\tlet nodeType = super.getTypeFromAttribute( attribute );\n\n\t\tif ( /^[iu]/.test( nodeType ) && attribute.gpuType !== IntType ) {\n\n\t\t\tlet dataAttribute = attribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) dataAttribute = attribute.data;\n\n\t\t\tconst array = dataAttribute.array;\n\n\t\t\tif ( ( array instanceof Uint32Array || array instanceof Int32Array ) === false ) {\n\n\t\t\t\tnodeType = nodeType.slice( 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn nodeType;\n\n\t}\n\n\tgetAttributes( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tconst attributes = this.getAttributesArray();\n\n\t\t\tlet location = 0;\n\n\t\t\tfor ( const attribute of attributes ) {\n\n\t\t\t\tsnippet += `layout( location = ${ location ++ } ) in ${ attribute.type } ${ attribute.name };\\n`;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetStructMembers( struct ) {\n\n\t\tconst snippets = [];\n\t\tconst members = struct.getMemberTypes();\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\tconst member = members[ i ];\n\t\t\tsnippets.push( `layout( location = ${i} ) out ${ member} m${i};` );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n' );\n\n\t}\n\n\tgetStructs( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst structs = this.structs[ shaderStage ];\n\n\t\tif ( structs.length === 0 ) {\n\n\t\t\treturn 'layout( location = 0 ) out vec4 fragColor;\\n';\n\n\t\t}\n\n\t\tfor ( let index = 0, length = structs.length; index < length; index ++ ) {\n\n\t\t\tconst struct = structs[ index ];\n\n\t\t\tlet snippet = '\\n';\n\t\t\tsnippet += this.getStructMembers( struct );\n\t\t\tsnippet += '\\n';\n\n\t\t\tsnippets.push( snippet );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\n' );\n\n\t}\n\n\tgetVaryings( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst varyings = this.varyings;\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tconst type = varying.type;\n\t\t\t\tconst flat = type === 'int' || type === 'uint' ? 'flat ' : '';\n\n\t\t\t\tsnippet += `${flat}${varying.needsInterpolation ? 'out' : '/*out*/'} ${type} ${varying.name};\\n`;\n\n\t\t\t}\n\n\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\tfor ( const varying of varyings ) {\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tconst type = varying.type;\n\t\t\t\t\tconst flat = type === 'int' || type === 'uint' ? 'flat ' : '';\n\n\t\t\t\t\tsnippet += `${flat}in ${type} ${varying.name};\\n`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetVertexIndex() {\n\n\t\treturn 'uint( gl_VertexID )';\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\treturn 'uint( gl_InstanceID )';\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\treturn 'gl_FrontFacing';\n\n\t}\n\n\tgetFragCoord() {\n\n\t\treturn 'gl_FragCoord';\n\n\t}\n\n\tgetFragDepth() {\n\n\t\treturn 'gl_FragDepth';\n\n\t}\n\n\tisAvailable( name ) {\n\n\t\treturn supports[ name ] === true;\n\n\t}\n\n\n\tisFlipY() {\n\n\t\treturn true;\n\n\t}\n\n\t_getGLSLUniformStruct( name, vars ) {\n\n\t\treturn `\nlayout( std140 ) uniform ${name} {\n${vars}\n};`;\n\n\t}\n\n\t_getGLSLVertexCode( shaderData ) {\n\n\t\treturn `#version 300 es\n\n${ this.getSignature() }\n\n// precision\n${ defaultPrecisions }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// attributes\n${shaderData.attributes}\n\n// codes\n${shaderData.codes}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`;\n\n\t}\n\n\t_getGLSLFragmentCode( shaderData ) {\n\n\t\treturn `#version 300 es\n\n${ this.getSignature() }\n\n// precision\n${ defaultPrecisions }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\n\n// codes\n${shaderData.codes}\n\n${shaderData.structs}\n\nvoid main() {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n\\t`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += 'gl_Position = ';\n\t\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tif ( ! node.outputNode.isOutputStructNode ) {\n\n\t\t\t\t\t\t\tflow += 'fragColor = ';\n\t\t\t\t\t\t\tflow += `${ flowSlotData.result };`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.structs = this.getStructs( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\t\t\tstageData.flow = flow;\n\n\t\t}\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getGLSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getGLSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'GLSLNodeBuilder: compute shaders are not supported.' );\n\t\t\t//this.computeShader = this._getGLSLComputeCode( shadersData.compute );\n\n\t\t}\n\n\t}\n\n\tgetUniformFromNode( node, type, shaderStage, name = null ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, type, shaderStage, name );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tlet uniformGPU = nodeData.uniformGPU;\n\n\t\tif ( uniformGPU === undefined ) {\n\n\t\t\tif ( type === 'texture' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledTexture( uniformNode.name, uniformNode.node );\n\n\t\t\t\tthis.bindings[ shaderStage ].push( uniformGPU );\n\n\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\tuniformGPU = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node );\n\n\t\t\t\tthis.bindings[ shaderStage ].push( uniformGPU );\n\n\t\t\t} else if ( type === 'buffer' ) {\n\n\t\t\t\tnode.name = `NodeBuffer_${node.id}`;\n\n\t\t\t\tconst buffer = new UniformBuffer( node.name, node.value );\n\n\t\t\t\tuniformNode.name = `buffer${node.id}`;\n\n\t\t\t\tthis.bindings[ shaderStage ].push( buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t} else {\n\n\t\t\t\tconst group = node.groupNode;\n\t\t\t\tconst groupName = group.name;\n\n\t\t\t\tconst uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );\n\n\t\t\t\tlet uniformsGroup = uniformsStage[ groupName ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new NodeUniformsGroup( shaderStage + '_' + groupName, group );\n\t\t\t\t\t//uniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tuniformsStage[ groupName ] = uniformsGroup;\n\n\t\t\t\t\tthis.bindings[ shaderStage ].push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tuniformGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n\tbuild() {\n\n\t\t// @TODO: Move this code to super.build()\n\n\t\tconst { object, material } = this;\n\n\t\tif ( material !== null ) {\n\n\t\t\tNodeMaterial.fromMaterial( material ).build( this );\n\n\t\t} else {\n\n\t\t\tthis.addFlow( 'compute', object );\n\n\t\t}\n\n\t\treturn super.build();\n\n\t}\n\n}\n\nexport default GLSLNodeBuilder;\n", "let vector2 = null;\nlet vector4 = null;\nlet color4 = null;\n\nimport Color4 from './Color4.js';\nimport { Vector2, Vector4, REVISION, createCanvasElement } from 'three';\n\nclass Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tthis.parameters = Object.assign( {}, parameters );\n\t\tthis.data = new WeakMap();\n\t\tthis.renderer = null;\n\t\tthis.domElement = null;\n\n\t}\n\n\tasync init( renderer ) {\n\n\t\tthis.renderer = renderer;\n\n\t}\n\n\t// render context\n\n\tbegin( renderContext ) { }\n\n\tfinish( renderContext ) { }\n\n\t// render object\n\n\tdraw( renderObject, info ) { }\n\n\t// program\n\n\tcreateProgram( program ) { }\n\n\tdestroyProgram( program ) { }\n\n\t// bindings\n\n\tcreateBindings( renderObject ) { }\n\n\tupdateBindings( renderObject ) { }\n\n\t// pipeline\n\n\tcreateRenderPipeline( renderObject ) { }\n\n\tcreateComputePipeline( computeNode, pipeline ) { }\n\n\tdestroyPipeline( pipeline ) { }\n\n\t// cache key\n\n\tneedsRenderUpdate( renderObject ) { } // return Boolean ( fast test )\n\n\tgetRenderCacheKey( renderObject ) { } // return String\n\n\t// node builder\n\n\tcreateNodeBuilder( renderObject ) { } // return NodeBuilder (ADD IT)\n\n\t// textures\n\n\tcreateSampler( texture ) { }\n\n\tcreateDefaultTexture( texture ) { }\n\n\tcreateTexture( texture ) { }\n\n\tcopyTextureToBuffer( texture, x, y, width, height ) {}\n\n\t// attributes\n\n\tcreateAttribute( attribute ) { }\n\n\tcreateIndexAttribute( attribute ) { }\n\n\tupdateAttribute( attribute ) { }\n\n\tdestroyAttribute( attribute ) { }\n\n\t// canvas\n\n\tupdateSize() { }\n\n\t// utils\n\n\thasFeature( name ) { } // return Boolean\n\n\tgetInstanceCount( renderObject ) {\n\n\t\tconst { object, geometry } = renderObject;\n\n\t\treturn geometry.isInstancedBufferGeometry ? geometry.instanceCount : ( object.isInstancedMesh ? object.count : 1 );\n\n\t}\n\n\tgetDrawingBufferSize() {\n\n\t\tvector2 = vector2 || new Vector2();\n\n\t\treturn this.renderer.getDrawingBufferSize( vector2 );\n\n\t}\n\n\tgetScissor() {\n\n\t\tvector4 = vector4 || new Vector4();\n\n\t\treturn this.renderer.getScissor( vector4 );\n\n\t}\n\n\tgetClearColor() {\n\n\t\tconst renderer = this.renderer;\n\n\t\tcolor4 = color4 || new Color4();\n\n\t\trenderer.getClearColor( color4 );\n\n\t\tcolor4.getRGB( color4, this.renderer.currentColorSpace );\n\n\t\treturn color4;\n\n\t}\n\n\tgetDomElement() {\n\n\t\tlet domElement = this.domElement;\n\n\t\tif ( domElement === null ) {\n\n\t\t\tdomElement = ( this.parameters.canvas !== undefined ) ? this.parameters.canvas : createCanvasElement();\n\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\t\tif ( 'setAttribute' in domElement ) domElement.setAttribute( 'data-engine', `three.js r${REVISION} webgpu` );\n\n\t\t\tthis.domElement = domElement;\n\n\t\t}\n\n\t\treturn domElement;\n\n\t}\n\n\t// resource properties\n\n\tset( object, value ) {\n\n\t\tthis.data.set( object, value );\n\n\t}\n\n\tget( object ) {\n\n\t\tlet map = this.data.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tthis.data.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tdelete( object ) {\n\n\t\tthis.data.delete( object );\n\n\t}\n\n}\n\nexport default Backend;\n", "import { IntType } from 'three';\n\nclass WebGLAttributeUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateAttribute( attribute, bufferType ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage || gl.STATIC_DRAW;\n\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\n\t\tlet bufferGPU = bufferData.bufferGPU;\n\n\t\tif ( bufferGPU === undefined ) {\n\n\t\t\tbufferGPU = gl.createBuffer();\n\n\t\t\tgl.bindBuffer( bufferType, bufferGPU );\n\t\t\tgl.bufferData( bufferType, array, usage );\n\t\t\tgl.bindBuffer( bufferType, null );\n\n\t\t\tbufferData.bufferGPU = bufferGPU;\n\t\t\tbufferData.bufferType = bufferType;\n\t\t\tbufferData.version = bufferAttribute.version;\n\n\t\t}\n\n\t\t//attribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\ttype = gl.HALF_FLOAT;\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLBackend: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\tbackend.set( attribute, {\n\t\t\tbufferGPU,\n\t\t\ttype,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version,\n\t\t\tisInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute.gpuType === IntType\n\t\t} );\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst array = attribute.array;\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\t\tconst bufferType = bufferData.bufferType;\n\t\tconst updateRanges = attribute.isInterleavedBufferAttribute ? attribute.data.updateRanges : attribute.updateRanges;\n\n\t\tgl.bindBuffer( bufferType, bufferData.bufferGPU );\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\t\t\t\tgl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, range.start, range.count );\n\n\t\t\t}\n\n\t\t\tbufferAttribute.clearUpdateRanges();\n\n\t\t}\n\n\t\tgl.bindBuffer( bufferType, null );\n\n\t\tbufferData.version = bufferAttribute.version;\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { gl } = backend;\n\n\t\tconst bufferAttribute = attribute.isInterleavedBufferAttribute ? attribute.data : attribute;\n\t\tconst { bufferGPU } = backend.get( bufferAttribute );\n\n\t\tconst array = attribute.array;\n\t\tconst byteLength = array.byteLength;\n\n\t\tgl.bindBuffer( gl.COPY_READ_BUFFER, bufferGPU );\n\n\t\tconst writeBuffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.COPY_WRITE_BUFFER, writeBuffer );\n\t\tgl.bufferData( gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ );\n\n\t\tgl.copyBufferSubData( gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new attribute.array.constructor( array.length );\n\n\t\tgl.getBufferSubData( gl.COPY_WRITE_BUFFER, 0, dstBuffer );\n\n\t\tgl.deleteBuffer( writeBuffer );\n\n\t\treturn dstBuffer.buffer;\n\n\t}\n\n}\n\nexport default WebGLAttributeUtils;\n", "import {\n\tCullFaceNone, CullFaceBack, CullFaceFront, DoubleSide, BackSide,\n\tNormalBlending, NoBlending, CustomBlending, AddEquation,\n\tAdditiveBlending, SubtractiveBlending, MultiplyBlending, SubtractEquation, ReverseSubtractEquation,\n\tZeroFactor, OneFactor, SrcColorFactor, SrcAlphaFactor, SrcAlphaSaturateFactor, DstColorFactor, DstAlphaFactor,\n\tOneMinusSrcColorFactor, OneMinusSrcAlphaFactor, OneMinusDstColorFactor, OneMinusDstAlphaFactor,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth\n} from 'three';\n\nlet initialized = false, equationToGL, factorToGL;\n\nclass WebGLState {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = this.backend.gl;\n\n\t\tthis.enabled = {};\n\t\tthis.currentFlipSided = null;\n\t\tthis.currentCullFace = null;\n\t\tthis.currentProgram = null;\n\t\tthis.currentBlendingEnabled = false;\n\t\tthis.currentBlending = null;\n\t\tthis.currentBlendSrc = null;\n\t\tthis.currentBlendDst = null;\n\t\tthis.currentBlendSrcAlpha = null;\n\t\tthis.currentBlendDstAlpha = null;\n\t\tthis.currentPremultipledAlpha = null;\n\t\tthis.currentPolygonOffsetFactor = null;\n\t\tthis.currentPolygonOffsetUnits = null;\n\t\tthis.currentColorMask = null;\n\t\tthis.currentDepthFunc = null;\n\t\tthis.currentDepthMask = null;\n\t\tthis.currentStencilFunc = null;\n\t\tthis.currentStencilRef = null;\n\t\tthis.currentStencilFuncMask = null;\n\t\tthis.currentStencilFail = null;\n\t\tthis.currentStencilZFail = null;\n\t\tthis.currentStencilZPass = null;\n\t\tthis.currentStencilMask = null;\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init( this.gl );\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t_init( gl ) {\n\n\t\t// Store only WebGL constants here.\n\n\t\tequationToGL = {\n\t\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t\t};\n\n\t\tfactorToGL = {\n\t\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t\t[ OneFactor ]: gl.ONE,\n\t\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA\n\t\t};\n\n\t}\n\n\tenable( id ) {\n\n\t\tconst { enabled } = this;\n\n\t\tif ( enabled[ id ] !== true ) {\n\n\t\t\tthis.gl.enable( id );\n\t\t\tenabled[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tdisable( id ) {\n\n\t\tconst { enabled } = this;\n\n\t\tif ( enabled[ id ] !== false ) {\n\n\t\t\tthis.gl.disable( id );\n\t\t\tenabled[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tsetFlipSided( flipSided ) {\n\n\t\tif ( this.currentFlipSided !== flipSided ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tthis.currentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tsetCullFace( cullFace ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tthis.enable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== this.currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tthis.currentCullFace = cullFace;\n\n\t}\n\n\tsetBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( this.currentBlendingEnabled === true ) {\n\n\t\t\t\tthis.disable( gl.BLEND );\n\t\t\t\tthis.currentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.currentBlendingEnabled === false ) {\n\n\t\t\tthis.enable( gl.BLEND );\n\t\t\tthis.currentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha ) {\n\n\t\t\t\tif ( this.currentBlendEquation !== AddEquation || this.currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tthis.currentBlendEquation = AddEquation;\n\t\t\t\t\tthis.currentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tthis.currentBlendSrc = null;\n\t\t\t\tthis.currentBlendDst = null;\n\t\t\t\tthis.currentBlendSrcAlpha = null;\n\t\t\t\tthis.currentBlendDstAlpha = null;\n\n\t\t\t\tthis.currentBlending = blending;\n\t\t\t\tthis.currentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tthis.currentBlendEquation = blendEquation;\n\t\t\tthis.currentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tthis.currentBlendSrc = blendSrc;\n\t\t\tthis.currentBlendDst = blendDst;\n\t\t\tthis.currentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tthis.currentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tthis.currentBlending = blending;\n\t\tthis.currentPremultipledAlpha = false;\n\n\t}\n\n\tsetColorMask( colorMask ) {\n\n\t\tif ( this.currentColorMask !== colorMask ) {\n\n\t\t\tthis.gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\tthis.currentColorMask = colorMask;\n\n\t\t}\n\n\t}\n\n\tsetDepthTest( depthTest ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( depthTest ) {\n\n\t\t\tthis.enable( gl.DEPTH_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.DEPTH_TEST );\n\n\t\t}\n\n\t}\n\n\tsetDepthMask( depthMask ) {\n\n\t\tif ( this.currentDepthMask !== depthMask ) {\n\n\t\t\tthis.gl.depthMask( depthMask );\n\t\t\tthis.currentDepthMask = depthMask;\n\n\t\t}\n\n\t}\n\n\tsetDepthFunc( depthFunc ) {\n\n\t\tif ( this.currentDepthFunc !== depthFunc ) {\n\n\t\t\tconst { gl } = this;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t}\n\n\t\t\tthis.currentDepthFunc = depthFunc;\n\n\t\t}\n\n\t}\n\n\tsetStencilTest( stencilTest ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( stencilTest ) {\n\n\t\t\tthis.enable( gl.STENCIL_TEST );\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.STENCIL_TEST );\n\n\t\t}\n\n\t}\n\n\tsetStencilMask( stencilMask ) {\n\n\t\tif ( this.currentStencilMask !== stencilMask ) {\n\n\t\t\tthis.gl.stencilMask( stencilMask );\n\t\t\tthis.currentStencilMask = stencilMask;\n\n\t\t}\n\n\t}\n\n\tsetStencilFunc( stencilFunc, stencilRef, stencilMask ) {\n\n\t\tif ( this.currentStencilFunc !== stencilFunc ||\n\t\t\t this.currentStencilRef !== stencilRef ||\n\t\t\t this.currentStencilFuncMask !== stencilMask ) {\n\n\t\t\tthis.gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\tthis.currentStencilFunc = stencilFunc;\n\t\t\tthis.currentStencilRef = stencilRef;\n\t\t\tthis.currentStencilFuncMask = stencilMask;\n\n\t\t}\n\n\t}\n\n\tsetStencilOp( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\tif ( this.currentStencilFail !== stencilFail ||\n\t\t\t this.currentStencilZFail !== stencilZFail ||\n\t\t\t this.currentStencilZPass !== stencilZPass ) {\n\n\t\t\tthis.gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\tthis.currentStencilFail = stencilFail;\n\t\t\tthis.currentStencilZFail = stencilZFail;\n\t\t\tthis.currentStencilZPass = stencilZPass;\n\n\t\t}\n\n\t}\n\n\tsetMaterial( material, frontFaceCW ) {\n\n\t\tconst { gl } = this;\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? this.disable( gl.CULL_FACE )\n\t\t\t: this.enable( gl.CULL_FACE );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tthis.setFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? this.setBlending( NoBlending )\n\t\t\t: this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tthis.setDepthFunc( material.depthFunc );\n\t\tthis.setDepthTest( material.depthTest );\n\t\tthis.setDepthMask( material.depthWrite );\n\t\tthis.setColorMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tthis.setStencilTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tthis.setStencilMask( material.stencilWriteMask );\n\t\t\tthis.setStencilFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tthis.setStencilOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tthis.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? this.enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\n\t\t\t: this.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t}\n\n\tsetPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tthis.currentPolygonOffsetFactor = factor;\n\t\t\t\tthis.currentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tuseProgram( program ) {\n\n\t\tif ( this.currentProgram !== program ) {\n\n\t\t\tthis.gl.useProgram( program );\n\n\t\t\tthis.currentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\n}\n\nexport default WebGLState;\n", "import { RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT1_Format, RGB_S3TC_DXT1_Format, DepthFormat, DepthStencilFormat, LuminanceAlphaFormat, LuminanceFormat, RedFormat, RGBAFormat, AlphaFormat, RedIntegerFormat, RGFormat, RGIntegerFormat, RGBAIntegerFormat, HalfFloatType, FloatType, UnsignedIntType, IntType, UnsignedShortType, ShortType, ByteType, UnsignedInt248Type, UnsignedShort5551Type, UnsignedShort4444Type, UnsignedByteType, RGBA_BPTC_Format, _SRGBAFormat, RED_RGTC1_Format, SIGNED_RED_RGTC1_Format, RED_GREEN_RGTC2_Format, SIGNED_RED_GREEN_RGTC2_Format, SRGBColorSpace, NoColorSpace } from 'three';\n\nclass WebGLUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = this.backend.gl;\n\t\tthis.extensions = backend.extensions;\n\n\t}\n\n\tconvert( p, colorSpace = NoColorSpace ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\treturn gl.HALF_FLOAT;\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return gl.RED;\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\n\t\tif ( p === RGFormat ) return gl.RG;\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( colorSpace === SRGBColorSpace ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC1\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC2\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( colorSpace === SRGBColorSpace ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\treturn gl.UNSIGNED_INT_24_8;\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\t_clientWaitAsync() {\n\n\t\tconst { gl } = this;\n\n\t\tconst sync = gl.fenceSync( gl.SYNC_GPU_COMMANDS_COMPLETE, 0 );\n\n\t\tgl.flush();\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tfunction test() {\n\n\t\t\t\tconst res = gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 );\n\n\t\t\t\tif ( res === gl.WAIT_FAILED) {\n\n\t\t\t\t\tgl.deleteSync( sync );\n\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( res === gl.TIMEOUT_EXPIRED) {\n\n\t\t\t\t\trequestAnimationFrame( test );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tgl.deleteSync( sync );\n\n\t\t\t\tresolve();\n\n\t\t\t}\n\n\t\t\ttest();\n\n\t\t} );\n\n\t}\n\n}\n\nexport default WebGLUtils;\n", "import { LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, FloatType, MirroredRepeatWrapping, ClampToEdgeWrapping, RepeatWrapping, SRGBColorSpace, NeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare } from 'three';\n\nlet initialized = false, wrappingToGL, filterToGL, compareToGL;\n\nclass WebGLTextureUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = backend.gl;\n\t\tthis.extensions = backend.extensions;\n\n\t\tif ( initialized === false ) {\n\n\t\t\tthis._init( this.gl );\n\n\t\t\tinitialized = true;\n\n\t\t}\n\n\t}\n\n\t_init( gl ) {\n\n\t\t// Store only WebGL constants here.\n\n\t\twrappingToGL = {\n\t\t\t[ RepeatWrapping ]: gl.REPEAT,\n\t\t\t[ ClampToEdgeWrapping ]: gl.CLAMP_TO_EDGE,\n\t\t\t[ MirroredRepeatWrapping ]: gl.MIRRORED_REPEAT\n\t\t};\n\n\t\tfilterToGL = {\n\t\t\t[ NearestFilter ]: gl.NEAREST,\n\t\t\t[ NearestMipmapNearestFilter ]: gl.NEAREST_MIPMAP_NEAREST,\n\t\t\t[ NearestMipmapLinearFilter ]: gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t\t[ LinearFilter ]: gl.LINEAR,\n\t\t\t[ LinearMipmapNearestFilter ]: gl.LINEAR_MIPMAP_NEAREST,\n\t\t\t[ LinearMipmapLinearFilter ]: gl.LINEAR_MIPMAP_LINEAR\n\t\t};\n\n\t\tcompareToGL = {\n\t\t\t[ NeverCompare ]: gl.NEVER,\n\t\t\t[ AlwaysCompare ]: gl.ALWAYS,\n\t\t\t[ LessCompare ]: gl.LESS,\n\t\t\t[ LessEqualCompare ]: gl.LEQUAL,\n\t\t\t[ EqualCompare ]: gl.EQUAL,\n\t\t\t[ GreaterEqualCompare ]: gl.GEQUAL,\n\t\t\t[ GreaterCompare ]: gl.GREATER,\n\t\t\t[ NotEqualCompare ]: gl.NOTEQUAL\n\t\t};\n\n\t}\n\n\tfilterFallback( f ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn gl.NEAREST;\n\n\t\t}\n\n\t\treturn gl.LINEAR;\n\n\t}\n\n\tgetGLTextureType( texture ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet glTextureType;\n\n\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_CUBE_MAP;\n\n\t\t} else if ( texture.isDataArrayTexture === true ) {\n\n\t\t\tglTextureType = gl.TEXTURE_2D_ARRAY;\n\n\t\t} else {\n\n\t\t\tglTextureType = gl.TEXTURE_2D;\n\n\n\t\t}\n\n\t\treturn glTextureType;\n\n\t}\n\n\tgetInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( gl[ internalFormatName ] !== undefined ) return gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === gl.RED ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.R32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.R16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.R8UI;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT ) internalFormat = gl.R16UI;\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.R32UI;\n\t\t\tif ( glType === gl.BYTE ) internalFormat = gl.R8I;\n\t\t\tif ( glType === gl.SHORT ) internalFormat = gl.R16I;\n\t\t\tif ( glType === gl.INT ) internalFormat = gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RG ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RG32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RG16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === gl.RGBA ) {\n\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.RGBA32F;\n\t\t\tif ( glType === gl.HALF_FLOAT ) internalFormat = gl.RGBA16F;\n\t\t\tif ( glType === gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? gl.SRGB8_ALPHA8 : gl.RGBA8;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = gl.RGBA4;\n\t\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_COMPONENT ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT ) internalFormat = gl.DEPTH24_STENCIL8;\n\t\t\tif ( glType === gl.FLOAT ) internalFormat = gl.DEPTH_COMPONENT32F;\n\n\t\t}\n\n\t\tif ( glFormat === gl.DEPTH_STENCIL ) {\n\n\t\t\tif ( glType === gl.UNSIGNED_INT_24_8 ) internalFormat = gl.DEPTH24_STENCIL8;\n\n\t\t}\n\n\t\tif ( internalFormat === gl.R16F || internalFormat === gl.R32F ||\n\t\t\tinternalFormat === gl.RG16F || internalFormat === gl.RG32F ||\n\t\t\tinternalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tsetTextureParameters( textureType, texture ) {\n\n\t\tconst { gl, extensions } = this;\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\tif ( textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t}\n\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\tgl.texParameteri( textureType, gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE );\n\t\t\tgl.texParameteri( textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\t//extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\tif ( texture.anisotropy > 1 /*|| properties.get( texture ).__currentAnisotropy*/ ) {\n\n\t\t\t\t//gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\t//properties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tasync copyTextureToBuffer( texture, x, y, width, height ) {\n\n\t\tconst { backend, gl } = this;\n\n\t\tconst { textureGPU, glFormat, glType } = this.backend.get( texture );\n\n\t\tconst fb = gl.createFramebuffer();\n\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, fb );\n\t\tgl.framebufferTexture2D( gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureGPU, 0 );\n\n\t\tconst typedArrayType = this._getTypedArrayType( glType );\n\t\tconst bytesPerTexel = this._getBytesPerTexel( glFormat );\n\n\t\tconst elementCount = width * height;\n\t\tconst byteLength = elementCount * bytesPerTexel;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.bufferData( gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ );\n\t\tgl.readPixels( x, y, width, height, glFormat, glType, 0 );\n\t\tgl.bindBuffer( gl.PIXEL_PACK_BUFFER, null );\n\n\t\tawait backend.utils._clientWaitAsync();\n\n\t\tconst dstBuffer = new typedArrayType( elementCount );\n\n\t\tgl.bindBuffer(  gl.PIXEL_PACK_BUFFER, buffer );\n\t\tgl.getBufferSubData( gl.PIXEL_PACK_BUFFER, 0, dstBuffer );\n\t\tgl.bindBuffer(  gl.PIXEL_PACK_BUFFER, null );\n\n\t\tgl.deleteFramebuffer( fb );\n\n\t\treturn dstBuffer;\n\n\t}\n\n\t_getTypedArrayType( glType ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( glType === gl.UNSIGNED_BYTE ) return Uint8Array;\n\n\t\tif ( glType === gl.UNSIGNED_SHORT_4_4_4_4 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_5_5_1 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT_5_6_5 ) return Uint16Array;\n\t\tif ( glType === gl.UNSIGNED_SHORT ) return Uint16Array;\n\n\t\tif ( glType === gl.UNSIGNED_INT ) return Uint32Array;\n\n\t\tif ( glType === gl.UNSIGNED_FLOAT ) return Float32Array;\n\n\t}\n\n\t_getBytesPerTexel( glFormat ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( glFormat === gl.RGBA ) return 4;\n\t\tif ( glFormat === gl.RGB ) return 3;\n\t\tif ( glFormat === gl.ALPHA ) return 1;\n\n\t}\n\n}\n\nexport default WebGLTextureUtils;\n", "class WebGLExtensions {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.gl = this.backend.gl;\n\t\tthis.availableExtensions = this.gl.getSupportedExtensions();\n\n\t\tthis.extensions = {};\n\n\t}\n\n\tget( name ) {\n\n\t\tlet extension = this.extensions[ name ];\n\n\t\tif ( extension === undefined ) {\n\n\t\t\textension = this.gl.getExtension( name );\n\n\t\t}\n\n\t\treturn extension;\n\n\t}\n\n\thas( name ) {\n\n\t\treturn this.availableExtensions.includes( name );\n\n\t}\n\n}\n\nexport default WebGLExtensions;\n", "class WebGLCapabilities {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis.maxAnisotropy = null;\n\n\t}\n\n\tgetMaxAnisotropy() {\n\n\t\tif ( this.maxAnisotropy !== null ) return this.maxAnisotropy;\n\n\t\tconst gl = this.backend.gl;\n\t\tconst extensions = this.backend.extensions;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tthis.maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tthis.maxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn this.maxAnisotropy;\n\n\t}\n\n}\n\nexport default WebGLCapabilities;\n", "import { WebGLCoordinateSystem } from 'three';\n\nimport GLSLNodeBuilder from './nodes/GLSLNodeBuilder.js';\nimport Backend from '../common/Backend.js';\n\nimport WebGLAttributeUtils from './utils/WebGLAttributeUtils.js';\nimport WebGLState from './utils/WebGLState.js';\nimport WebGLUtils from './utils/WebGLUtils.js';\nimport WebGLTextureUtils from './utils/WebGLTextureUtils.js';\nimport WebGLExtensions from './utils/WebGLExtensions.js';\nimport WebGLCapabilities from './utils/WebGLCapabilities.js';\n\n//\n\nclass WebGLBackend extends Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isWebGLBackend = true;\n\n\t}\n\n\tasync init( renderer ) {\n\n\t\tawait super.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\tconst glContext = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgl2' );\n\n\t\tthis.gl = glContext;\n\n\t\tthis.extensions = new WebGLExtensions( this );\n\t\tthis.capabilities = new WebGLCapabilities( this );\n\t\tthis.attributeUtils = new WebGLAttributeUtils( this );\n\t\tthis.textureUtils = new WebGLTextureUtils( this );\n\t\tthis.state = new WebGLState( this );\n\t\tthis.utils = new WebGLUtils( this );\n\t\tthis.defaultTextures = {};\n\n\t\tthis.extensions.get( 'EXT_color_buffer_float' );\n\t\tthis._currentContext = null;\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.attributeUtils.getArrayBufferAsync( attribute );\n\n\t}\n\n\tbeginRender( renderContext ) {\n\n\t\tconst { gl } = this;\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t//\n\n\t\trenderContextData.previousContext = this._currentContext;\n\t\tthis._currentContext = renderContext;\n\n\t\tthis._setFramebuffer( renderContext );\n\n\t\tthis.clear( renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext );\n\n\t\t//\n\n\t\tif ( renderContext.viewport ) {\n\n\t\t\tthis.updateViewport( renderContext );\n\n\t\t} else {\n\n\t\t\tgl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t}\n\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\t// Get a reference to the array of objects with queries. The renderContextData property\n\t\t\t// can be changed by another render pass before the async reading of all previous queries complete\n\t\t\trenderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;\n\t\t\trenderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n\t\t\trenderContextData.lastOcclusionObject = null;\n\t\t\trenderContextData.occlusionQueries = new Array( occlusionQueryCount );\n\t\t\trenderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );\n\t\t\trenderContextData.occlusionQueryIndex = 0;\n\n\t\t}\n\n\t}\n\n\tfinishRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\t\tconst previousContext = renderContextData.previousContext;\n\n\t\tthis._currentContext = previousContext;\n\n\t\tif ( previousContext !== null ) {\n\n\t\t\tthis._setFramebuffer( previousContext );\n\n\t\t\tif ( previousContext.viewport ) {\n\n\t\t\t\tthis.updateViewport( previousContext );\n\n\t\t\t} else {\n\n\t\t\t\tconst gl = this.gl;\n\n\t\t\t\tgl.viewport( 0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tconst renderContextData = this.get( renderContext );\n\n\t\t\tif ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {\n\n\t\t\t\tconst { gl } = this;\n\n\t\t\t\tgl.endQuery( gl.ANY_SAMPLES_PASSED );\n\n\t\t\t}\n\n\t\t\tthis.resolveOccludedAsync( renderContext );\n\n\t\t}\n\n\t}\n\n\tresolveOccludedAsync( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t// handle occlusion query results\n\n\t\tconst { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;\n\n\t\tif ( currentOcclusionQueries && currentOcclusionQueryObjects ) {\n\n\t\t\tconst occluded = new WeakSet();\n\t\t\tconst { gl } = this;\n\n\t\t\trenderContextData.currentOcclusionQueryObjects = null;\n\t\t\trenderContextData.currentOcclusionQueries = null;\n\n\t\t\tconst check = () => {\n\n\t\t\t\tlet completed = 0;\n\n\t\t\t\t// check all queries and requeue as appropriate\n\t\t\t\tfor ( let i = 0; i < currentOcclusionQueries.length; i ++ ) {\n\n\t\t\t\t\tconst query = currentOcclusionQueries[ i ];\n\n\t\t\t\t\tif ( query === null ) continue;\n\n\t\t\t\t\tif ( gl.getQueryParameter( query, gl.QUERY_RESULT_AVAILABLE ) ) {\n\n\t\t\t\t\t\tif ( gl.getQueryParameter( query, gl.QUERY_RESULT ) > 0 ) occluded.add( currentOcclusionQueryObjects[ i ] );\n\n\t\t\t\t\t\tcurrentOcclusionQueries[ i ] = null;\n\t\t\t\t\t\tgl.deleteQuery( query );\n\n\t\t\t\t\t\tcompleted ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( completed < currentOcclusionQueries.length ) {\n\n\t\t\t\t\trequestAnimationFrame( check );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderContextData.occluded = occluded;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\tcheck();\n\n\t\t}\n\n\t}\n\n\tisOccluded( renderContext, object ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\treturn renderContextData.occluded && renderContextData.occluded.has( object );\n\n\t}\n\n\tupdateViewport( renderContext ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { x, y, width, height } = renderContext.viewportValue;\n\n\t\tgl.viewport( x, y, width, height );\n\n\t}\n\n\tclear( color, depth, stencil, descriptor = null ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( descriptor === null ) {\n\n\t\t\tdescriptor = {\n\t\t\t\ttextures: null,\n\t\t\t\tclearColorValue: this.getClearColor()\n\t\t\t};\n\n\t\t}\n\n\t\t//\n\n\t\tlet clear = 0;\n\n\t\tif ( color ) clear |= gl.COLOR_BUFFER_BIT;\n\t\tif ( depth ) clear |= gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil ) clear |= gl.STENCIL_BUFFER_BIT;\n\n\t\tif ( clear !== 0 ) {\n\n\t\t\tconst clearColor = descriptor.clearColorValue;\n\n\t\t\tif ( depth ) this.state.setDepthMask( true );\n\n\t\t\tif ( descriptor.textures === null ) {\n\n\t\t\t\tgl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearColor.a );\n\t\t\t\tgl.clear( clear );\n\n\t\t\t} else {\n\n\t\t\t\tif ( color ) {\n\n\t\t\t\t\tfor ( let i = 0; i < descriptor.textures.length; i ++ ) {\n\n\t\t\t\t\t\tgl.clearBufferfv( gl.COLOR, i, [ clearColor.r, clearColor.g, clearColor.b, clearColor.a ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( depth && stencil ) {\n\n\t\t\t\t\tgl.clearBufferfi( gl.DEPTH_STENCIL, 0, 1, 0 );\n\n\t\t\t\t} else if ( depth ) {\n\n\t\t\t\t\tgl.clearBufferfv( gl.DEPTH, 0, [ 1.0 ] );\n\n\t\t\t\t} else if ( stencil ) {\n\n\t\t\t\t\tgl.clearBufferiv( gl.STENCIL, 0, [ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tbeginCompute( /*computeGroup*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcompute( /*computeGroup, computeNode, bindings, pipeline*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tfinishCompute( /*computeGroup*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tdraw( renderObject, info ) {\n\n\t\tconst { pipeline, material, context } = renderObject;\n\t\tconst { programGPU, vaoGPU } = this.get( pipeline );\n\n\t\tconst { gl, state } = this;\n\n\t\tconst contextData = this.get( context );\n\n\t\t//\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst index = bindingData.index;\n\n\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, index, bindingData.bufferGPU );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tgl.activeTexture( gl.TEXTURE0 + index );\n\t\t\t\tgl.bindTexture( bindingData.glTextureType, bindingData.textureGPU );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.setMaterial( material );\n\n\t\tgl.useProgram( programGPU );\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\t//\n\n\t\tconst index = renderObject.getIndex();\n\n\t\tconst object = renderObject.object;\n\t\tconst geometry = renderObject.geometry;\n\t\tconst drawRange = geometry.drawRange;\n\t\tconst firstVertex = drawRange.start;\n\n\t\t//\n\n\t\tconst lastObject = contextData.lastOcclusionObject;\n\n\t\tif ( lastObject !== object && lastObject !== undefined ) {\n\n\t\t\tif ( lastObject !== null && lastObject.occlusionTest === true ) {\n\n\t\t\t\tgl.endQuery( gl.ANY_SAMPLES_PASSED );\n\n\t\t\t\tcontextData.occlusionQueryIndex ++;\n\n\t\t\t}\n\n\t\t\tif ( object.occlusionTest === true ) {\n\n\t\t\t\tconst query = gl.createQuery();\n\n\t\t\t\tgl.beginQuery( gl.ANY_SAMPLES_PASSED, query );\n\n\t\t\t\tcontextData.occlusionQueries[ contextData.occlusionQueryIndex ] = query;\n\t\t\t\tcontextData.occlusionQueryObjects[ contextData.occlusionQueryIndex ] = object;\n\n\t\t\t}\n\n\t\t\tcontextData.lastOcclusionObject = object;\n\n\t\t}\n\n\t\t//\n\n\t\tlet mode;\n\t\tif ( object.isPoints ) mode = gl.POINTS;\n\t\telse if ( object.isLineSegments ) mode = gl.LINES;\n\t\telse if ( object.isLine ) mode = gl.LINE_STRIP;\n\t\telse if ( object.isLineLoop ) mode = gl.LINE_LOOP;\n\t\telse mode = gl.TRIANGLES;\n\n\t\t//\n\n\t\tconst instanceCount = this.getInstanceCount( renderObject );\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst indexData = this.get( index );\n\t\t\tconst indexCount = ( drawRange.count !== Infinity ) ? drawRange.count : index.count;\n\n\t\t\tif ( instanceCount > 1 ) {\n\n\t\t\t\tgl.drawElementsInstanced( mode, index.count, indexData.type, firstVertex, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\tgl.drawElements( mode, index.count, indexData.type, firstVertex );\n\n\t\t\t}\n\n\n\t\t\tinfo.update( object, indexCount, 1 );\n\n\t\t} else {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst vertexCount = ( drawRange.count !== Infinity ) ? drawRange.count : positionAttribute.count;\n\n\t\t\tif ( instanceCount > 1 ) {\n\n\t\t\t\tgl.drawArraysInstanced( mode, 0, vertexCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\tgl.drawArrays( mode, 0, vertexCount );\n\n\t\t\t}\n\n\t\t\t//gl.drawArrays( mode, vertexCount, gl.UNSIGNED_SHORT, firstVertex );\n\n\t\t\tinfo.update( object, vertexCount, 1 );\n\n\t\t}\n\n\n\n\t\t//\n\n\t\tgl.bindVertexArray( null );\n\n\t}\n\n\tneedsRenderUpdate( renderObject ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetRenderCacheKey( renderObject ) {\n\n\t\treturn renderObject.id;\n\n\t}\n\n\t// textures\n\n\tcreateSampler( /*texture*/ ) {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tconst { gl, textureUtils, defaultTextures } = this;\n\n\t\tconst glTextureType = textureUtils.getGLTextureType( texture );\n\n\t\tlet textureGPU = defaultTextures[ glTextureType ];\n\n\t\tif ( textureGPU === undefined ) {\n\n\t\t\ttextureGPU = gl.createTexture();\n\n\t\t\tgl.bindTexture( glTextureType, textureGPU );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\t\tgl.texParameteri( glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\t\t//gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\tdefaultTextures[ glTextureType ] = textureGPU;\n\n\t\t}\n\n\t\tthis.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tisDefault: true\n\t\t} );\n\n\t}\n\n\tcreateTexture( texture, options ) {\n\n\t\tconst { gl, utils, textureUtils } = this;\n\t\tconst { levels, width, height, depth } = options;\n\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = textureUtils.getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\tconst textureGPU = gl.createTexture();\n\t\tconst glTextureType = textureUtils.getGLTextureType( texture );\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\n\t\tgl.pixelStorei( gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\tgl.pixelStorei( gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\tgl.pixelStorei( gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\tgl.pixelStorei( gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE );\n\n\t\ttextureUtils.setTextureParameters( glTextureType, texture );\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\n\t\tif ( texture.isDataArrayTexture ) {\n\n\t\t\tgl.texStorage3D( gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth );\n\n\t\t} else if ( ! texture.isVideoTexture ) {\n\n\t\t\tgl.texStorage2D( glTextureType, levels, glInternalFormat, width, height );\n\n\t\t}\n\n\t\tthis.set( texture, {\n\t\t\ttextureGPU,\n\t\t\tglTextureType,\n\t\t\tglFormat,\n\t\t\tglType,\n\t\t\tglInternalFormat\n\t\t} );\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tconst { gl } = this;\n\t\tconst { width, height } = options;\n\t\tconst { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.get( texture );\n\n\t\tconst getImage = ( source ) => {\n\n\t\t\tif ( source.isDataTexture ) {\n\n\t\t\t\treturn source.image.data;\n\n\t\t\t} else if ( source instanceof ImageBitmap || source instanceof OffscreenCanvas || source instanceof HTMLImageElement || source instanceof HTMLCanvasElement ) {\n\n\t\t\t\treturn source;\n\n\t\t\t}\n\n\t\t\treturn source.data;\n\n\t\t};\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tconst images = options.images;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconst image = getImage( images[ i ] );\n\n\t\t\t\tgl.texSubImage2D( gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\tconst image = options.image;\n\n\t\t\tgl.texSubImage3D( gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\ttexture.update();\n\n\t\t\tgl.texImage2D( glTextureType, 0, glInternalFormat, glFormat, glType, options.image );\n\n\n\t\t} else {\n\n\t\t\tconst image = getImage( options.image );\n\n\t\t\tgl.texSubImage2D( glTextureType, 0, 0, 0, width, height, glFormat, glType, image );\n\n\t\t}\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tconst { gl } = this;\n\t\tconst { textureGPU, glTextureType } = this.get( texture );\n\n\t\tgl.bindTexture( glTextureType, textureGPU );\n\t\tgl.generateMipmap( glTextureType );\n\n\t}\n\n\tdestroyTexture( texture ) {\n\n\t\tconst { gl } = this;\n\t\tconst { textureGPU } = this.get( texture );\n\n\t\tgl.deleteTexture( textureGPU );\n\n\t\tthis.delete( texture );\n\n\t}\n\n\tdestroySampler() {}\n\n\tcopyTextureToBuffer( texture, x, y, width, height ) {\n\n\t\treturn this.textureUtils.copyTextureToBuffer( texture, x, y, width, height );\n\n\t}\n\n\t// node builder\n\n\tcreateNodeBuilder( object, renderer, scene = null ) {\n\n\t\treturn new GLSLNodeBuilder( object, renderer, scene );\n\n\t}\n\n\t// program\n\n\tcreateProgram( program ) {\n\n\t\tconst gl = this.gl;\n\t\tconst { stage, code } = program;\n\n\t\tconst shader = stage === 'vertex' ? gl.createShader( gl.VERTEX_SHADER ) : gl.createShader( gl.FRAGMENT_SHADER );\n\n\t\tgl.shaderSource( shader, code );\n\t\tgl.compileShader( shader );\n\n\t\tthis.set( program, {\n\t\t\tshaderGPU: shader\n\t\t} );\n\n\t}\n\n\tdestroyProgram( /*program*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateRenderPipeline( renderObject ) {\n\n\t\tconst gl = this.gl;\n\t\tconst pipeline = renderObject.pipeline;\n\n\t\t// Program\n\n\t\tconst { fragmentProgram, vertexProgram } = pipeline;\n\n\t\tconst programGPU = gl.createProgram();\n\n\t\tconst fragmentShader = this.get( fragmentProgram ).shaderGPU;\n\t\tconst vertexShader = this.get( vertexProgram ).shaderGPU;\n\n\t\tgl.attachShader( programGPU, fragmentShader );\n\t\tgl.attachShader( programGPU, vertexShader );\n\t\tgl.linkProgram( programGPU );\n\n\t\tif ( gl.getProgramParameter( programGPU, gl.LINK_STATUS ) === false ) {\n\n\t\t\tconsole.error( 'THREE.WebGLBackend:', gl.getProgramInfoLog( programGPU ) );\n\n\t\t\tconsole.error( 'THREE.WebGLBackend:', gl.getShaderInfoLog( fragmentShader ) );\n\t\t\tconsole.error( 'THREE.WebGLBackend:', gl.getShaderInfoLog( vertexShader ) );\n\n\t\t}\n\n\t\tgl.useProgram( programGPU );\n\n\t\t// Bindings\n\n\t\tconst bindings = renderObject.getBindings();\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst index = bindingData.index;\n\n\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\tconst location = gl.getUniformBlockIndex( programGPU, binding.name );\n\t\t\t\tgl.uniformBlockBinding( programGPU, location, index );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst location = gl.getUniformLocation( programGPU, binding.name );\n\t\t\t\tgl.uniform1i( location, index );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// VAO\n\n\t\tconst vaoGPU = gl.createVertexArray();\n\n\t\tconst index = renderObject.getIndex();\n\t\tconst attributes = renderObject.getAttributes();\n\n\t\tgl.bindVertexArray( vaoGPU );\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst indexData = this.get( index );\n\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < attributes.length; i ++ ) {\n\n\t\t\tconst attribute = attributes[ i ];\n\t\t\tconst attributeData = this.get( attribute );\n\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, attributeData.bufferGPU );\n\t\t\tgl.enableVertexAttribArray( i );\n\n\t\t\tlet stride, offset;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\tstride = attribute.data.stride * attributeData.bytesPerElement;\n\t\t\t\toffset = attribute.offset * attributeData.bytesPerElement;\n\n\t\t\t} else {\n\n\t\t\t\tstride = 0;\n\t\t\t\toffset = 0;\n\n\t\t\t}\n\n\t\t\tif ( attributeData.isInteger ) {\n\n\t\t\t\tgl.vertexAttribIPointer( i, attribute.itemSize, attributeData.type, stride, offset );\n\n\t\t\t} else {\n\n\t\t\t\tgl.vertexAttribPointer( i, attribute.itemSize, attributeData.type, attribute.normalized, stride, offset );\n\n\t\t\t}\n\n\t\t\tif ( attribute.isInstancedBufferAttribute && ! attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tgl.vertexAttribDivisor( i, attribute.meshPerAttribute );\n\n\t\t\t} else if ( attribute.isInterleavedBufferAttribute && attribute.data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\tgl.vertexAttribDivisor( i, attribute.data.meshPerAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindVertexArray( null );\n\n\t\t//\n\n\t\tthis.set( pipeline, {\n\t\t\tprogramGPU,\n\t\t\tvaoGPU\n\t\t} );\n\n\t}\n\n\tcreateComputePipeline( /*computePipeline, bindings*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tcreateBindings( bindings ) {\n\n\t\tthis.updateBindings( bindings );\n\n\t}\n\n\tupdateBindings( bindings ) {\n\n\t\tconst { gl } = this;\n\n\t\tlet groupIndex = 0;\n\t\tlet textureIndex = 0;\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\t\tconst bufferGPU = gl.createBuffer();\n\t\t\t\tconst data = binding.buffer;\n\n\t\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\t\t\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, groupIndex, bufferGPU );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: groupIndex ++,\n\t\t\t\t\tbufferGPU\n\t\t\t\t} );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst { textureGPU, glTextureType } = this.get( binding.texture );\n\n\t\t\t\tthis.set( binding, {\n\t\t\t\t\tindex: textureIndex ++,\n\t\t\t\t\ttextureGPU,\n\t\t\t\t\tglTextureType\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tconst gl = this.gl;\n\n\t\tif ( binding.isUniformsGroup || binding.isUniformBuffer ) {\n\n\t\t\tconst bindingData = this.get( binding );\n\t\t\tconst bufferGPU = bindingData.bufferGPU;\n\t\t\tconst data = binding.buffer;\n\n\t\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, bufferGPU );\n\t\t\tgl.bufferData( gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW );\n\n\t\t}\n\n\t}\n\n\t// attributes\n\n\tcreateIndexAttribute( attribute ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\n\n\t}\n\n\tcreateAttribute( attribute ) {\n\n\t\tconst gl = this.gl;\n\n\t\tthis.attributeUtils.createAttribute( attribute, gl.ARRAY_BUFFER );\n\n\t}\n\n\tcreateStorageAttribute( /*attribute*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.updateAttribute( attribute );\n\n\t}\n\n\tdestroyAttribute( /*attribute*/ ) {\n\n\t\tconsole.warn( 'Abstract class.' );\n\n\t}\n\n\tupdateSize() {\n\n\t\t//console.warn( 'Abstract class.' );\n\n\t}\n\n\thasFeature( /*name*/ ) {\n\n\t\treturn true;\n\n\t}\n\n\tgetMaxAnisotropy() {\n\n\t\treturn this.capabilities.getMaxAnisotropy();\n\n\t}\n\n\tcopyFramebufferToTexture( texture, renderContext ) {\n\n\t\tconst { gl } = this;\n\n\t\tconst { textureGPU } = this.get( texture );\n\n\t\tconst width = texture.image.width;\n\t\tconst height = texture.image.height;\n\n\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\tconst fb = gl.createFramebuffer();\n\n\t\t\tgl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, fb );\n\n\t\t\tgl.framebufferTexture2D( gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, textureGPU, 0 );\n\n\t\t\tgl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, gl.DEPTH_BUFFER_BIT, gl.NEAREST );\n\n\t\t\tgl.deleteFramebuffer( fb );\n\n\n\t\t} else {\n\n\t\t\tgl.bindTexture( gl.TEXTURE_2D, textureGPU );\n\t\t\tgl.copyTexSubImage2D( gl.TEXTURE_2D, 0, 0, 0, 0, 0, width, height );\n\n\t\t\tgl.bindTexture( gl.TEXTURE_2D, null );\n\n\t\t}\n\n\t\tif ( texture.generateMipmaps ) this.generateMipmaps( texture );\n\n\t\tthis._setFramebuffer( renderContext );\n\n\t}\n\n\t_setFramebuffer( renderContext ) {\n\n\t\tconst { gl } = this;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst renderContextData = this.get( renderContext.renderTarget );\n\n\t\t\tlet fb = renderContextData.framebuffer;\n\n\t\t\tif ( fb === undefined ) {\n\n\t\t\t\tfb = gl.createFramebuffer();\n\n\t\t\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t\tconst textures = renderContext.textures;\n\n\t\t\t\tconst drawBuffers = [];\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\tconst { textureGPU } = this.get( texture );\n\n\t\t\t\t\tconst attachment = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, textureGPU, 0 );\n\n\t\t\t\t\tdrawBuffers.push( attachment );\n\n\t\t\t\t}\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\t\t\tconst { textureGPU } = this.get( renderContext.depthTexture );\n\n\t\t\t\t\tgl.framebufferTexture2D( gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, textureGPU, 0 );\n\n\t\t\t\t}\n\n\t\t\t\trenderContextData.framebuffer = fb;\n\n\t\t\t} else {\n\n\t\t\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, fb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\n\t\t}\n\n\t}\n\n}\n\nexport default WebGLBackend;\n", "export const GPUPrimitiveTopology = {\n\tPointList: 'point-list',\n\tLineList: 'line-list',\n\tLineStrip: 'line-strip',\n\tTriangleList: 'triangle-list',\n\tTriangleStrip: 'triangle-strip',\n};\n\nexport const GPUCompareFunction = {\n\tNever: 'never',\n\tLess: 'less',\n\tEqual: 'equal',\n\tLessEqual: 'less-equal',\n\tGreater: 'greater',\n\tNotEqual: 'not-equal',\n\tGreaterEqual: 'greater-equal',\n\tAlways: 'always'\n};\n\nexport const GPUStoreOp = {\n\tStore: 'store',\n\tDiscard: 'discard'\n};\n\nexport const GPULoadOp = {\n\tLoad: 'load',\n\tClear: 'clear'\n};\n\nexport const GPUFrontFace = {\n\tCCW: 'ccw',\n\tCW: 'cw'\n};\n\nexport const GPUCullMode = {\n\tNone: 'none',\n\tFront: 'front',\n\tBack: 'back'\n};\n\nexport const GPUIndexFormat = {\n\tUint16: 'uint16',\n\tUint32: 'uint32'\n};\n\nexport const GPUVertexFormat = {\n\tUint8x2: 'uint8x2',\n\tUint8x4: 'uint8x4',\n\tSint8x2: 'sint8x2',\n\tSint8x4: 'sint8x4',\n\tUnorm8x2: 'unorm8x2',\n\tUnorm8x4: 'unorm8x4',\n\tSnorm8x2: 'snorm8x2',\n\tSnorm8x4: 'snorm8x4',\n\tUint16x2: 'uint16x2',\n\tUint16x4: 'uint16x4',\n\tSint16x2: 'sint16x2',\n\tSint16x4: 'sint16x4',\n\tUnorm16x2: 'unorm16x2',\n\tUnorm16x4: 'unorm16x4',\n\tSnorm16x2: 'snorm16x2',\n\tSnorm16x4: 'snorm16x4',\n\tFloat16x2: 'float16x2',\n\tFloat16x4: 'float16x4',\n\tFloat32: 'float32',\n\tFloat32x2: 'float32x2',\n\tFloat32x3: 'float32x3',\n\tFloat32x4: 'float32x4',\n\tUint32: 'uint32',\n\tUint32x2: 'uint32x2',\n\tUint32x3: 'uint32x3',\n\tUint32x4: 'uint32x4',\n\tSint32: 'sint32',\n\tSint32x2: 'sint32x2',\n\tSint32x3: 'sint32x3',\n\tSint32x4: 'sint32x4'\n};\n\nexport const GPUTextureFormat = {\n\n\t// 8-bit formats\n\n\tR8Unorm: 'r8unorm',\n\tR8Snorm: 'r8snorm',\n\tR8Uint: 'r8uint',\n\tR8Sint: 'r8sint',\n\n\t// 16-bit formats\n\n\tR16Uint: 'r16uint',\n\tR16Sint: 'r16sint',\n\tR16Float: 'r16float',\n\tRG8Unorm: 'rg8unorm',\n\tRG8Snorm: 'rg8snorm',\n\tRG8Uint: 'rg8uint',\n\tRG8Sint: 'rg8sint',\n\n\t// 32-bit formats\n\n\tR32Uint: 'r32uint',\n\tR32Sint: 'r32sint',\n\tR32Float: 'r32float',\n\tRG16Uint: 'rg16uint',\n\tRG16Sint: 'rg16sint',\n\tRG16Float: 'rg16float',\n\tRGBA8Unorm: 'rgba8unorm',\n\tRGBA8UnormSRGB: 'rgba8unorm-srgb',\n\tRGBA8Snorm: 'rgba8snorm',\n\tRGBA8Uint: 'rgba8uint',\n\tRGBA8Sint: 'rgba8sint',\n\tBGRA8Unorm: 'bgra8unorm',\n\tBGRA8UnormSRGB: 'bgra8unorm-srgb',\n\t// Packed 32-bit formats\n\tRGB9E5UFloat: 'rgb9e5ufloat',\n\tRGB10A2Unorm: 'rgb10a2unorm',\n\tRG11B10uFloat: 'rgb10a2unorm',\n\n\t// 64-bit formats\n\n\tRG32Uint: 'rg32uint',\n\tRG32Sint: 'rg32sint',\n\tRG32Float: 'rg32float',\n\tRGBA16Uint: 'rgba16uint',\n\tRGBA16Sint: 'rgba16sint',\n\tRGBA16Float: 'rgba16float',\n\n\t// 128-bit formats\n\n\tRGBA32Uint: 'rgba32uint',\n\tRGBA32Sint: 'rgba32sint',\n\tRGBA32Float: 'rgba32float',\n\n\t// Depth and stencil formats\n\n\tStencil8: 'stencil8',\n\tDepth16Unorm: 'depth16unorm',\n\tDepth24Plus: 'depth24plus',\n\tDepth24PlusStencil8: 'depth24plus-stencil8',\n\tDepth32Float: 'depth32float',\n\n\t// 'depth32float-stencil8' extension\n\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\n\t// BC compressed formats usable if 'texture-compression-bc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tBC1RGBAUnorm: 'bc1-rgba-unorm',\n\tBC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n\tBC2RGBAUnorm: 'bc2-rgba-unorm',\n\tBC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n\tBC3RGBAUnorm: 'bc3-rgba-unorm',\n\tBC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n\tBC4RUnorm: 'bc4-r-unorm',\n\tBC4RSnorm: 'bc4-r-snorm',\n\tBC5RGUnorm: 'bc5-rg-unorm',\n\tBC5RGSnorm: 'bc5-rg-snorm',\n\tBC6HRGBUFloat: 'bc6h-rgb-ufloat',\n\tBC6HRGBFloat: 'bc6h-rgb-float',\n\tBC7RGBAUnorm: 'bc7-rgba-unorm',\n\tBC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n\n\t// ETC2 compressed formats usable if 'texture-compression-etc2' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tETC2RGB8Unorm: 'etc2-rgb8unorm',\n\tETC2RGB8UnormSRGB: 'etc2-rgb8unorm-srgb',\n\tETC2RGB8A1Unorm: 'etc2-rgb8a1unorm',\n\tETC2RGB8A1UnormSRGB: 'etc2-rgb8a1unorm-srgb',\n\tETC2RGBA8Unorm: 'etc2-rgba8unorm',\n\tETC2RGBA8UnormSRGB: 'etc2-rgba8unorm-srgb',\n\tEACR11Unorm: 'eac-r11unorm',\n\tEACR11Snorm: 'eac-r11snorm',\n\tEACRG11Unorm: 'eac-rg11unorm',\n\tEACRG11Snorm: 'eac-rg11snorm',\n\n\t// ASTC compressed formats usable if 'texture-compression-astc' is both\n\t// supported by the device/user agent and enabled in requestDevice.\n\n\tASTC4x4Unorm: 'astc-4x4-unorm',\n\tASTC4x4UnormSRGB: 'astc-4x4-unorm-srgb',\n\tASTC5x4Unorm: 'astc-5x4-unorm',\n\tASTC5x4UnormSRGB: 'astc-5x4-unorm-srgb',\n\tASTC5x5Unorm: 'astc-5x5-unorm',\n\tASTC5x5UnormSRGB: 'astc-5x5-unorm-srgb',\n\tASTC6x5Unorm: 'astc-6x5-unorm',\n\tASTC6x5UnormSRGB: 'astc-6x5-unorm-srgb',\n\tASTC6x6Unorm: 'astc-6x6-unorm',\n\tASTC6x6UnormSRGB: 'astc-6x6-unorm-srgb',\n\tASTC8x5Unorm: 'astc-8x5-unorm',\n\tASTC8x5UnormSRGB: 'astc-8x5-unorm-srgb',\n\tASTC8x6Unorm: 'astc-8x6-unorm',\n\tASTC8x6UnormSRGB: 'astc-8x6-unorm-srgb',\n\tASTC8x8Unorm: 'astc-8x8-unorm',\n\tASTC8x8UnormSRGB: 'astc-8x8-unorm-srgb',\n\tASTC10x5Unorm: 'astc-10x5-unorm',\n\tASTC10x5UnormSRGB: 'astc-10x5-unorm-srgb',\n\tASTC10x6Unorm: 'astc-10x6-unorm',\n\tASTC10x6UnormSRGB: 'astc-10x6-unorm-srgb',\n\tASTC10x8Unorm: 'astc-10x8-unorm',\n\tASTC10x8UnormSRGB: 'astc-10x8-unorm-srgb',\n\tASTC10x10Unorm: 'astc-10x10-unorm',\n\tASTC10x10UnormSRGB: 'astc-10x10-unorm-srgb',\n\tASTC12x10Unorm: 'astc-12x10-unorm',\n\tASTC12x10UnormSRGB: 'astc-12x10-unorm-srgb',\n\tASTC12x12Unorm: 'astc-12x12-unorm',\n\tASTC12x12UnormSRGB: 'astc-12x12-unorm-srgb',\n\n};\n\nexport const GPUAddressMode = {\n\tClampToEdge: 'clamp-to-edge',\n\tRepeat: 'repeat',\n\tMirrorRepeat: 'mirror-repeat'\n};\n\nexport const GPUFilterMode = {\n\tLinear: 'linear',\n\tNearest: 'nearest'\n};\n\nexport const GPUBlendFactor = {\n\tZero: 'zero',\n\tOne: 'one',\n\tSrc: 'src',\n\tOneMinusSrc: 'one-minus-src',\n\tSrcAlpha: 'src-alpha',\n\tOneMinusSrcAlpha: 'one-minus-src-alpha',\n\tDst: 'dst',\n\tOneMinusDstColor: 'one-minus-dst',\n\tDstAlpha: 'dst-alpha',\n\tOneMinusDstAlpha: 'one-minus-dst-alpha',\n\tSrcAlphaSaturated: 'src-alpha-saturated',\n\tConstant: 'constant',\n\tOneMinusConstant: 'one-minus-constant'\n};\n\nexport const GPUBlendOperation = {\n\tAdd: 'add',\n\tSubtract: 'subtract',\n\tReverseSubtract: 'reverse-subtract',\n\tMin: 'min',\n\tMax: 'max'\n};\n\nexport const GPUColorWriteFlags = {\n\tNone: 0,\n\tRed: 0x1,\n\tGreen: 0x2,\n\tBlue: 0x4,\n\tAlpha: 0x8,\n\tAll: 0xF\n};\n\nexport const GPUStencilOperation = {\n\tKeep: 'keep',\n\tZero: 'zero',\n\tReplace: 'replace',\n\tInvert: 'invert',\n\tIncrementClamp: 'increment-clamp',\n\tDecrementClamp: 'decrement-clamp',\n\tIncrementWrap: 'increment-wrap',\n\tDecrementWrap: 'decrement-wrap'\n};\n\nexport const GPUBufferBindingType = {\n\tUniform: 'uniform',\n\tStorage: 'storage',\n\tReadOnlyStorage: 'read-only-storage'\n};\n\nexport const GPUSamplerBindingType = {\n\tFiltering: 'filtering',\n\tNonFiltering: 'non-filtering',\n\tComparison: 'comparison'\n};\n\nexport const GPUTextureSampleType = {\n\tFloat: 'float',\n\tUnfilterableFloat: 'unfilterable-float',\n\tDepth: 'depth',\n\tSInt: 'sint',\n\tUInt: 'uint'\n};\n\nexport const GPUTextureDimension = {\n\tOneD: '1d',\n\tTwoD: '2d',\n\tThreeD: '3d'\n};\n\nexport const GPUTextureViewDimension = {\n\tOneD: '1d',\n\tTwoD: '2d',\n\tTwoDArray: '2d-array',\n\tCube: 'cube',\n\tCubeArray: 'cube-array',\n\tThreeD: '3d'\n};\n\nexport const GPUTextureAspect = {\n\tAll: 'all',\n\tStencilOnly: 'stencil-only',\n\tDepthOnly: 'depth-only'\n};\n\nexport const GPUInputStepMode = {\n\tVertex: 'vertex',\n\tInstance: 'instance'\n};\n\nexport const GPUFeatureName = {\n\tDepthClipControl: 'depth-clip-control',\n\tDepth32FloatStencil8: 'depth32float-stencil8',\n\tTextureCompressionBC: 'texture-compression-bc',\n\tTextureCompressionETC2: 'texture-compression-etc2',\n\tTextureCompressionASTC: 'texture-compression-astc',\n\tTimestampQuery: 'timestamp-query',\n\tIndirectFirstInstance: 'indirect-first-instance',\n\tShaderF16: 'shader-f16',\n\tRG11B10UFloat: 'rg11b10ufloat-renderable',\n\tBGRA8UNormStorage: 'bgra8unorm-storage',\n\tFloat32Filterable: 'float32-filterable'\n};\n", "import Binding from './Binding.js';\n\nclass Sampler extends Binding {\n\n\tconstructor( name, texture ) {\n\n\t\tsuper( name );\n\n\t\tthis.texture = texture;\n\t\tthis.version = texture ? texture.version : 0;\n\n\t\tthis.isSampler = true;\n\n\t}\n\n}\n\nexport default Sampler;\n", "import Sampler from '../Sampler.js';\n\nclass NodeSampler extends Sampler {\n\n\tconstructor( name, textureNode ) {\n\n\t\tsuper( name, textureNode ? textureNode.value : null );\n\n\t\tthis.textureNode = textureNode;\n\n\t}\n\n}\n\nexport default NodeSampler;\n", "import Buffer from './Buffer.js';\n\nclass StorageBuffer extends Buffer {\n\n\tconstructor( name, attribute ) {\n\n\t\tsuper( name, attribute ? attribute.array : null );\n\n\t\tthis.attribute = attribute;\n\n\t\tthis.isStorageBuffer = true;\n\n\t}\n\n}\n\nexport default StorageBuffer;\n", "import { GPUTextureViewDimension, GPUIndexFormat, GPUFilterMode, GPUPrimitiveTopology, GPULoadOp, GPUStoreOp } from './WebGPUConstants.js';\n\nclass WebGPUTexturePassUtils {\n\n\tconstructor( device ) {\n\n\t\tthis.device = device;\n\n\t\tconst mipmapVertexSource = `\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n`;\n\n\t\tconst mipmapFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n`;\n\n\t\tconst flipYFragmentSource = `\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n`;\n\t\tthis.mipmapSampler = device.createSampler( { minFilter: GPUFilterMode.Linear } );\n\t\tthis.flipYSampler = device.createSampler( { minFilter: GPUFilterMode.Nearest } ); //@TODO?: Consider using textureLoad()\n\n\t\t// We'll need a new pipeline for every texture format used.\n\t\tthis.transferPipelines = {};\n\t\tthis.flipYPipelines = {};\n\n\t\tthis.mipmapVertexShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapVertex',\n\t\t\tcode: mipmapVertexSource\n\t\t} );\n\n\t\tthis.mipmapFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'mipmapFragment',\n\t\t\tcode: mipmapFragmentSource\n\t\t} );\n\n\t\tthis.flipYFragmentShaderModule = device.createShaderModule( {\n\t\t\tlabel: 'flipYFragment',\n\t\t\tcode: flipYFragmentSource\n\t\t} );\n\n\t}\n\n\tgetTransferPipeline( format ) {\n\n\t\tlet pipeline = this.transferPipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.mipmapFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.transferPipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\tgetFlipYPipeline( format ) {\n\n\t\tlet pipeline = this.flipYPipelines[ format ];\n\n\t\tif ( pipeline === undefined ) {\n\n\t\t\tpipeline = this.device.createRenderPipeline( {\n\t\t\t\tvertex: {\n\t\t\t\t\tmodule: this.mipmapVertexShaderModule,\n\t\t\t\t\tentryPoint: 'main'\n\t\t\t\t},\n\t\t\t\tfragment: {\n\t\t\t\t\tmodule: this.flipYFragmentShaderModule,\n\t\t\t\t\tentryPoint: 'main',\n\t\t\t\t\ttargets: [ { format } ]\n\t\t\t\t},\n\t\t\t\tprimitive: {\n\t\t\t\t\ttopology: GPUPrimitiveTopology.TriangleStrip,\n\t\t\t\t\tstripIndexFormat: GPUIndexFormat.Uint32\n\t\t\t\t},\n\t\t\t\tlayout: 'auto'\n\t\t\t} );\n\n\t\t\tthis.flipYPipelines[ format ] = pipeline;\n\n\t\t}\n\n\t\treturn pipeline;\n\n\t}\n\n\tflipY( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst format = textureGPUDescriptor.format;\n\t\tconst { width, height } = textureGPUDescriptor.size;\n\n\t\tconst transferPipeline = this.getTransferPipeline( format );\n\t\tconst flipYPipeline = this.getFlipYPipeline( format );\n\n\t\tconst tempTexture = this.device.createTexture( {\n\t\t\tsize: { width, height, depthOrArrayLayers: 1 },\n\t\t\tformat,\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n\t\t} );\n\n\t\tconst srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tconst dstView = tempTexture.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer: 0\n\t\t} );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\n\t\tconst pass = ( pipeline, sourceView, destinationView ) => {\n\n\t\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.flipYSampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: sourceView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: destinationView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\t\t\tpassEncoder.end();\n\n\t\t};\n\n\t\tpass( transferPipeline, srcView, dstView );\n\t\tpass( flipYPipeline, dstView, srcView );\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t\ttempTexture.destroy();\n\n\t}\n\n\tgenerateMipmaps( textureGPU, textureGPUDescriptor, baseArrayLayer = 0 ) {\n\n\t\tconst pipeline = this.getTransferPipeline( textureGPUDescriptor.format );\n\n\t\tconst commandEncoder = this.device.createCommandEncoder( {} );\n\t\tconst bindGroupLayout = pipeline.getBindGroupLayout( 0 ); // @TODO: Consider making this static.\n\n\t\tlet srcView = textureGPU.createView( {\n\t\t\tbaseMipLevel: 0,\n\t\t\tmipLevelCount: 1,\n\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\tbaseArrayLayer\n\t\t} );\n\n\t\tfor ( let i = 1; i < textureGPUDescriptor.mipLevelCount; i ++ ) {\n\n\t\t\tconst bindGroup = this.device.createBindGroup( {\n\t\t\t\tlayout: bindGroupLayout,\n\t\t\t\tentries: [ {\n\t\t\t\t\tbinding: 0,\n\t\t\t\t\tresource: this.mipmapSampler\n\t\t\t\t}, {\n\t\t\t\t\tbinding: 1,\n\t\t\t\t\tresource: srcView\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tconst dstView = textureGPU.createView( {\n\t\t\t\tbaseMipLevel: i,\n\t\t\t\tmipLevelCount: 1,\n\t\t\t\tdimension: GPUTextureViewDimension.TwoD,\n\t\t\t\tbaseArrayLayer\n\t\t\t} );\n\n\t\t\tconst passEncoder = commandEncoder.beginRenderPass( {\n\t\t\t\tcolorAttachments: [ {\n\t\t\t\t\tview: dstView,\n\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store,\n\t\t\t\t\tclearValue: [ 0, 0, 0, 0 ]\n\t\t\t\t} ]\n\t\t\t} );\n\n\t\t\tpassEncoder.setPipeline( pipeline );\n\t\t\tpassEncoder.setBindGroup( 0, bindGroup );\n\t\t\tpassEncoder.draw( 4, 1, 0, 0 );\n\t\t\tpassEncoder.end();\n\n\t\t\tsrcView = dstView;\n\n\t\t}\n\n\t\tthis.device.queue.submit( [ commandEncoder.finish() ] );\n\n\t}\n\n}\n\nexport default WebGPUTexturePassUtils;\n", "import {\n\tGPUTextureFormat, GPUAddressMode, GPUFilterMode, GPUTextureDimension, GPUFeatureName\n} from './WebGPUConstants.js';\n\nimport {\n\tCubeTexture, Texture,\n\tNearestFilter, NearestMipmapNearestFilter, NearestMipmapLinearFilter,\n\tRepeatWrapping, MirroredRepeatWrapping,\n\tRGB_ETC2_Format, RGBA_ETC2_EAC_Format,\n\tRGBAFormat, RedFormat, RGFormat, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, UnsignedByteType, FloatType, HalfFloatType, SRGBColorSpace, DepthFormat, DepthStencilFormat,\n\tRGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format,\n\tRGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, UnsignedIntType, UnsignedShortType, UnsignedInt248Type,\n\tNeverCompare, AlwaysCompare, LessCompare, LessEqualCompare, EqualCompare, GreaterEqualCompare, GreaterCompare, NotEqualCompare\n} from 'three';\n\nimport { CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, DepthTexture } from 'three';\n\nimport WebGPUTexturePassUtils from './WebGPUTexturePassUtils.js';\n\nconst _compareToWebGPU = {\n\t[ NeverCompare ]: 'never',\n\t[ LessCompare ]: 'less',\n\t[ EqualCompare ]: 'equal',\n\t[ LessEqualCompare ]: 'less-equal',\n\t[ GreaterCompare ]: 'greater',\n\t[ GreaterEqualCompare ]: 'greater-equal',\n\t[ AlwaysCompare ]: 'always',\n\t[ NotEqualCompare ]: 'not-equal'\n};\n\nconst _flipMap = [ 0, 1, 3, 2, 4, 5 ];\n\nclass WebGPUTextureUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t\tthis._passUtils = null;\n\n\t\tthis.defaultTexture = null;\n\t\tthis.defaultCubeTexture = null;\n\n\t\tthis.colorBuffer = null;\n\n\t\tthis.depthTexture = new DepthTexture();\n\t\tthis.depthTexture.name = 'depthBuffer';\n\n\t}\n\n\tcreateSampler( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst textureGPU = backend.get( texture );\n\n\t\tconst samplerDescriptorGPU = {\n\t\t\taddressModeU: this._convertAddressMode( texture.wrapS ),\n\t\t\taddressModeV: this._convertAddressMode( texture.wrapT ),\n\t\t\taddressModeW: this._convertAddressMode( texture.wrapR ),\n\t\t\tmagFilter: this._convertFilterMode( texture.magFilter ),\n\t\t\tminFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\tmipmapFilter: this._convertFilterMode( texture.minFilter ),\n\t\t\tmaxAnisotropy: texture.anisotropy\n\t\t};\n\n\t\tif ( texture.isDepthTexture && texture.compareFunction !== null ) {\n\n\t\t\tsamplerDescriptorGPU.compare = _compareToWebGPU[ texture.compareFunction ];\n\n\t\t}\n\n\t\ttextureGPU.sampler = device.createSampler( samplerDescriptorGPU );\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tlet textureGPU;\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\ttextureGPU = this._getDefaultCubeTextureGPU();\n\n\t\t} else {\n\n\t\t\ttextureGPU = this._getDefaultTextureGPU();\n\n\t\t}\n\n\t\tthis.backend.get( texture ).texture = textureGPU;\n\n\t}\n\n\tcreateTexture( texture, options = {} ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tif ( textureData.initialized ) {\n\n\t\t\tthrow new Error( 'WebGPUTextureUtils: Texture already initialized.' );\n\n\t\t}\n\n\t\tif ( options.needsMipmaps === undefined ) options.needsMipmaps = false;\n\t\tif ( options.levels === undefined ) options.levels = 1;\n\t\tif ( options.depth === undefined ) options.depth = 1;\n\n\t\tconst { width, height, depth, levels } = options;\n\n\t\tconst dimension = this._getDimension( texture );\n\t\tconst format = texture.internalFormat || getFormat( texture, backend.device );\n\n\t\tconst sampleCount = options.sampleCount !== undefined ? options.sampleCount : 1;\n\t\tconst primarySampleCount = texture.isRenderTargetTexture ? 1 : sampleCount;\n\n\t\tlet usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;\n\n\t\tif ( texture.isStorageTexture === true ) {\n\n\t\t\tusage |= GPUTextureUsage.STORAGE_BINDING;\n\n\t\t}\n\n\t\tif ( texture.isCompressedTexture !== true ) {\n\n\t\t\tusage |= GPUTextureUsage.RENDER_ATTACHMENT;\n\n\t\t}\n\n\t\tconst textureDescriptorGPU = {\n\t\t\tlabel: texture.name,\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: depth,\n\t\t\t},\n\t\t\tmipLevelCount: levels,\n\t\t\tsampleCount: primarySampleCount,\n\t\t\tdimension: dimension,\n\t\t\tformat: format,\n\t\t\tusage: usage\n\t\t};\n\n\t\t// texture creation\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\tconst video = texture.source.data;\n\t\t\tconst videoFrame = new VideoFrame( video );\n\n\t\t\ttextureDescriptorGPU.size.width = videoFrame.displayWidth;\n\t\t\ttextureDescriptorGPU.size.height = videoFrame.displayHeight;\n\n\t\t\tvideoFrame.close();\n\n\t\t\ttextureData.externalTexture = video;\n\n\t\t} else {\n\n\t\t\tif ( format === undefined ) {\n\n\t\t\t\tconsole.warn( 'WebGPURenderer: Texture format not supported.' );\n\n\t\t\t\treturn this.createDefaultTexture( texture );\n\n\t\t\t}\n\n\t\t\ttextureData.texture = backend.device.createTexture( textureDescriptorGPU );\n\n\t\t}\n\n\t\tif ( texture.isRenderTargetTexture && sampleCount > 1 ) {\n\n\t\t\tconst msaaTextureDescriptorGPU = Object.assign( {}, textureDescriptorGPU );\n\n\t\t\tmsaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + '-msaa';\n\t\t\tmsaaTextureDescriptorGPU.sampleCount = sampleCount;\n\n\t\t\ttextureData.msaaTexture = backend.device.createTexture( msaaTextureDescriptorGPU );\n\n\t\t}\n\n\t\ttextureData.initialized = true;\n\n\t\ttextureData.textureDescriptorGPU = textureDescriptorGPU;\n\n\t}\n\n\tdestroyTexture( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\ttextureData.texture.destroy();\n\n\t\tif ( textureData.msaaTexture !== undefined ) textureData.msaaTexture.destroy();\n\n\t\tbackend.delete( texture );\n\n\t}\n\n\tdestroySampler( texture ) {\n\n\t\tconst backend = this.backend;\n\t\tconst textureData = backend.get( texture );\n\n\t\tdelete textureData.sampler;\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tconst textureData = this.backend.get( texture );\n\n\t\tif ( texture.isCubeTexture ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU, i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis._generateMipmaps( textureData.texture, textureData.textureDescriptorGPU );\n\n\t\t}\n\n\t}\n\n\tgetColorBuffer() {\n\n\t\tif ( this.colorBuffer ) this.colorBuffer.destroy();\n\n\t\tconst backend = this.backend;\n\t\tconst { width, height } = backend.getDrawingBufferSize();\n\n\t\tthis.colorBuffer = backend.device.createTexture( {\n\t\t\tlabel: 'colorBuffer',\n\t\t\tsize: {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t},\n\t\t\tsampleCount: backend.parameters.sampleCount,\n\t\t\tformat: GPUTextureFormat.BGRA8Unorm,\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n\t\t} );\n\n\t\treturn this.colorBuffer;\n\n\t}\n\n\tgetDepthBuffer( depth = true, stencil = true ) {\n\n\t\tconst backend = this.backend;\n\t\tconst { width, height } = backend.getDrawingBufferSize();\n\n\t\tconst depthTexture = this.depthTexture;\n\t\tconst depthTextureGPU = backend.get( depthTexture ).texture;\n\n\t\tlet format, type;\n\n\t\tif ( stencil ) {\n\n\t\t\tformat = DepthStencilFormat;\n\t\t\ttype = UnsignedInt248Type;\n\n\t\t} else if ( depth ) {\n\n\t\t\tformat = DepthFormat;\n\t\t\ttype = UnsignedIntType;\n\n\t\t}\n\n\t\tif ( depthTextureGPU !== undefined ) {\n\n\t\t\tif ( depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format && depthTexture.type === type ) {\n\n\t\t\t\treturn depthTextureGPU;\n\n\t\t\t}\n\n\t\t\tthis.destroyTexture( depthTexture );\n\n\t\t}\n\n\t\tdepthTexture.name = 'depthBuffer';\n\t\tdepthTexture.format = format;\n\t\tdepthTexture.type = type;\n\t\tdepthTexture.image.width = width;\n\t\tdepthTexture.image.height = height;\n\n\t\tthis.createTexture( depthTexture, { sampleCount: backend.parameters.sampleCount, width, height } );\n\n\t\treturn backend.get( depthTexture ).texture;\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tconst textureData = this.backend.get( texture );\n\n\t\tconst { textureDescriptorGPU } = textureData;\n\n\t\tif ( texture.isRenderTargetTexture || ( textureDescriptorGPU === undefined /* unsupported texture format */ ) )\n\t\t\treturn;\n\n\t\t// transfer texture data\n\n\t\tif ( texture.isDataTexture || texture.isData3DTexture ) {\n\n\t\t\tthis._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, false );\n\n\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\tfor ( let i = 0; i < options.image.depth; i ++ ) {\n\n\t\t\t\tthis._copyBufferToTexture( options.image, textureData.texture, textureDescriptorGPU, i, false, i );\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tthis._copyCompressedBufferToTexture( texture.mipmaps, textureData.texture, textureDescriptorGPU );\n\n\t\t} else if ( texture.isCubeTexture ) {\n\n\t\t\tthis._copyCubeMapToTexture( options.images, textureData.texture, textureDescriptorGPU, texture.flipY );\n\n\t\t} else if ( texture.isVideoTexture ) {\n\n\t\t\tconst video = texture.source.data;\n\n\t\t\ttextureData.externalTexture = video;\n\n\t\t} else {\n\n\t\t\tthis._copyImageToTexture( options.image, textureData.texture, textureDescriptorGPU, 0, texture.flipY );\n\n\t\t}\n\n\t\t//\n\n\t\ttextureData.version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tasync copyTextureToBuffer( texture, x, y, width, height ) {\n\n\t\tconst device = this.backend.device;\n\n\t\tconst textureData = this.backend.get( texture );\n\t\tconst textureGPU = textureData.texture;\n\t\tconst format = textureData.textureDescriptorGPU.format;\n\t\tconst bytesPerTexel = this._getBytesPerTexel( format );\n\n\t\tconst readBuffer = device.createBuffer(\n\t\t\t{\n\t\t\t\tsize: width * height * bytesPerTexel,\n\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t}\n\t\t);\n\n\t\tconst encoder = device.createCommandEncoder();\n\n\t\tencoder.copyTextureToBuffer(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\torigin: { x, y },\n\t\t\t},\n\t\t\t{\n\t\t\t\tbuffer: readBuffer,\n\t\t\t\tbytesPerRow: width * bytesPerTexel\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t}\n\n\t\t);\n\n\t\tconst typedArrayType = this._getTypedArrayType( format );\n\n\t\tdevice.queue.submit( [ encoder.finish() ] );\n\n\t\tawait readBuffer.mapAsync( GPUMapMode.READ );\n\n\t\tconst buffer = readBuffer.getMappedRange();\n\n\t\treturn new typedArrayType( buffer );\n\n\t}\n\n\t_isEnvironmentTexture( texture ) {\n\n\t\tconst mapping = texture.mapping;\n\n\t\treturn ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) || ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t}\n\n\t_getDefaultTextureGPU() {\n\n\t\tlet defaultTexture = this.defaultTexture;\n\n\t\tif ( defaultTexture === null ) {\n\n\t\t\tconst texture = new Texture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis.createTexture( texture, { width: 1, height: 1 } );\n\n\t\t\tthis.defaultTexture = defaultTexture = texture;\n\n\t\t}\n\n\t\treturn this.backend.get( defaultTexture ).texture;\n\n\t}\n\n\t_getDefaultCubeTextureGPU() {\n\n\t\tlet defaultCubeTexture = this.defaultTexture;\n\n\t\tif ( defaultCubeTexture === null ) {\n\n\t\t\tconst texture = new CubeTexture();\n\t\t\ttexture.minFilter = NearestFilter;\n\t\t\ttexture.magFilter = NearestFilter;\n\n\t\t\tthis.createTexture( texture, { width: 1, height: 1, depth: 6 } );\n\n\t\t\tthis.defaultCubeTexture = defaultCubeTexture = texture;\n\n\t\t}\n\n\t\treturn this.backend.get( defaultCubeTexture ).texture;\n\n\t}\n\n\t_copyCubeMapToTexture( images, textureGPU, textureDescriptorGPU, flipY ) {\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst image = images[ i ];\n\n\t\t\tconst flipIndex = flipY === true ? _flipMap[ i ] : i;\n\n\t\t\tif ( image.isDataTexture ) {\n\n\t\t\t\tthis._copyBufferToTexture( image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY );\n\n\t\t\t} else {\n\n\t\t\t\tthis._copyImageToTexture( image, textureGPU, textureDescriptorGPU, flipIndex, flipY );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_copyImageToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY ) {\n\n\t\tconst device = this.backend.device;\n\n\t\tdevice.queue.copyExternalImageToTexture(\n\t\t\t{\n\t\t\t\tsource: image\n\t\t\t}, {\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t}, {\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t}\n\t\t);\n\n\t\tif ( flipY === true ) {\n\n\t\t\tthis._flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t\t}\n\n\t}\n\n\t_getPassUtils() {\n\n\t\tlet passUtils = this._passUtils;\n\n\t\tif ( passUtils === null ) {\n\n\t\t\tthis._passUtils = passUtils = new WebGPUTexturePassUtils( this.backend.device );\n\n\t\t}\n\n\t\treturn passUtils;\n\n\t}\n\n\t_generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer = 0 ) {\n\n\t\tthis._getPassUtils().generateMipmaps( textureGPU, textureDescriptorGPU, baseArrayLayer );\n\n\t}\n\n\t_flipY( textureGPU, textureDescriptorGPU, originDepth = 0 ) {\n\n\t\tthis._getPassUtils().flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t}\n\n\t_copyBufferToTexture( image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth = 0 ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\t\t// @TODO: Consider to support valid buffer layouts with other formats like RGB\n\n\t\tconst device = this.backend.device;\n\n\t\tconst data = image.data;\n\n\t\tconst bytesPerTexel = this._getBytesPerTexel( textureDescriptorGPU.format );\n\t\tconst bytesPerRow = image.width * bytesPerTexel;\n\n\t\tdevice.queue.writeTexture(\n\t\t\t{\n\t\t\t\ttexture: textureGPU,\n\t\t\t\tmipLevel: 0,\n\t\t\t\torigin: { x: 0, y: 0, z: originDepth }\n\t\t\t},\n\t\t\tdata,\n\t\t\t{\n\t\t\t\toffset: image.width * image.height * bytesPerTexel * depth,\n\t\t\t\tbytesPerRow\n\t\t\t},\n\t\t\t{\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t} );\n\n\t\tif ( flipY === true ) {\n\n\t\t\tthis._flipY( textureGPU, textureDescriptorGPU, originDepth );\n\n\t\t}\n\n\t}\n\n\t_copyCompressedBufferToTexture( mipmaps, textureGPU, textureDescriptorGPU ) {\n\n\t\t// @TODO: Consider to use GPUCommandEncoder.copyBufferToTexture()\n\n\t\tconst device = this.backend.device;\n\n\t\tconst blockData = this._getBlockData( textureDescriptorGPU.format );\n\n\t\tfor ( let i = 0; i < mipmaps.length; i ++ ) {\n\n\t\t\tconst mipmap = mipmaps[ i ];\n\n\t\t\tconst width = mipmap.width;\n\t\t\tconst height = mipmap.height;\n\n\t\t\tconst bytesPerRow = Math.ceil( width / blockData.width ) * blockData.byteLength;\n\n\t\t\tdevice.queue.writeTexture(\n\t\t\t\t{\n\t\t\t\t\ttexture: textureGPU,\n\t\t\t\t\tmipLevel: i\n\t\t\t\t},\n\t\t\t\tmipmap.data,\n\t\t\t\t{\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tbytesPerRow\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\twidth: Math.ceil( width / blockData.width ) * blockData.width,\n\t\t\t\t\theight: Math.ceil( height / blockData.width ) * blockData.width,\n\t\t\t\t\tdepthOrArrayLayers: 1\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t_getBlockData( format ) {\n\n\t\t// this method is only relevant for compressed texture formats\n\n\t\tif ( format === GPUTextureFormat.BC1RGBAUnorm || format === GPUTextureFormat.BC1RGBAUnormSRGB ) return { byteLength: 8, width: 4, height: 4 }; // DXT1\n\t\tif ( format === GPUTextureFormat.BC2RGBAUnorm || format === GPUTextureFormat.BC2RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT3\n\t\tif ( format === GPUTextureFormat.BC3RGBAUnorm || format === GPUTextureFormat.BC3RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // DXT5\n\t\tif ( format === GPUTextureFormat.BC4RUnorm || format === GPUTextureFormat.BC4RSNorm ) return { byteLength: 8, width: 4, height: 4 }; // RGTC1\n\t\tif ( format === GPUTextureFormat.BC5RGUnorm || format === GPUTextureFormat.BC5RGSnorm ) return { byteLength: 16, width: 4, height: 4 }; // RGTC2\n\t\tif ( format === GPUTextureFormat.BC6HRGBUFloat || format === GPUTextureFormat.BC6HRGBFloat ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (float)\n\t\tif ( format === GPUTextureFormat.BC7RGBAUnorm || format === GPUTextureFormat.BC7RGBAUnormSRGB ) return { byteLength: 16, width: 4, height: 4 }; // BPTC (unorm)\n\n\t\tif ( format === GPUTextureFormat.ETC2RGB8Unorm || format === GPUTextureFormat.ETC2RGB8UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGB8A1Unorm || format === GPUTextureFormat.ETC2RGB8A1UnormSRGB ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ETC2RGBA8Unorm || format === GPUTextureFormat.ETC2RGBA8UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Unorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACR11Snorm ) return { byteLength: 8, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Unorm ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.EACRG11Snorm ) return { byteLength: 16, width: 4, height: 4 };\n\n\t\tif ( format === GPUTextureFormat.ASTC4x4Unorm || format === GPUTextureFormat.ASTC4x4UnormSRGB ) return { byteLength: 16, width: 4, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x4Unorm || format === GPUTextureFormat.ASTC5x4UnormSRGB ) return { byteLength: 16, width: 5, height: 4 };\n\t\tif ( format === GPUTextureFormat.ASTC5x5Unorm || format === GPUTextureFormat.ASTC5x5UnormSRGB ) return { byteLength: 16, width: 5, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x5Unorm || format === GPUTextureFormat.ASTC6x5UnormSRGB ) return { byteLength: 16, width: 6, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC6x6Unorm || format === GPUTextureFormat.ASTC6x6UnormSRGB ) return { byteLength: 16, width: 6, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x5Unorm || format === GPUTextureFormat.ASTC8x5UnormSRGB ) return { byteLength: 16, width: 8, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC8x6Unorm || format === GPUTextureFormat.ASTC8x6UnormSRGB ) return { byteLength: 16, width: 8, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC8x8Unorm || format === GPUTextureFormat.ASTC8x8UnormSRGB ) return { byteLength: 16, width: 8, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x5Unorm || format === GPUTextureFormat.ASTC10x5UnormSRGB ) return { byteLength: 16, width: 10, height: 5 };\n\t\tif ( format === GPUTextureFormat.ASTC10x6Unorm || format === GPUTextureFormat.ASTC10x6UnormSRGB ) return { byteLength: 16, width: 10, height: 6 };\n\t\tif ( format === GPUTextureFormat.ASTC10x8Unorm || format === GPUTextureFormat.ASTC10x8UnormSRGB ) return { byteLength: 16, width: 10, height: 8 };\n\t\tif ( format === GPUTextureFormat.ASTC10x10Unorm || format === GPUTextureFormat.ASTC10x10UnormSRGB ) return { byteLength: 16, width: 10, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x10Unorm || format === GPUTextureFormat.ASTC12x10UnormSRGB ) return { byteLength: 16, width: 12, height: 10 };\n\t\tif ( format === GPUTextureFormat.ASTC12x12Unorm || format === GPUTextureFormat.ASTC12x12UnormSRGB ) return { byteLength: 16, width: 12, height: 12 };\n\n\t}\n\n\t_convertAddressMode( value ) {\n\n\t\tlet addressMode = GPUAddressMode.ClampToEdge;\n\n\t\tif ( value === RepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.Repeat;\n\n\t\t} else if ( value === MirroredRepeatWrapping ) {\n\n\t\t\taddressMode = GPUAddressMode.MirrorRepeat;\n\n\t\t}\n\n\t\treturn addressMode;\n\n\t}\n\n\t_convertFilterMode( value ) {\n\n\t\tlet filterMode = GPUFilterMode.Linear;\n\n\t\tif ( value === NearestFilter || value === NearestMipmapNearestFilter || value === NearestMipmapLinearFilter ) {\n\n\t\t\tfilterMode = GPUFilterMode.Nearest;\n\n\t\t}\n\n\t\treturn filterMode;\n\n\t}\n\n\t_getBytesPerTexel( format ) {\n\n\t\tif ( format === GPUTextureFormat.R8Unorm ) return 1;\n\t\tif ( format === GPUTextureFormat.R16Float ) return 2;\n\t\tif ( format === GPUTextureFormat.RG8Unorm ) return 2;\n\t\tif ( format === GPUTextureFormat.RG16Float ) return 4;\n\t\tif ( format === GPUTextureFormat.R32Float ) return 4;\n\t\tif ( format === GPUTextureFormat.RGBA8Unorm || format === GPUTextureFormat.RGBA8UnormSRGB ) return 4;\n\t\tif ( format === GPUTextureFormat.RG32Float ) return 8;\n\t\tif ( format === GPUTextureFormat.RGBA16Float ) return 8;\n\t\tif ( format === GPUTextureFormat.RGBA32Float ) return 16;\n\n\t}\n\n\t_getTypedArrayType( format ) {\n\n\t\tif ( format === GPUTextureFormat.R8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.R8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.R8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.R8Snorm ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RG8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RG8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RG8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RG8Snorm ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Uint ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Sint ) return Int8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Unorm ) return Uint8Array;\n\t\tif ( format === GPUTextureFormat.RGBA8Snorm ) return Int8Array;\n\n\n\t\tif ( format === GPUTextureFormat.R16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.R16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.RG16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RG16Sint ) return Int16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Uint ) return Uint16Array;\n\t\tif ( format === GPUTextureFormat.RGBA16Sint ) return Int16Array;\n\n\n\t\tif ( format === GPUTextureFormat.R32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.R32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.R32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.RG32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RG32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.RG32Float ) return Float32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Uint ) return Uint32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Sint ) return Int32Array;\n\t\tif ( format === GPUTextureFormat.RGBA32Float ) return Float32Array;\n\n\t}\n\n\t_getDimension( texture ) {\n\n\t\tlet dimension;\n\n\t\tif ( texture.isData3DTexture ) {\n\n\t\t\tdimension = GPUTextureDimension.ThreeD;\n\n\t\t} else {\n\n\t\t\tdimension = GPUTextureDimension.TwoD;\n\n\t\t}\n\n\t\treturn dimension;\n\n\t}\n\n}\n\nexport function getFormat( texture, device = null ) {\n\n\tconst format = texture.format;\n\tconst type = texture.type;\n\tconst colorSpace = texture.colorSpace;\n\n\tlet formatGPU;\n\n\tif ( /*texture.isRenderTargetTexture === true ||*/ texture.isFramebufferTexture === true ) {\n\n\t\tformatGPU = GPUTextureFormat.BGRA8Unorm;\n\n\t} else if ( texture.isCompressedTexture === true ) {\n\n\t\tswitch ( format ) {\n\n\t\t\tcase RGBA_S3TC_DXT1_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_S3TC_DXT3_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_S3TC_DXT5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGB_ETC2_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ETC2_EAC_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_4x4_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_5x4_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_5x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_6x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_6x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_8x8_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x5_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x6_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x8_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_10x10_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_12x10_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;\n\t\t\t\tbreak;\n\n\t\t\tcase RGBA_ASTC_12x12_Format:\n\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t}\n\n\t} else {\n\n\t\tswitch ( format ) {\n\n\t\t\tcase RGBAFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = ( colorSpace === SRGBColorSpace ) ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RGBA32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGBAFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RedFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.R32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RedFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase RGFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG8Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG16Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.RG32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with RGFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DepthFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedShortType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth16Unorm;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase UnsignedIntType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24Plus;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32Float;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase DepthStencilFormat:\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase UnsignedInt248Type:\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth24PlusStencil8;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tif ( device && device.features.has( GPUFeatureName.Depth32FloatStencil8 ) === false ) {\n\n\t\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the \"depth32float-stencil8\" GPU feature.' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tformatGPU = GPUTextureFormat.Depth32FloatStencil8;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture type with DepthStencilFormat.', type );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'WebGPURenderer: Unsupported texture format.', format );\n\n\t\t}\n\n\t}\n\n\treturn formatGPU;\n\n}\n\nexport default WebGPUTextureUtils;\n", "import NodeFunction from '../../../nodes/core/NodeFunction.js';\nimport NodeFunctionInput from '../../../nodes/core/NodeFunctionInput.js';\n\nconst declarationRegexp = /^[fn]*\\s*([a-z_0-9]+)?\\s*\\(([\\s\\S]*?)\\)\\s*[\\-\\>]*\\s*([a-z_0-9]+)?/i;\nconst propertiesRegexp = /[a-z_0-9]+|<(.*?)>+/ig;\n\nconst wgslTypeLib = {\n\tf32: 'float'\n};\n\nconst parse = ( source ) => {\n\n\tsource = source.trim();\n\n\tconst declaration = source.match( declarationRegexp );\n\n\tif ( declaration !== null && declaration.length === 4 ) {\n\n\t\t// tokenizer\n\n\t\tconst inputsCode = declaration[ 2 ];\n\t\tconst propsMatches = [];\n\n\t\tlet nameMatch = null;\n\n\t\twhile ( ( nameMatch = propertiesRegexp.exec( inputsCode ) ) !== null ) {\n\n\t\t\tpropsMatches.push( nameMatch );\n\n\t\t}\n\n\t\t// parser\n\n\t\tconst inputs = [];\n\n\t\tlet i = 0;\n\n\t\twhile ( i < propsMatches.length ) {\n\n\t\t\t// default\n\n\t\t\tconst name = propsMatches[ i ++ ][ 0 ];\n\t\t\tlet type = propsMatches[ i ++ ][ 0 ];\n\n\t\t\ttype = wgslTypeLib[ type ] || type;\n\n\t\t\t// precision\n\n\t\t\tif ( i < propsMatches.length && propsMatches[ i ][ 0 ].startsWith( '<' ) === true )\n\t\t\t\ti ++;\n\n\t\t\t// add input\n\n\t\t\tinputs.push( new NodeFunctionInput( type, name ) );\n\n\t\t}\n\n\t\t//\n\n\t\tconst blockCode = source.substring( declaration[ 0 ].length );\n\n\t\tconst name = declaration[ 1 ] !== undefined ? declaration[ 1 ] : '';\n\t\tconst type = declaration[ 3 ] || 'void';\n\n\t\treturn {\n\t\t\ttype,\n\t\t\tinputs,\n\t\t\tname,\n\t\t\tinputsCode,\n\t\t\tblockCode\n\t\t};\n\n\t} else {\n\n\t\tthrow new Error( 'FunctionNode: Function is not a WGSL code.' );\n\n\t}\n\n};\n\nclass WGSLNodeFunction extends NodeFunction {\n\n\tconstructor( source ) {\n\n\t\tconst { type, inputs, name, inputsCode, blockCode } = parse( source );\n\n\t\tsuper( type, inputs, name );\n\n\t\tthis.inputsCode = inputsCode;\n\t\tthis.blockCode = blockCode;\n\n\t}\n\n\tgetCode( name = this.name ) {\n\n\t\tconst type = this.type !== 'void' ? '-> ' + this.type : '';\n\n\t\treturn `fn ${ name } ( ${ this.inputsCode.trim() } ) ${ type }` + this.blockCode;\n\n\t}\n\n}\n\nexport default WGSLNodeFunction;\n", "import NodeParser from '../../../nodes/core/NodeParser.js';\nimport WGSLNodeFunction from './WGSLNodeFunction.js';\n\nclass WGSLNodeParser extends NodeParser {\n\n\tparseFunction( source ) {\n\n\t\treturn new WGSLNodeFunction( source );\n\n\t}\n\n}\n\nexport default WGSLNodeParser;\n", "import { NoColorSpace, FloatType } from 'three';\n\nimport NodeUniformsGroup from '../../common/nodes/NodeUniformsGroup.js';\n\nimport NodeSampler from '../../common/nodes/NodeSampler.js';\nimport { NodeSampledTexture, NodeSampledCubeTexture } from '../../common/nodes/NodeSampledTexture.js';\n\nimport UniformBuffer from '../../common/UniformBuffer.js';\nimport StorageBuffer from '../../common/StorageBuffer.js';\nimport { getVectorLength, getStrideLength } from '../../common/BufferUtils.js';\n\nimport { NodeBuilder, CodeNode, NodeMaterial } from '../../../nodes/Nodes.js';\n\nimport { getFormat } from '../utils/WebGPUTextureUtils.js';\n\nimport WGSLNodeParser from './WGSLNodeParser.js';\n\nconst gpuShaderStageLib = {\n\t'vertex': GPUShaderStage.VERTEX,\n\t'fragment': GPUShaderStage.FRAGMENT,\n\t'compute': GPUShaderStage.COMPUTE\n};\n\nconst supports = {\n\tinstance: true\n};\n\nconst wgslFnOpLib = {\n\t'^^': 'threejs_xor'\n};\n\nconst wgslTypeLib = {\n\tfloat: 'f32',\n\tint: 'i32',\n\tuint: 'u32',\n\tbool: 'bool',\n\tcolor: 'vec3<f32>',\n\n\tvec2: 'vec2<f32>',\n\tivec2: 'vec2<i32>',\n\tuvec2: 'vec2<u32>',\n\tbvec2: 'vec2<bool>',\n\n\tvec3: 'vec3<f32>',\n\tivec3: 'vec3<i32>',\n\tuvec3: 'vec3<u32>',\n\tbvec3: 'vec3<bool>',\n\n\tvec4: 'vec4<f32>',\n\tivec4: 'vec4<i32>',\n\tuvec4: 'vec4<u32>',\n\tbvec4: 'vec4<bool>',\n\n\tmat3: 'mat3x3<f32>',\n\timat3: 'mat3x3<i32>',\n\tumat3: 'mat3x3<u32>',\n\tbmat3: 'mat3x3<bool>',\n\n\tmat4: 'mat4x4<f32>',\n\timat4: 'mat4x4<i32>',\n\tumat4: 'mat4x4<u32>',\n\tbmat4: 'mat4x4<bool>'\n};\n\nconst wgslMethods = {\n\tdFdx: 'dpdx',\n\tdFdy: '- dpdy',\n\tmod: 'threejs_mod',\n\tlessThanEqual: 'threejs_lessThanEqual',\n\tgreaterThan: 'threejs_greaterThan',\n\tinversesqrt: 'inverseSqrt',\n\tbitcast: 'bitcast<f32>'\n};\n\nconst wgslPolyfill = {\n\tthreejs_xor: new CodeNode( `\nfn threejs_xor( a : bool, b : bool ) -> bool {\n\n\treturn ( a || b ) && !( a && b );\n\n}\n` ),\n\tlessThanEqual: new CodeNode( `\nfn threejs_lessThanEqual( a : vec3<f32>, b : vec3<f32> ) -> vec3<bool> {\n\n\treturn vec3<bool>( a.x <= b.x, a.y <= b.y, a.z <= b.z );\n\n}\n` ),\n\tgreaterThan: new CodeNode( `\nfn threejs_greaterThan( a : vec3<f32>, b : vec3<f32> ) -> vec3<bool> {\n\n\treturn vec3<bool>( a.x > b.x, a.y > b.y, a.z > b.z );\n\n}\n` ),\n\tmod: new CodeNode( `\nfn threejs_mod( x : f32, y : f32 ) -> f32 {\n\n\treturn x - y * floor( x / y );\n\n}\n` ),\n\trepeatWrapping: new CodeNode( `\nfn threejs_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {\n\n\tlet uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );\n\n\treturn ( ( uvScaled % dimension ) + dimension ) % dimension;\n\n}\n` )\n};\n\nclass WGSLNodeBuilder extends NodeBuilder {\n\n\tconstructor( object, renderer, scene = null ) {\n\n\t\tsuper( object, renderer, new WGSLNodeParser(), scene );\n\n\t\tthis.uniformGroups = {};\n\n\t\tthis.builtins = {};\n\n\t}\n\n\tbuild() {\n\n\t\tconst { object, material } = this;\n\n\t\tif ( material !== null ) {\n\n\t\t\tNodeMaterial.fromMaterial( material ).build( this );\n\n\t\t} else {\n\n\t\t\tthis.addFlow( 'compute', object );\n\n\t\t}\n\n\t\treturn super.build();\n\n\t}\n\n\tneedsColorSpaceToLinear( texture ) {\n\n\t\treturn texture.isVideoTexture === true && texture.colorSpace !== NoColorSpace;\n\n\t}\n\n\t_generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\tif ( depthSnippet ) {\n\n\t\t\t\treturn `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ depthSnippet } )`;\n\n\t\t\t} else {\n\n\t\t\t\treturn `textureSample( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet } )`;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn this.generateTextureLod( texture, textureProperty, uvSnippet );\n\n\t\t}\n\n\t}\n\n\t_generateVideoSample( textureProperty, uvSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleBaseClampToEdge( ${ textureProperty }, ${ textureProperty }_sampler, vec2<f32>( ${ uvSnippet }.x, 1.0 - ${ uvSnippet }.y ) )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.VideoTexture does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\t_generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' && this.isUnfilterable( texture ) === false ) {\n\n\t\t\treturn `textureSampleLevel( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ levelSnippet } )`;\n\n\t\t} else {\n\n\t\t\treturn this.generateTextureLod( texture, textureProperty, uvSnippet, levelSnippet );\n\n\t\t}\n\n\t}\n\n\tgenerateTextureLod( texture, textureProperty, uvSnippet, levelSnippet = '0' ) {\n\n\t\tthis._include( 'repeatWrapping' );\n\n\t\tconst dimension = `textureDimensions( ${ textureProperty }, 0 )`;\n\n\t\treturn `textureLoad( ${ textureProperty }, threejs_repeatWrapping( ${ uvSnippet }, ${ dimension } ), i32( ${ levelSnippet } ) )`;\n\n\t}\n\n\tgenerateTextureLoad( texture, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = '0u' ) {\n\n\t\tif ( depthSnippet ) {\n\n\t\t\treturn `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ depthSnippet }, ${ levelSnippet } )`;\n\n\t\t} else {\n\n\t\t\treturn `textureLoad( ${ textureProperty }, ${ uvIndexSnippet }, ${ levelSnippet } )`;\n\n\t\t}\n\n\t}\n\n\tisUnfilterable( texture ) {\n\n\t\treturn texture.isDataTexture === true && texture.type === FloatType;\n\n\t}\n\n\tgenerateTexture( texture, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else if ( this.isUnfilterable( texture ) ) {\n\n\t\t\tsnippet = this.generateTextureLod( texture, textureProperty, uvSnippet, '0', depthSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this._generateTextureSample( texture, textureProperty, uvSnippet, depthSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgenerateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tif ( shaderStage === 'fragment' ) {\n\n\t\t\treturn `textureSampleCompare( ${ textureProperty }, ${ textureProperty }_sampler, ${ uvSnippet }, ${ compareSnippet } )`;\n\n\t\t} else {\n\n\t\t\tconsole.error( `WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${ shaderStage } shader.` );\n\n\t\t}\n\n\t}\n\n\tgenerateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage ) {\n\n\t\tlet snippet = null;\n\n\t\tif ( texture.isVideoTexture === true ) {\n\n\t\t\tsnippet = this._generateVideoSample( textureProperty, uvSnippet, shaderStage );\n\n\t\t} else {\n\n\t\t\tsnippet = this._generateTextureSampleLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetPropertyName( node, shaderStage = this.shaderStage ) {\n\n\t\tif ( node.isNodeVarying === true && node.needsInterpolation === true ) {\n\n\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\treturn `varyings.${ node.name }`;\n\n\t\t\t}\n\n\t\t} else if ( node.isNodeUniform === true ) {\n\n\t\t\tconst name = node.name;\n\t\t\tconst type = node.type;\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' ) {\n\n\t\t\t\treturn name;\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' ) {\n\n\t\t\t\treturn `NodeBuffer_${ node.id }.${name}`;\n\n\t\t\t} else {\n\n\t\t\t\treturn node.groupNode.name + '.' + name;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.getPropertyName( node );\n\n\t}\n\n\t_getUniformGroupCount( shaderStage ) {\n\n\t\treturn Object.keys( this.uniforms[ shaderStage ] ).length;\n\n\t}\n\n\tgetFunctionOperator( op ) {\n\n\t\tconst fnOp = wgslFnOpLib[ op ];\n\n\t\tif ( fnOp !== undefined ) {\n\n\t\t\tthis._include( fnOp );\n\n\t\t\treturn fnOp;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tgetUniformFromNode( node, type, shaderStage, name = null ) {\n\n\t\tconst uniformNode = super.getUniformFromNode( node, type, shaderStage, name );\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage, this.globalCache );\n\n\t\tif ( nodeData.uniformGPU === undefined ) {\n\n\t\t\tlet uniformGPU;\n\n\t\t\tconst bindings = this.bindings[ shaderStage ];\n\n\t\t\tif ( type === 'texture' || type === 'cubeTexture' ) {\n\n\t\t\t\tlet texture = null;\n\n\t\t\t\tif ( type === 'texture' ) {\n\n\t\t\t\t\ttexture = new NodeSampledTexture( uniformNode.name, uniformNode.node );\n\n\t\t\t\t} else if ( type === 'cubeTexture' ) {\n\n\t\t\t\t\ttexture = new NodeSampledCubeTexture( uniformNode.name, uniformNode.node );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.store = node.isStoreTextureNode === true;\n\t\t\t\ttexture.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\tif ( shaderStage === 'fragment' && this.isUnfilterable( node.value ) === false && texture.store === false ) {\n\n\t\t\t\t\tconst sampler = new NodeSampler( `${uniformNode.name}_sampler`, uniformNode.node );\n\t\t\t\t\tsampler.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tbindings.push( sampler, texture );\n\n\t\t\t\t\tuniformGPU = [ sampler, texture ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbindings.push( texture );\n\n\t\t\t\t\tuniformGPU = [ texture ];\n\n\t\t\t\t}\n\n\t\t\t} else if ( type === 'buffer' || type === 'storageBuffer' ) {\n\n\t\t\t\tconst bufferClass = type === 'storageBuffer' ? StorageBuffer : UniformBuffer;\n\t\t\t\tconst buffer = new bufferClass( 'NodeBuffer_' + node.id, node.value );\n\t\t\t\tbuffer.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\tbindings.push( buffer );\n\n\t\t\t\tuniformGPU = buffer;\n\n\t\t\t} else {\n\n\t\t\t\tconst group = node.groupNode;\n\t\t\t\tconst groupName = group.name;\n\n\t\t\t\tconst uniformsStage = this.uniformGroups[ shaderStage ] || ( this.uniformGroups[ shaderStage ] = {} );\n\n\t\t\t\tlet uniformsGroup = uniformsStage[ groupName ];\n\n\t\t\t\tif ( uniformsGroup === undefined ) {\n\n\t\t\t\t\tuniformsGroup = new NodeUniformsGroup( groupName, group );\n\t\t\t\t\tuniformsGroup.setVisibility( gpuShaderStageLib[ shaderStage ] );\n\n\t\t\t\t\tuniformsStage[ groupName ] = uniformsGroup;\n\n\t\t\t\t\tbindings.push( uniformsGroup );\n\n\t\t\t\t}\n\n\t\t\t\tif ( node.isArrayUniformNode === true ) {\n\n\t\t\t\t\tuniformGPU = [];\n\n\t\t\t\t\tfor ( const uniformNode of node.nodes ) {\n\n\t\t\t\t\t\tconst uniformNodeGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\t\t\t// fit bounds to buffer\n\t\t\t\t\t\tuniformNodeGPU.boundary = getVectorLength( uniformNodeGPU.itemSize );\n\t\t\t\t\t\tuniformNodeGPU.itemSize = getStrideLength( uniformNodeGPU.itemSize );\n\n\t\t\t\t\t\tuniformsGroup.addUniform( uniformNodeGPU );\n\n\t\t\t\t\t\tuniformGPU.push( uniformNodeGPU );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tuniformGPU = this.getNodeUniform( uniformNode, type );\n\n\t\t\t\t\tuniformsGroup.addUniform( uniformGPU );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tnodeData.uniformGPU = uniformGPU;\n\n\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\tthis.bindingsOffset[ 'fragment' ] = bindings.length;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn uniformNode;\n\n\t}\n\n\tisReference( type ) {\n\n\t\treturn super.isReference( type ) || type === 'texture_2d' || type === 'texture_cube' || type === 'texture_depth_2d' || type === 'texture_storage_2d';\n\n\t}\n\n\tgetBuiltin( name, property, type, shaderStage = this.shaderStage ) {\n\n\t\tconst map = this.builtins[ shaderStage ] || ( this.builtins[ shaderStage ] = new Map() );\n\n\t\tif ( map.has( name ) === false ) {\n\n\t\t\tmap.set( name, {\n\t\t\t\tname,\n\t\t\t\tproperty,\n\t\t\t\ttype\n\t\t\t} );\n\n\t\t}\n\n\t\treturn property;\n\n\t}\n\n\tgetVertexIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'vertex_index', 'vertexIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'vertexIndex';\n\n\t}\n\n\tbuildFunctionCode( shaderNode ) {\n\n\t\tconst layout = shaderNode.layout;\n\t\tconst flowData = this.flowShaderNode( shaderNode );\n\n\t\tconst parameters = [];\n\n\t\tfor ( const input of layout.inputs ) {\n\n\t\t\tparameters.push( input.name + ' : ' + this.getType( input.type ) );\n\n\t\t}\n\n\t\t//\n\n\t\tconst code = `fn ${ layout.name }( ${ parameters.join( ', ' ) } ) -> ${ this.getType( layout.type ) } {\n${ flowData.vars }\n${ flowData.code }\n\treturn ${ flowData.result };\n\n}`;\n\n\t\t//\n\n\t\treturn code;\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\tif ( this.shaderStage === 'vertex' ) {\n\n\t\t\treturn this.getBuiltin( 'instance_index', 'instanceIndex', 'u32', 'attribute' );\n\n\t\t}\n\n\t\treturn 'instanceIndex';\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\treturn this.getBuiltin( 'front_facing', 'isFront', 'bool' );\n\n\t}\n\n\tgetFragCoord() {\n\n\t\treturn this.getBuiltin( 'position', 'fragCoord', 'vec4<f32>' ) + '.xy';\n\n\t}\n\n\tgetFragDepth() {\n\n\t\treturn 'output.' + this.getBuiltin( 'frag_depth', 'depth', 'f32', 'output' );\n\n\t}\n\n\tisFlipY() {\n\n\t\treturn false;\n\n\t}\n\n\tgetBuiltins( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst builtins = this.builtins[ shaderStage ];\n\n\t\tif ( builtins !== undefined ) {\n\n\t\t\tfor ( const { name, property, type } of builtins.values() ) {\n\n\t\t\t\tsnippets.push( `@builtin( ${name} ) ${property} : ${type}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\tgetAttributes( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tthis.getBuiltin( 'global_invocation_id', 'id', 'vec3<u32>', 'attribute' );\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'compute' ) {\n\n\t\t\tconst builtins = this.getBuiltins( 'attribute' );\n\n\t\t\tif ( builtins ) snippets.push( builtins );\n\n\t\t\tconst attributes = this.getAttributesArray();\n\n\t\t\tfor ( let index = 0, length = attributes.length; index < length; index ++ ) {\n\n\t\t\t\tconst attribute = attributes[ index ];\n\t\t\t\tconst name = attribute.name;\n\t\t\t\tconst type = this.getType( attribute.type );\n\n\t\t\t\tsnippets.push( `@location( ${index} ) ${ name } : ${ type }` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n\\t' );\n\n\t}\n\n\tgetStructMembers( struct ) {\n\n\t\tconst snippets = [];\n\t\tconst members = struct.getMemberTypes();\n\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\n\n\t\t\tconst member = members[ i ];\n\t\t\tsnippets.push( `\\t@location( ${i} ) m${i} : ${ member }<f32>` );\n\n\t\t}\n\n\t\treturn snippets.join( ',\\n' );\n\n\t}\n\n\tgetStructs( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst structs = this.structs[ shaderStage ];\n\n\t\tfor ( let index = 0, length = structs.length; index < length; index ++ ) {\n\n\t\t\tconst struct = structs[ index ];\n\t\t\tconst name = struct.name;\n\n\t\t\tlet snippet = `\\struct ${ name } {\\n`;\n\t\t\tsnippet += this.getStructMembers( struct );\n\t\t\tsnippet += '\\n}';\n\n\t\t\tsnippets.push( snippet );\n\n\t\t}\n\n\t\treturn snippets.join( '\\n\\n' );\n\n\t}\n\n\tgetVar( type, name ) {\n\n\t\treturn `var ${ name } : ${ this.getType( type ) }`;\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tconst snippets = [];\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tif ( vars !== undefined ) {\n\n\t\t\tfor ( const variable of vars ) {\n\n\t\t\t\tsnippets.push( `\\t${ this.getVar( variable.type, variable.name ) };` );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn `\\n${ snippets.join( '\\n' ) }\\n`;\n\n\t}\n\n\tgetVaryings( shaderStage ) {\n\n\t\tconst snippets = [];\n\n\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\tthis.getBuiltin( 'position', 'Vertex', 'vec4<f32>', 'vertex' );\n\n\t\t}\n\n\t\tif ( shaderStage === 'vertex' || shaderStage === 'fragment' ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst vars = this.vars[ shaderStage ];\n\n\t\t\tfor ( let index = 0; index < varyings.length; index ++ ) {\n\n\t\t\t\tconst varying = varyings[ index ];\n\n\t\t\t\tif ( varying.needsInterpolation ) {\n\n\t\t\t\t\tlet attributesSnippet = `@location( ${index} )`;\n\n\t\t\t\t\tif ( /^(int|uint|ivec|uvec)/.test( varying.type ) ) {\n\n\t\t\t\t\t\tattributesSnippet += ' @interpolate( flat )';\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsnippets.push( `${ attributesSnippet } ${ varying.name } : ${ this.getType( varying.type ) }` );\n\n\t\t\t\t} else if ( shaderStage === 'vertex' && vars.includes( varying ) === false ) {\n\n\t\t\t\t\tvars.push( varying );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst builtins = this.getBuiltins( shaderStage );\n\n\t\tif ( builtins ) snippets.push( builtins );\n\n\t\tconst code = snippets.join( ',\\n\\t' );\n\n\t\treturn shaderStage === 'vertex' ? this._getWGSLStruct( 'VaryingsStruct', '\\t' + code ) : code;\n\n\t}\n\n\tgetUniforms( shaderStage ) {\n\n\t\tconst uniforms = this.uniforms[ shaderStage ];\n\n\t\tconst bindingSnippets = [];\n\t\tconst bufferSnippets = [];\n\t\tconst structSnippets = [];\n\t\tconst uniformGroups = {};\n\n\t\tlet index = this.bindingsOffset[ shaderStage ];\n\n\t\tfor ( const uniform of uniforms ) {\n\n\t\t\tif ( uniform.type === 'texture' || uniform.type === 'cubeTexture' ) {\n\n\t\t\t\tconst texture = uniform.node.value;\n\n\t\t\t\tif ( shaderStage === 'fragment' && this.isUnfilterable( texture ) === false && uniform.node.isStoreTextureNode !== true ) {\n\n\t\t\t\t\tif ( texture.isDepthTexture === true && texture.compareFunction !== null ) {\n\n\t\t\t\t\t\tbindingSnippets.push( `@binding( ${index ++} ) @group( 0 ) var ${uniform.name}_sampler : sampler_comparison;` );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbindingSnippets.push( `@binding( ${index ++} ) @group( 0 ) var ${uniform.name}_sampler : sampler;` );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tlet textureType;\n\n\t\t\t\tif ( texture.isCubeTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_cube<f32>';\n\n\t\t\t\t} else if ( texture.isDataArrayTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_2d_array<f32>';\n\n\t\t\t\t} else if ( texture.isDepthTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_depth_2d';\n\n\t\t\t\t} else if ( texture.isVideoTexture === true ) {\n\n\t\t\t\t\ttextureType = 'texture_external';\n\n\t\t\t\t} else if ( uniform.node.isStoreTextureNode === true ) {\n\n\t\t\t\t\tconst format = getFormat( texture );\n\n\t\t\t\t\ttextureType = 'texture_storage_2d<' + format + ', write>';\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttextureType = 'texture_2d<f32>';\n\n\t\t\t\t}\n\n\t\t\t\tbindingSnippets.push( `@binding( ${index ++} ) @group( 0 ) var ${uniform.name} : ${textureType};` );\n\n\t\t\t} else if ( uniform.type === 'buffer' || uniform.type === 'storageBuffer' ) {\n\n\t\t\t\tconst bufferNode = uniform.node;\n\t\t\t\tconst bufferType = this.getType( bufferNode.bufferType );\n\t\t\t\tconst bufferCount = bufferNode.bufferCount;\n\n\t\t\t\tconst bufferCountSnippet = bufferCount > 0 ? ', ' + bufferCount : '';\n\t\t\t\tconst bufferSnippet = `\\t${uniform.name} : array< ${bufferType}${bufferCountSnippet} >\\n`;\n\t\t\t\tconst bufferAccessMode = bufferNode.isStorageBufferNode ? 'storage,read_write' : 'uniform';\n\n\t\t\t\tbufferSnippets.push( this._getWGSLStructBinding( 'NodeBuffer_' + bufferNode.id, bufferSnippet, bufferAccessMode, index ++ ) );\n\n\t\t\t} else {\n\n\t\t\t\tconst vectorType = this.getType( this.getVectorType( uniform.type ) );\n\t\t\t\tconst groupName = uniform.groupNode.name;\n\n\t\t\t\tconst group = uniformGroups[ groupName ] || ( uniformGroups[ groupName ] = {\n\t\t\t\t\tindex: index ++,\n\t\t\t\t\tsnippets: []\n\t\t\t\t} );\n\n\t\t\t\tif ( Array.isArray( uniform.value ) === true ) {\n\n\t\t\t\t\tconst length = uniform.value.length;\n\n\t\t\t\t\tgroup.snippets.push( `uniform ${vectorType}[ ${length} ] ${uniform.name}` );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgroup.snippets.push( `\\t${uniform.name} : ${ vectorType}` );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( const name in uniformGroups ) {\n\n\t\t\tconst group = uniformGroups[ name ];\n\n\t\t\tstructSnippets.push( this._getWGSLStructBinding( name, group.snippets.join( ',\\n' ), 'uniform', group.index ) );\n\n\t\t}\n\n\t\tlet code = bindingSnippets.join( '\\n' );\n\t\tcode += bufferSnippets.join( '\\n' );\n\t\tcode += structSnippets.join( '\\n' );\n\n\t\treturn code;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconst shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };\n\n\t\tfor ( const shaderStage in shadersData ) {\n\n\t\t\tconst stageData = shadersData[ shaderStage ];\n\t\t\tstageData.uniforms = this.getUniforms( shaderStage );\n\t\t\tstageData.attributes = this.getAttributes( shaderStage );\n\t\t\tstageData.varyings = this.getVaryings( shaderStage );\n\t\t\tstageData.structs = this.getStructs( shaderStage );\n\t\t\tstageData.vars = this.getVars( shaderStage );\n\t\t\tstageData.codes = this.getCodes( shaderStage );\n\n\t\t\t//\n\n\t\t\tlet flow = '// code\\n\\n';\n\t\t\tflow += this.flowCode[ shaderStage ];\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\t\t\tconst mainNode = flowNodes[ flowNodes.length - 1 ];\n\n\t\t\tconst outputNode = mainNode.outputNode;\n\t\t\tconst isOutputStruct = ( outputNode !== undefined && outputNode.isOutputStructNode === true );\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tconst flowSlotData = this.getFlowData( node/*, shaderStage*/ );\n\t\t\t\tconst slotName = node.name;\n\n\t\t\t\tif ( slotName ) {\n\n\t\t\t\t\tif ( flow.length > 0 ) flow += '\\n';\n\n\t\t\t\t\tflow += `\\t// flow -> ${ slotName }\\n\\t`;\n\n\t\t\t\t}\n\n\t\t\t\tflow += `${ flowSlotData.code }\\n\\t`;\n\n\t\t\t\tif ( node === mainNode && shaderStage !== 'compute' ) {\n\n\t\t\t\t\tflow += '// result\\n\\n\\t';\n\n\t\t\t\t\tif ( shaderStage === 'vertex' ) {\n\n\t\t\t\t\t\tflow += `varyings.Vertex = ${ flowSlotData.result };`;\n\n\t\t\t\t\t} else if ( shaderStage === 'fragment' ) {\n\n\t\t\t\t\t\tif ( isOutputStruct ) {\n\n\t\t\t\t\t\t\tstageData.returnType = outputNode.nodeType;\n\n\t\t\t\t\t\t\tflow += `return ${ flowSlotData.result };`;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tlet structSnippet = '\\t@location(0) color: vec4<f32>';\n\n\t\t\t\t\t\t\tconst builtins = this.getBuiltins( 'output' );\n\n\t\t\t\t\t\t\tif ( builtins ) structSnippet += ',\\n\\t' + builtins;\n\n\t\t\t\t\t\t\tstageData.returnType = 'OutputStruct';\n\t\t\t\t\t\t\tstageData.structs += this._getWGSLStruct( 'OutputStruct', structSnippet );\n\t\t\t\t\t\t\tstageData.structs += '\\nvar<private> output : OutputStruct;\\n\\n';\n\n\t\t\t\t\t\t\tflow += `output.color = ${ flowSlotData.result };\\n\\n\\treturn output;`;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstageData.flow = flow;\n\n\t\t}\n\n\t\tif ( this.material !== null ) {\n\n\t\t\tthis.vertexShader = this._getWGSLVertexCode( shadersData.vertex );\n\t\t\tthis.fragmentShader = this._getWGSLFragmentCode( shadersData.fragment );\n\n\t\t} else {\n\n\t\t\tthis.computeShader = this._getWGSLComputeCode( shadersData.compute, ( this.object.workgroupSize || [ 64 ] ).join( ', ' ) );\n\n\t\t}\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\tif ( wgslPolyfill[ method ] !== undefined ) {\n\n\t\t\tthis._include( method );\n\n\t\t}\n\n\t\treturn wgslMethods[ method ] || method;\n\n\t}\n\n\tgetType( type ) {\n\n\t\treturn wgslTypeLib[ type ] || type;\n\n\t}\n\n\tisAvailable( name ) {\n\n\t\treturn supports[ name ] === true;\n\n\t}\n\n\t_include( name ) {\n\n\t\tconst codeNode = wgslPolyfill[ name ];\n\t\tcodeNode.build( this );\n\n\t\tif ( this.currentFunctionNode !== null ) {\n\n\t\t\tthis.currentFunctionNode.includes.push( codeNode );\n\n\t\t}\n\n\t\treturn codeNode;\n\n\t}\n\n\t_getWGSLVertexCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n\n// uniforms\n${shaderData.uniforms}\n\n// varyings\n${shaderData.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${shaderData.codes}\n\n@vertex\nfn main( ${shaderData.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n\treturn varyings;\n\n}\n`;\n\n\t}\n\n\t_getWGSLFragmentCode( shaderData ) {\n\n\t\treturn `${ this.getSignature() }\n\n// uniforms\n${shaderData.uniforms}\n\n// structs\n${shaderData.structs}\n\n// codes\n${shaderData.codes}\n\n@fragment\nfn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t_getWGSLComputeCode( shaderData, workgroupSize ) {\n\n\t\treturn `${ this.getSignature() }\n// system\nvar<private> instanceIndex : u32;\n\n// uniforms\n${shaderData.uniforms}\n\n// codes\n${shaderData.codes}\n\n@compute @workgroup_size( ${workgroupSize} )\nfn main( ${shaderData.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x;\n\n\t// vars\n\t${shaderData.vars}\n\n\t// flow\n\t${shaderData.flow}\n\n}\n`;\n\n\t}\n\n\t_getWGSLStruct( name, vars ) {\n\n\t\treturn `\nstruct ${name} {\n${vars}\n};`;\n\n\t}\n\n\t_getWGSLStructBinding( name, vars, access, binding = 0, group = 0 ) {\n\n\t\tconst structName = name + 'Struct';\n\t\tconst structSnippet = this._getWGSLStruct( structName, vars );\n\n\t\treturn `${structSnippet}\n@binding( ${binding} ) @group( ${group} )\nvar<${access}> ${name} : ${structName};`;\n\n\t}\n\n}\n\nexport default WGSLNodeBuilder;\n", "import { GPUPrimitiveTopology, GPUTextureFormat } from './WebGPUConstants.js';\n\nclass WebGPUUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tgetCurrentDepthStencilFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.depthTexture !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.depthTexture );\n\n\t\t} else if ( renderContext.depth && renderContext.stencil ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24PlusStencil8;\n\n\t\t} else if ( renderContext.depth ) {\n\n\t\t\tformat = GPUTextureFormat.Depth24Plus;\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetTextureFormatGPU( texture ) {\n\n\t\treturn this.backend.get( texture ).texture.format;\n\n\t}\n\n\tgetCurrentColorFormat( renderContext ) {\n\n\t\tlet format;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tformat = this.getTextureFormatGPU( renderContext.textures[ 0 ] );\n\n\n\t\t} else {\n\n\t\t\tformat = GPUTextureFormat.BGRA8Unorm; // default context format\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\tgetCurrentColorSpace( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.textures[ 0 ].colorSpace;\n\n\t\t}\n\n\t\treturn this.backend.renderer.outputColorSpace;\n\n\t}\n\n\tgetPrimitiveTopology( object, material ) {\n\n\t\tif ( object.isPoints ) return GPUPrimitiveTopology.PointList;\n\t\telse if ( object.isLineSegments || ( object.isMesh && material.wireframe === true ) ) return GPUPrimitiveTopology.LineList;\n\t\telse if ( object.isLine ) return GPUPrimitiveTopology.LineStrip;\n\t\telse if ( object.isMesh ) return GPUPrimitiveTopology.TriangleList;\n\n\t}\n\n\tgetSampleCount( renderContext ) {\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\treturn renderContext.sampleCount;\n\n\t\t}\n\n\t\treturn this.backend.parameters.sampleCount;\n\n\t}\n\n}\n\nexport default WebGPUUtils;\n", "import { Float16BufferAttribute } from 'three';\nimport { GPUInputStepMode } from './WebGPUConstants.js';\n\nconst typedArraysToVertexFormatPrefix = new Map( [\n\t[ Int8Array, [ 'sint8', 'snorm8' ]],\n\t[ Uint8Array, [ 'uint8', 'unorm8' ]],\n\t[ Int16Array, [ 'sint16', 'snorm16' ]],\n\t[ Uint16Array, [ 'uint16', 'unorm16' ]],\n\t[ Int32Array, [ 'sint32', 'snorm32' ]],\n\t[ Uint32Array, [ 'uint32', 'unorm32' ]],\n\t[ Float32Array, [ 'float32', ]],\n] );\n\nconst typedAttributeToVertexFormatPrefix = new Map( [\n\t[ Float16BufferAttribute, [ 'float16', ]],\n] );\n\nconst typeArraysToVertexFormatPrefixForItemSize1 = new Map( [\n\t[ Int32Array, 'sint32' ],\n\t[ Uint32Array, 'uint32' ],\n\t[ Float32Array, 'float32' ]\n] );\n\nclass WebGPUAttributeUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateAttribute( attribute, usage ) {\n\n\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\tconst backend = this.backend;\n\t\tconst bufferData = backend.get( bufferAttribute );\n\n\t\tlet buffer = bufferData.buffer;\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tconst device = backend.device;\n\n\t\t\tconst array = bufferAttribute.array;\n\t\t\tconst size = array.byteLength + ( ( 4 - ( array.byteLength % 4 ) ) % 4 ); // ensure 4 byte alignment, see #20441\n\n\t\t\tbuffer = device.createBuffer( {\n\t\t\t\tlabel: bufferAttribute.name,\n\t\t\t\tsize: size,\n\t\t\t\tusage: usage,\n\t\t\t\tmappedAtCreation: true\n\t\t\t} );\n\n\t\t\tnew array.constructor( buffer.getMappedRange() ).set( array );\n\n\t\t\tbuffer.unmap();\n\n\t\t\tbufferData.buffer = buffer;\n\n\t\t}\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tconst bufferAttribute = this._getBufferAttribute( attribute );\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst buffer = backend.get( bufferAttribute ).buffer;\n\n\t\tconst array = bufferAttribute.array;\n\t\tconst updateRanges = bufferAttribute.updateRanges;\n\n\t\tif ( updateRanges.length === 0 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tdevice.queue.writeBuffer(\n\t\t\t\tbuffer,\n\t\t\t\t0,\n\t\t\t\tarray,\n\t\t\t\t0\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0, l = updateRanges.length; i < l; i ++ ) {\n\n\t\t\t\tconst range = updateRanges[ i ];\n\t\t\t\tdevice.queue.writeBuffer(\n\t\t\t\t\tbuffer,\n\t\t\t\t\t0,\n\t\t\t\t\tarray,\n\t\t\t\t\trange.start * array.BYTES_PER_ELEMENT,\n\t\t\t\t\trange.count * array.BYTES_PER_ELEMENT\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tbufferAttribute.clearUpdateRanges();\n\n\t\t}\n\n\t}\n\n\tcreateShaderVertexBuffers( renderObject ) {\n\n\t\tconst attributes = renderObject.getAttributes();\n\t\tconst vertexBuffers = new Map();\n\n\t\tfor ( let slot = 0; slot < attributes.length; slot ++ ) {\n\n\t\t\tconst geometryAttribute = attributes[ slot ];\n\t\t\tconst bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;\n\t\t\tconst bufferAttribute = this._getBufferAttribute( geometryAttribute );\n\n\t\t\tlet vertexBufferLayout = vertexBuffers.get( bufferAttribute );\n\n\t\t\tif ( vertexBufferLayout === undefined ) {\n\n\t\t\t\tlet arrayStride, stepMode;\n\n\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute === true ) {\n\n\t\t\t\t\tarrayStride = geometryAttribute.data.stride * bytesPerElement;\n\t\t\t\t\tstepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarrayStride = geometryAttribute.itemSize * bytesPerElement;\n\t\t\t\t\tstepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;\n\n\t\t\t\t}\n\n\t\t\t\tvertexBufferLayout = {\n\t\t\t\t\tarrayStride,\n\t\t\t\t\tattributes: [],\n\t\t\t\t\tstepMode\n\t\t\t\t};\n\n\t\t\t\tvertexBuffers.set( bufferAttribute, vertexBufferLayout );\n\n\t\t\t}\n\n\t\t\tconst format = this._getVertexFormat( geometryAttribute );\n\t\t\tconst offset = ( geometryAttribute.isInterleavedBufferAttribute === true ) ? geometryAttribute.offset * bytesPerElement : 0;\n\n\t\t\tvertexBufferLayout.attributes.push( {\n\t\t\t\tshaderLocation: slot,\n\t\t\t\toffset,\n\t\t\t\tformat\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Array.from( vertexBuffers.values() );\n\n\t}\n\n\tdestroyAttribute( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst data = backend.get( this._getBufferAttribute( attribute ) );\n\n\t\tdata.buffer.destroy();\n\n\t\tbackend.delete( attribute );\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst data = backend.get( this._getBufferAttribute( attribute ) );\n\n\t\tconst bufferGPU = data.buffer;\n\t\tconst size = bufferGPU.size;\n\n\t\tlet readBufferGPU = data.readBuffer;\n\t\tlet needsUnmap = true;\n\n\t\tif ( readBufferGPU === undefined ) {\n\n\t\t\treadBufferGPU = device.createBuffer( {\n\t\t\t\tlabel: attribute.name,\n\t\t\t\tsize,\n\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t} );\n\n\t\t\tneedsUnmap = false;\n\n\t\t\tdata.readBuffer = readBufferGPU;\n\n\t\t}\n\n\t\tconst cmdEncoder = device.createCommandEncoder( {} );\n\n\t\tcmdEncoder.copyBufferToBuffer(\n\t\t\tbufferGPU,\n\t\t\t0,\n\t\t\treadBufferGPU,\n\t\t\t0,\n\t\t\tsize\n\t\t);\n\n\t\tif ( needsUnmap ) readBufferGPU.unmap();\n\n\t\tconst gpuCommands = cmdEncoder.finish();\n\t\tdevice.queue.submit( [ gpuCommands ] );\n\n\t\tawait readBufferGPU.mapAsync( GPUMapMode.READ );\n\n\t\tconst arrayBuffer = readBufferGPU.getMappedRange();\n\n\t\treturn arrayBuffer;\n\n\t}\n\n\t_getVertexFormat( geometryAttribute ) {\n\n\t\tconst { itemSize, normalized } = geometryAttribute;\n\t\tconst ArrayType = geometryAttribute.array.constructor;\n\t\tconst AttributeType = geometryAttribute.constructor;\n\n\t\tlet format;\n\n\t\tif ( itemSize == 1 ) {\n\n\t\t\tformat = typeArraysToVertexFormatPrefixForItemSize1.get( ArrayType );\n\n\t\t} else {\n\n\t\t\tconst prefixOptions = typedAttributeToVertexFormatPrefix.get( AttributeType ) || typedArraysToVertexFormatPrefix.get( ArrayType );\n\t\t\tconst prefix = prefixOptions[ normalized ? 1 : 0 ];\n\n\t\t\tif ( prefix ) {\n\n\t\t\t\tconst bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;\n\t\t\t\tconst paddedBytesPerUnit = Math.floor( ( bytesPerUnit + 3 ) / 4 ) * 4;\n\t\t\t\tconst paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;\n\n\t\t\t\tif ( paddedItemSize % 1 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGPUAttributeUtils: Bad vertex format item size.' );\n\n\t\t\t\t}\n\n\t\t\t\tformat = `${prefix}x${paddedItemSize}`;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! format ) {\n\n\t\t\tconsole.error( 'THREE.WebGPUAttributeUtils: Vertex format not supported yet.' );\n\n\t\t}\n\n\t\treturn format;\n\n\t}\n\n\t_getBufferAttribute( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn attribute;\n\n\t}\n\n}\n\nexport default WebGPUAttributeUtils;\n", "import {\n\tGPUTextureAspect, GPUTextureViewDimension, GPUBufferBindingType, GPUTextureSampleType\n} from './WebGPUConstants.js';\nimport { FloatType } from 'three';\n\nclass WebGPUBindingUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateBindingsLayout( bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst entries = [];\n\n\t\tlet index = 0;\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tconst bindingGPU = {\n\t\t\t\tbinding: index ++,\n\t\t\t\tvisibility: binding.visibility\n\t\t\t};\n\n\t\t\tif ( binding.isUniformBuffer || binding.isStorageBuffer ) {\n\n\t\t\t\tconst buffer = {}; // GPUBufferBindingLayout\n\n\t\t\t\tif ( binding.isStorageBuffer ) {\n\n\t\t\t\t\tbuffer.type = GPUBufferBindingType.Storage;\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.buffer = buffer;\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst sampler = {}; // GPUSamplerBindingLayout\n\n\t\t\t\tif ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\tif ( binding.texture.compareFunction !== null ) {\n\n\t\t\t\t\t\tsampler.type = 'comparison';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.sampler = sampler;\n\n\t\t\t} else if ( binding.isSampledTexture && binding.texture.isVideoTexture ) {\n\n\t\t\t\tbindingGPU.externalTexture = {}; // GPUExternalTextureBindingLayout\n\n\t\t\t} else if ( binding.isSampledTexture && binding.store ) {\n\n\t\t\t\tconst format = this.backend.get( binding.texture ).texture.format;\n\n\t\t\t\tbindingGPU.storageTexture = { format }; // GPUStorageTextureBindingLayout\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst texture = {}; // GPUTextureBindingLayout\n\n\t\t\t\tif ( binding.texture.isDepthTexture ) {\n\n\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.Depth;\n\n\t\t\t\t} else if ( binding.texture.isDataTexture && binding.texture.type === FloatType ) {\n\n\t\t\t\t\t// @TODO: Add support for this soon: backend.hasFeature( 'float32-filterable' )\n\n\t\t\t\t\ttexture.sampleType = GPUTextureSampleType.UnfilterableFloat;\n\n\t\t\t\t}\n\n\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.Cube;\n\n\t\t\t\t} else if ( binding.texture.isDataArrayTexture ) {\n\n\t\t\t\t\ttexture.viewDimension = GPUTextureViewDimension.TwoDArray;\n\n\t\t\t\t}\n\n\t\t\t\tbindingGPU.texture = texture;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( `WebGPUBindingUtils: Unsupported binding \"${ binding }\".` );\n\n\t\t\t}\n\n\t\t\tentries.push( bindingGPU );\n\n\t\t}\n\n\t\treturn device.createBindGroupLayout( { entries } );\n\n\t}\n\n\tcreateBindings( bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst bindingsData = backend.get( bindings );\n\n\t\t// setup (static) binding layout and (dynamic) binding group\n\n\t\tconst bindLayoutGPU = this.createBindingsLayout( bindings );\n\t\tconst bindGroupGPU = this.createBindGroup( bindings, bindLayoutGPU );\n\n\t\tbindingsData.layout = bindLayoutGPU;\n\t\tbindingsData.group = bindGroupGPU;\n\t\tbindingsData.bindings = bindings;\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst buffer = binding.buffer;\n\t\tconst bufferGPU = backend.get( binding ).buffer;\n\n\t\tdevice.queue.writeBuffer( bufferGPU, 0, buffer, 0 );\n\n\t}\n\n\tcreateBindGroup( bindings, layoutGPU ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tlet bindingPoint = 0;\n\t\tconst entriesGPU = [];\n\n\t\tfor ( const binding of bindings ) {\n\n\t\t\tif ( binding.isUniformBuffer ) {\n\n\t\t\t\tconst bindingData = backend.get( binding );\n\n\t\t\t\tif ( bindingData.buffer === undefined ) {\n\n\t\t\t\t\tconst byteLength = binding.byteLength;\n\n\t\t\t\t\tconst usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;\n\n\t\t\t\t\tconst bufferGPU = device.createBuffer( {\n\t\t\t\t\t\tlabel: 'bindingBuffer_' + binding.name,\n\t\t\t\t\t\tsize: byteLength,\n\t\t\t\t\t\tusage: usage\n\t\t\t\t\t} );\n\n\t\t\t\t\tbindingData.buffer = bufferGPU;\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );\n\n\t\t\t} else if ( binding.isStorageBuffer ) {\n\n\t\t\t\tconst bindingData = backend.get( binding );\n\n\t\t\t\tif ( bindingData.buffer === undefined ) {\n\n\t\t\t\t\tconst attribute = binding.attribute;\n\t\t\t\t\t//const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | /*GPUBufferUsage.COPY_SRC |*/ GPUBufferUsage.COPY_DST;\n\n\t\t\t\t\t//backend.attributeUtils.createAttribute( attribute, usage ); // @TODO: Move it to universal renderer\n\n\t\t\t\t\tbindingData.buffer = backend.get( attribute ).buffer;\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: { buffer: bindingData.buffer } } );\n\n\t\t\t} else if ( binding.isSampler ) {\n\n\t\t\t\tconst textureGPU = backend.get( binding.texture );\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: textureGPU.sampler } );\n\n\t\t\t} else if ( binding.isSampledTexture ) {\n\n\t\t\t\tconst textureData = backend.get( binding.texture );\n\n\t\t\t\tlet dimensionViewGPU;\n\n\t\t\t\tif ( binding.isSampledCubeTexture ) {\n\n\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.Cube;\n\n\t\t\t\t} else if ( binding.texture.isDataArrayTexture ) {\n\n\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.TwoDArray;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdimensionViewGPU = GPUTextureViewDimension.TwoD;\n\n\t\t\t\t}\n\n\t\t\t\tlet resourceGPU;\n\n\t\t\t\tif ( textureData.externalTexture !== undefined ) {\n\n\t\t\t\t\tresourceGPU = device.importExternalTexture( { source: textureData.externalTexture } );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst aspectGPU = GPUTextureAspect.All;\n\n\t\t\t\t\tresourceGPU = textureData.texture.createView( { aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount: binding.store ? 1 : textureData.mipLevelCount } );\n\n\t\t\t\t}\n\n\t\t\t\tentriesGPU.push( { binding: bindingPoint, resource: resourceGPU } );\n\n\t\t\t}\n\n\t\t\tbindingPoint ++;\n\n\t\t}\n\n\t\treturn device.createBindGroup( {\n\t\t\tlayout: layoutGPU,\n\t\t\tentries: entriesGPU\n\t\t} );\n\n\t}\n\n}\n\nexport default WebGPUBindingUtils;\n", "import { BlendColorFactor, OneMinusBlendColorFactor, } from '../../common/Constants.js';\n\nimport {\n\tGPUFrontFace, GPUCullMode, GPUColorWriteFlags, GPUCompareFunction, GPUBlendFactor, GPUBlendOperation, GPUIndexFormat, GPUStencilOperation\n} from './WebGPUConstants.js';\n\nimport {\n\tFrontSide, BackSide, DoubleSide,\n\tNeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth,\n\tNoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending,\n\tZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstColorFactor,\n\tOneMinusDstColorFactor, DstAlphaFactor, OneMinusDstAlphaFactor, SrcAlphaSaturateFactor,\n\tAddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation,\n\tKeepStencilOp, ZeroStencilOp, ReplaceStencilOp, InvertStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp,\n\tNeverStencilFunc, AlwaysStencilFunc, LessStencilFunc, LessEqualStencilFunc, EqualStencilFunc, GreaterEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc\n} from 'three';\n\nclass WebGPUPipelineUtils {\n\n\tconstructor( backend ) {\n\n\t\tthis.backend = backend;\n\n\t}\n\n\tcreateRenderPipeline( renderObject ) {\n\n\t\tconst { object, material, geometry, pipeline } = renderObject;\n\t\tconst { vertexProgram, fragmentProgram } = pipeline;\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\t\tconst utils = backend.utils;\n\n\t\tconst pipelineData = backend.get( pipeline );\n\t\tconst bindingsData = backend.get( renderObject.getBindings() );\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = backend.attributeUtils.createShaderVertexBuffers( renderObject );\n\n\t\t// blending\n\n\t\tlet blending;\n\n\t\tif ( material.transparent === true && material.blending !== NoBlending ) {\n\n\t\t\tblending = this._getBlending( material );\n\n\t\t}\n\n\t\t// stencil\n\n\t\tlet stencilFront = {};\n\n\t\tif ( material.stencilWrite === true ) {\n\n\t\t\tstencilFront = {\n\t\t\t\tcompare: this._getStencilCompare( material ),\n\t\t\t\tfailOp: this._getStencilOperation( material.stencilFail ),\n\t\t\t\tdepthFailOp: this._getStencilOperation( material.stencilZFail ),\n\t\t\t\tpassOp: this._getStencilOperation( material.stencilZPass )\n\t\t\t};\n\n\t\t}\n\n\t\tconst colorWriteMask = this._getColorWriteMask( material );\n\n\t\tconst targets = [];\n\n\t\tif ( renderObject.context.textures !== null ) {\n\n\t\t\tconst textures = renderObject.context.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst colorFormat = utils.getTextureFormatGPU( textures[ i ] );\n\n\t\t\t\ttargets.push( {\n\t\t\t\t\tformat: colorFormat,\n\t\t\t\t\tblend: blending,\n\t\t\t\t\twriteMask: colorWriteMask\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\n\t\t\ttargets.push( {\n\t\t\t\tformat: colorFormat,\n\t\t\t\tblend: blending,\n\t\t\t\twriteMask: colorWriteMask\n\t\t\t} );\n\n\t\t}\n\n\t\tconst vertexModule = backend.get( vertexProgram ).module;\n\t\tconst fragmentModule = backend.get( fragmentProgram ).module;\n\n\t\tconst primitiveState = this._getPrimitiveState( object, geometry, material );\n\t\tconst depthCompare = this._getDepthCompare( material );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\t\tconst sampleCount = utils.getSampleCount( renderObject.context );\n\n\t\tpipelineData.pipeline = device.createRenderPipeline( {\n\t\t\tvertex: Object.assign( {}, vertexModule, { buffers: vertexBuffers } ),\n\t\t\tfragment: Object.assign( {}, fragmentModule, { targets } ),\n\t\t\tprimitive: primitiveState,\n\t\t\tdepthStencil: {\n\t\t\t\tformat: depthStencilFormat,\n\t\t\t\tdepthWriteEnabled: material.depthWrite,\n\t\t\t\tdepthCompare: depthCompare,\n\t\t\t\tstencilFront: stencilFront,\n\t\t\t\tstencilBack: {}, // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)\n\t\t\t\tstencilReadMask: material.stencilFuncMask,\n\t\t\t\tstencilWriteMask: material.stencilWriteMask\n\t\t\t},\n\t\t\tmultisample: {\n\t\t\t\tcount: sampleCount,\n\t\t\t\talphaToCoverageEnabled: material.alphaToCoverage\n\t\t\t},\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts: [ bindingsData.layout ]\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\tcreateComputePipeline( pipeline, bindings ) {\n\n\t\tconst backend = this.backend;\n\t\tconst device = backend.device;\n\n\t\tconst computeProgram = backend.get( pipeline.computeProgram ).module;\n\n\t\tconst pipelineGPU = backend.get( pipeline );\n\t\tconst bindingsData = backend.get( bindings );\n\n\t\tpipelineGPU.pipeline = device.createComputePipeline( {\n\t\t\tcompute: computeProgram,\n\t\t\tlayout: device.createPipelineLayout( {\n\t\t\t\tbindGroupLayouts: [ bindingsData.layout ]\n\t\t\t} )\n\t\t} );\n\n\t}\n\n\t_getBlending( material ) {\n\n\t\tlet color, alpha;\n\n\t\tconst blending = material.blending;\n\n\t\tif ( blending === CustomBlending ) {\n\n\t\t\tconst blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : GPUBlendFactor.One;\n\t\t\tconst blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : GPUBlendFactor.Zero;\n\t\t\tconst blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : GPUBlendFactor.Add;\n\n\t\t\tcolor = {\n\t\t\t\tsrcFactor: this._getBlendFactor( material.blendSrc ),\n\t\t\t\tdstFactor: this._getBlendFactor( material.blendDst ),\n\t\t\t\toperation: this._getBlendOperation( material.blendEquation )\n\t\t\t};\n\n\t\t\talpha = {\n\t\t\t\tsrcFactor: this._getBlendFactor( blendSrcAlpha ),\n\t\t\t\tdstFactor: this._getBlendFactor( blendDstAlpha ),\n\t\t\t\toperation: this._getBlendOperation( blendEquationAlpha )\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst premultipliedAlpha = material.premultipliedAlpha;\n\n\t\t\tconst setBlend = ( srcRGB, dstRGB, srcAlpha, dstAlpha ) => {\n\n\t\t\t\tcolor = {\n\t\t\t\t\tsrcFactor: srcRGB,\n\t\t\t\t\tdstFactor: dstRGB,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t\talpha = {\n\t\t\t\t\tsrcFactor: srcAlpha,\n\t\t\t\t\tdstFactor: dstAlpha,\n\t\t\t\t\toperation: GPUBlendOperation.Add\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\tsetBlend( GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( color !== undefined && alpha !== undefined ) {\n\n\t\t\treturn { color, alpha };\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid blending: ', blending );\n\n\t\t}\n\n\t}\n\n\t_getBlendFactor( blend ) {\n\n\t\tlet blendFactor;\n\n\t\tswitch ( blend ) {\n\n\t\t\tcase ZeroFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase OneFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.One;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Src;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrc;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusSrcAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusSrcAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase DstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Dst;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstColor;\n\t\t\t\tbreak;\n\n\t\t\tcase DstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.DstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusDstAlphaFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusDstAlpha;\n\t\t\t\tbreak;\n\n\t\t\tcase SrcAlphaSaturateFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.SrcAlphaSaturated;\n\t\t\t\tbreak;\n\n\t\t\tcase BlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.Constant;\n\t\t\t\tbreak;\n\n\t\t\tcase OneMinusBlendColorFactor:\n\t\t\t\tblendFactor = GPUBlendFactor.OneMinusConstant;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Blend factor not supported.', blend );\n\n\t\t}\n\n\t\treturn blendFactor;\n\n\t}\n\n\t_getStencilCompare( material ) {\n\n\t\tlet stencilCompare;\n\n\t\tconst stencilFunc = material.stencilFunc;\n\n\t\tswitch ( stencilFunc ) {\n\n\t\t\tcase NeverStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Never;\n\t\t\t\tbreak;\n\n\t\t\tcase AlwaysStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Always;\n\t\t\t\tbreak;\n\n\t\t\tcase LessStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Less;\n\t\t\t\tbreak;\n\n\t\t\tcase LessEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.LessEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase EqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Equal;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\tbreak;\n\n\t\t\tcase GreaterStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.Greater;\n\t\t\t\tbreak;\n\n\t\t\tcase NotEqualStencilFunc:\n\t\t\t\tstencilCompare = GPUCompareFunction.NotEqual;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil function.', stencilFunc );\n\n\t\t}\n\n\t\treturn stencilCompare;\n\n\t}\n\n\t_getStencilOperation( op ) {\n\n\t\tlet stencilOperation;\n\n\t\tswitch ( op ) {\n\n\t\t\tcase KeepStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Keep;\n\t\t\t\tbreak;\n\n\t\t\tcase ZeroStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Zero;\n\t\t\t\tbreak;\n\n\t\t\tcase ReplaceStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Replace;\n\t\t\t\tbreak;\n\n\t\t\tcase InvertStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.Invert;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementClamp;\n\t\t\t\tbreak;\n\n\t\t\tcase IncrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.IncrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tcase DecrementWrapStencilOp:\n\t\t\t\tstencilOperation = GPUStencilOperation.DecrementWrap;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPURenderer: Invalid stencil operation.', stencilOperation );\n\n\t\t}\n\n\t\treturn stencilOperation;\n\n\t}\n\n\t_getBlendOperation( blendEquation ) {\n\n\t\tlet blendOperation;\n\n\t\tswitch ( blendEquation ) {\n\n\t\t\tcase AddEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Add;\n\t\t\t\tbreak;\n\n\t\t\tcase SubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Subtract;\n\t\t\t\tbreak;\n\n\t\t\tcase ReverseSubtractEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.ReverseSubtract;\n\t\t\t\tbreak;\n\n\t\t\tcase MinEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Min;\n\t\t\t\tbreak;\n\n\t\t\tcase MaxEquation:\n\t\t\t\tblendOperation = GPUBlendOperation.Max;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Blend equation not supported.', blendEquation );\n\n\t\t}\n\n\t\treturn blendOperation;\n\n\t}\n\n\t_getPrimitiveState( object, geometry, material ) {\n\n\t\tconst descriptor = {};\n\t\tconst utils = this.backend.utils;\n\n\t\tdescriptor.topology = utils.getPrimitiveTopology( object, material );\n\n\t\tif ( geometry.index !== null && object.isLine === true && object.isLineSegments !== true ) {\n\n\t\t\tdescriptor.stripIndexFormat = ( geometry.index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t}\n\n\t\tswitch ( material.side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Back;\n\t\t\t\tbreak;\n\n\t\t\tcase BackSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.Front;\n\t\t\t\tbreak;\n\n\t\t\tcase DoubleSide:\n\t\t\t\tdescriptor.frontFace = GPUFrontFace.CCW;\n\t\t\t\tdescriptor.cullMode = GPUCullMode.None;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Unknown material.side value.', material.side );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\treturn descriptor;\n\n\t}\n\n\t_getColorWriteMask( material ) {\n\n\t\treturn ( material.colorWrite === true ) ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;\n\n\t}\n\n\t_getDepthCompare( material ) {\n\n\t\tlet depthCompare;\n\n\t\tif ( material.depthTest === false ) {\n\n\t\t\tdepthCompare = GPUCompareFunction.Always;\n\n\t\t} else {\n\n\t\t\tconst depthFunc = material.depthFunc;\n\n\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\tcase NeverDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Never;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Always;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Less;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.LessEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase EqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Equal;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.GreaterEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase GreaterDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.Greater;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\tdepthCompare = GPUCompareFunction.NotEqual;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.WebGPUPipelineUtils: Invalid depth function.', depthFunc );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn depthCompare;\n\n\t}\n\n}\n\nexport default WebGPUPipelineUtils;\n", "/*// debugger tools\nimport 'https://greggman.github.io/webgpu-avoid-redundant-state-setting/webgpu-check-redundant-state-setting.js';\n//*/\n\nimport { GPUFeatureName, GPUTextureFormat, GPULoadOp, GPUStoreOp, GPUIndexFormat, GPUTextureViewDimension } from './utils/WebGPUConstants.js';\n\nimport WGSLNodeBuilder from './nodes/WGSLNodeBuilder.js';\nimport Backend from '../common/Backend.js';\n\nimport { DepthFormat, WebGPUCoordinateSystem } from 'three';\n\nimport WebGPUUtils from './utils/WebGPUUtils.js';\nimport WebGPUAttributeUtils from './utils/WebGPUAttributeUtils.js';\nimport WebGPUBindingUtils from './utils/WebGPUBindingUtils.js';\nimport WebGPUPipelineUtils from './utils/WebGPUPipelineUtils.js';\nimport WebGPUTextureUtils from './utils/WebGPUTextureUtils.js';\n\n// statics\n\nlet _staticAdapter = null;\n\nif ( navigator.gpu !== undefined ) {\n\n\t_staticAdapter = await navigator.gpu.requestAdapter();\n\n}\n\n//\n\nclass WebGPUBackend extends Backend {\n\n\tconstructor( parameters = {} ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isWebGPUBackend = true;\n\n\t\t// some parameters require default values other than \"undefined\"\n\n\t\tthis.parameters.antialias = ( parameters.antialias === true );\n\n\t\tif ( this.parameters.antialias === true ) {\n\n\t\t\tthis.parameters.sampleCount = ( parameters.sampleCount === undefined ) ? 4 : parameters.sampleCount;\n\n\t\t} else {\n\n\t\t\tthis.parameters.sampleCount = 1;\n\n\t\t}\n\n\t\tthis.parameters.requiredLimits = ( parameters.requiredLimits === undefined ) ? {} : parameters.requiredLimits;\n\n\t\tthis.adapter = null;\n\t\tthis.device = null;\n\t\tthis.context = null;\n\t\tthis.colorBuffer = null;\n\n\t\tthis.utils = new WebGPUUtils( this );\n\t\tthis.attributeUtils = new WebGPUAttributeUtils( this );\n\t\tthis.bindingUtils = new WebGPUBindingUtils( this );\n\t\tthis.pipelineUtils = new WebGPUPipelineUtils( this );\n\t\tthis.textureUtils = new WebGPUTextureUtils( this );\n\t\tthis.occludedResolveCache = new Map();\n\n\t}\n\n\tasync init( renderer ) {\n\n\t\tawait super.init( renderer );\n\n\t\t//\n\n\t\tconst parameters = this.parameters;\n\n\t\tconst adapterOptions = {\n\t\t\tpowerPreference: parameters.powerPreference\n\t\t};\n\n\t\tconst adapter = await navigator.gpu.requestAdapter( adapterOptions );\n\n\t\tif ( adapter === null ) {\n\n\t\t\tthrow new Error( 'WebGPUBackend: Unable to create WebGPU adapter.' );\n\n\t\t}\n\n\t\t// feature support\n\n\t\tconst features = Object.values( GPUFeatureName );\n\n\t\tconst supportedFeatures = [];\n\n\t\tfor ( const name of features ) {\n\n\t\t\tif ( adapter.features.has( name ) ) {\n\n\t\t\t\tsupportedFeatures.push( name );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst deviceDescriptor = {\n\t\t\trequiredFeatures: supportedFeatures,\n\t\t\trequiredLimits: parameters.requiredLimits\n\t\t};\n\n\t\tconst device = await adapter.requestDevice( deviceDescriptor );\n\n\t\tconst context = ( parameters.context !== undefined ) ? parameters.context : renderer.domElement.getContext( 'webgpu' );\n\n\t\tthis.adapter = adapter;\n\t\tthis.device = device;\n\t\tthis.context = context;\n\n\t\tthis.context.configure( {\n\t\t\tdevice: this.device,\n\t\t\tformat: GPUTextureFormat.BGRA8Unorm,\n\t\t\tusage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n\t\t\talphaMode: 'premultiplied'\n\t\t} );\n\n\t\tthis.updateSize();\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGPUCoordinateSystem;\n\n\t}\n\n\tasync getArrayBufferAsync( attribute ) {\n\n\t\treturn await this.attributeUtils.getArrayBufferAsync( attribute );\n\n\t}\n\n\tbeginRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst device = this.device;\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tlet occlusionQuerySet;\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tif ( renderContextData.currentOcclusionQuerySet ) renderContextData.currentOcclusionQuerySet.destroy();\n\t\t\tif ( renderContextData.currentOcclusionQueryBuffer ) renderContextData.currentOcclusionQueryBuffer.destroy();\n\n\t\t\t// Get a reference to the array of objects with queries. The renderContextData property\n\t\t\t// can be changed by another render pass before the buffer.mapAsyc() completes.\n\t\t\trenderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;\n\t\t\trenderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;\n\t\t\trenderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;\n\n\t\t\t//\n\n\t\t\tocclusionQuerySet = device.createQuerySet( { type: 'occlusion', count: occlusionQueryCount } );\n\n\t\t\trenderContextData.occlusionQuerySet = occlusionQuerySet;\n\t\t\trenderContextData.occlusionQueryIndex = 0;\n\t\t\trenderContextData.occlusionQueryObjects = new Array( occlusionQueryCount );\n\n\t\t\trenderContextData.lastOcclusionObject = null;\n\n\t\t}\n\n\t\tconst descriptor = {\n\t\t\tcolorAttachments: [ {\n\t\t\t\tview: null\n\t\t\t} ],\n\t\t\tdepthStencilAttachment: {\n\t\t\t\tview: null\n\t\t\t},\n\t\t\tocclusionQuerySet\n\t\t};\n\n\t\tconst colorAttachment = descriptor.colorAttachments[ 0 ];\n\t\tconst depthStencilAttachment = descriptor.depthStencilAttachment;\n\n\t\tconst antialias = this.parameters.antialias;\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst textures = renderContext.textures;\n\n\t\t\tdescriptor.colorAttachments = [];\n\n\t\t\tconst colorAttachments = descriptor.colorAttachments;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst textureData = this.get( textures[ i ] );\n\n\t\t\t\tconst textureView = textureData.texture.createView( {\n\t\t\t\t\tbaseMipLevel: renderContext.activeMipmapLevel,\n\t\t\t\t\tmipLevelCount: 1,\n\t\t\t\t\tbaseArrayLayer: renderContext.activeCubeFace,\n\t\t\t\t\tdimension: GPUTextureViewDimension.TwoD\n\t\t\t\t} );\n\n\t\t\t\tlet view, resolveTarget;\n\n\t\t\t\tif ( textureData.msaaTexture !== undefined ) {\n\n\t\t\t\t\tview = textureData.msaaTexture.createView();\n\t\t\t\t\tresolveTarget = textureView;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tview = textureView;\n\t\t\t\t\tresolveTarget = undefined;\n\n\t\t\t\t}\n\n\t\t\t\tcolorAttachments.push( {\n\t\t\t\t\tview,\n\t\t\t\t\tresolveTarget,\n\t\t\t\t\tloadOp: GPULoadOp.Load,\n\t\t\t\t\tstoreOp: GPUStoreOp.Store\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst depthTextureData = this.get( renderContext.depthTexture );\n\n\t\t\tdepthStencilAttachment.view = depthTextureData.texture.createView();\n\n\t\t\tif ( renderContext.stencil && renderContext.depthTexture.format === DepthFormat ) {\n\n\t\t\t\trenderContext.stencil = false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( antialias === true ) {\n\n\t\t\t\tcolorAttachment.view = this.colorBuffer.createView();\n\t\t\t\tcolorAttachment.resolveTarget = this.context.getCurrentTexture().createView();\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.view = this.context.getCurrentTexture().createView();\n\t\t\t\tcolorAttachment.resolveTarget = undefined;\n\n\t\t\t}\n\n\t\t\tdepthStencilAttachment.view = this.textureUtils.getDepthBuffer( renderContext.depth, renderContext.stencil ).createView();\n\n\t\t}\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst colorAttachments = descriptor.colorAttachments;\n\n\t\t\tfor ( let i = 0; i < colorAttachments.length; i ++ ) {\n\n\t\t\t\tconst colorAttachment = colorAttachments[ i ];\n\n\t\t\t\tif ( renderContext.clearColor ) {\n\n\t\t\t\t\tcolorAttachment.clearValue = renderContext.clearColorValue;\n\t\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\t\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t} else {\n\n\t\t\tif ( renderContext.clearColor ) {\n\n\t\t\t\tcolorAttachment.clearValue = renderContext.clearColorValue;\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Load;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( renderContext.depth ) {\n\n\t\t\tif ( renderContext.clearDepth ) {\n\n\t\t\t\tdepthStencilAttachment.depthClearValue = renderContext.clearDepthValue;\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( renderContext.stencil ) {\n\n\t\t\tif ( renderContext.clearStencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst encoder = device.createCommandEncoder( { label: 'renderContext_' + renderContext.id } );\n\t\tconst currentPass = encoder.beginRenderPass( descriptor );\n\n\t\t//\n\n\t\trenderContextData.descriptor = descriptor;\n\t\trenderContextData.encoder = encoder;\n\t\trenderContextData.currentPass = currentPass;\n\t\trenderContextData.currentSets = { attributes: {} };\n\n\t\t//\n\n\t\tif ( renderContext.viewport ) {\n\n\t\t\tthis.updateViewport( renderContext );\n\n\t\t}\n\n\t\tif ( renderContext.scissor ) {\n\n\t\t\tconst { x, y, width, height } = renderContext.scissorValue;\n\n\t\t\tcurrentPass.setScissorRect( x, renderContext.height - height - y, width, height );\n\n\t\t}\n\n\t}\n\n\tfinishRender( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\t\tconst occlusionQueryCount = renderContext.occlusionQueryCount;\n\n\t\tif ( occlusionQueryCount > renderContextData.occlusionQueryIndex ) {\n\n\t\t\trenderContextData.currentPass.endOcclusionQuery();\n\n\t\t}\n\n\t\trenderContextData.currentPass.end();\n\n\t\tif ( occlusionQueryCount > 0 ) {\n\n\t\t\tconst bufferSize = occlusionQueryCount * 8; // 8 byte entries for query results\n\n\t\t\t//\n\n\t\t\tlet queryResolveBuffer = this.occludedResolveCache.get( bufferSize );\n\n\t\t\tif ( queryResolveBuffer === undefined ) {\n\n\t\t\t\tqueryResolveBuffer = this.device.createBuffer(\n\t\t\t\t\t{\n\t\t\t\t\t\tsize: bufferSize,\n\t\t\t\t\t\tusage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tthis.occludedResolveCache.set( bufferSize, queryResolveBuffer );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst readBuffer = this.device.createBuffer(\n\t\t\t\t{\n\t\t\t\t\tsize: bufferSize,\n\t\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// two buffers required here - WebGPU doesn't allow usage of QUERY_RESOLVE & MAP_READ to be combined\n\t\t\trenderContextData.encoder.resolveQuerySet( renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0 );\n\t\t\trenderContextData.encoder.copyBufferToBuffer( queryResolveBuffer, 0, readBuffer, 0, bufferSize );\n\n\t\t\trenderContextData.occlusionQueryBuffer = readBuffer;\n\n\t\t\t//\n\n\t\t\tthis.resolveOccludedAsync( renderContext );\n\n\t\t}\n\n\t\tthis.device.queue.submit( [ renderContextData.encoder.finish() ] );\n\n\t\t//\n\n\t\tif ( renderContext.textures !== null ) {\n\n\t\t\tconst textures = renderContext.textures;\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tif ( texture.generateMipmaps === true ) {\n\n\t\t\t\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tisOccluded( renderContext, object ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\treturn renderContextData.occluded && renderContextData.occluded.has( object );\n\n\t}\n\n\tasync resolveOccludedAsync( renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\t// handle occlusion query results\n\n\t\tconst { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;\n\n\t\tif ( currentOcclusionQueryBuffer && currentOcclusionQueryObjects ) {\n\n\t\t\tconst occluded = new WeakSet();\n\n\t\t\trenderContextData.currentOcclusionQueryObjects = null;\n\t\t\trenderContextData.currentOcclusionQueryBuffer = null;\n\n\t\t\tawait currentOcclusionQueryBuffer.mapAsync( GPUMapMode.READ );\n\n\t\t\tconst buffer = currentOcclusionQueryBuffer.getMappedRange();\n\t\t\tconst results = new BigUint64Array( buffer );\n\n\t\t\tfor ( let i = 0; i < currentOcclusionQueryObjects.length; i++ ) {\n\n\t\t\t\tif ( results[ i ] !== 0n ) {\n\n\t\t\t\t\toccluded.add( currentOcclusionQueryObjects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcurrentOcclusionQueryBuffer.destroy();\n\n\t\t\trenderContextData.occluded = occluded;\n\n\t\t}\n\n\t}\n\n\tupdateViewport( renderContext ) {\n\n\t\tconst { currentPass } = this.get( renderContext );\n\t\tlet { x, y, width, height, minDepth, maxDepth } = renderContext.viewportValue;\n\n\t\tcurrentPass.setViewport( x, renderContext.height - height - y, width, height, minDepth, maxDepth );\n\n\t}\n\n\tclear( color, depth, stencil, renderTargetData = null ) {\n\n\t\tconst device = this.device;\n\t\tconst renderer = this.renderer;\n\n\t\tconst colorAttachments = [];\n\n\t\tlet depthStencilAttachment;\n\t\tlet clearValue;\n\n\t\tlet supportsDepth;\n\t\tlet supportsStencil;\n\n\t\tif ( color ) {\n\n\t\t\tconst clearColor = this.getClearColor();\n\n\t\t\tclearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };\n\n\t\t}\n\n\t\tif ( renderTargetData === null ) {\n\n\t\t\tsupportsDepth = renderer.depth;\n\t\t\tsupportsStencil = renderer.stencil;\n\n\t\t\tdepth = depth && supportsDepth;\n\t\t\tstencil = stencil && supportsStencil;\n\n\t\t\tif ( color ) {\n\n\t\t\t\tconst antialias = this.parameters.antialias;\n\n\t\t\t\tconst colorAttachment = {};\n\n\t\t\t\tif ( antialias === true ) {\n\n\t\t\t\t\tcolorAttachment.view = this.colorBuffer.createView();\n\t\t\t\t\tcolorAttachment.resolveTarget = this.context.getCurrentTexture().createView();\n\t\t\n\t\t\t\t} else {\n\t\t\n\t\t\t\t\tcolorAttachment.view = this.context.getCurrentTexture().createView();\n\t\t\n\t\t\t\t}\n\n\t\t\t\tcolorAttachment.clearValue = clearValue;\n\t\t\t\tcolorAttachment.loadOp = GPULoadOp.Clear;\n\t\t\t\tcolorAttachment.storeOp = GPUStoreOp.Store;\n\n\t\t\t\tcolorAttachments.push( colorAttachment );\n\n\t\t\t}\n\n\t\t\tif ( depth || stencil ) {\n\n\t\t\t\tdepthStencilAttachment = {\n\t\t\t\t\tview: this.textureUtils.getDepthBuffer( renderer.depth, renderer.stencil ).createView()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tsupportsDepth = renderTargetData.depth;\n\t\t\tsupportsStencil = renderTargetData.stencil;\n\n\t\t\tdepth = depth && supportsDepth;\n\t\t\tstencil = stencil && supportsStencil;\n\n\t\t\tif ( color ) {\n\n\t\t\t\tfor ( const texture of renderTargetData.textures ) {\n\n\t\t\t\t\tconst textureData = this.get( texture );\n\t\t\t\t\tconst textureView = textureData.texture.createView();\n\n\t\t\t\t\tlet view, resolveTarget;\n\n\t\t\t\t\tif ( textureData.msaaTexture !== undefined ) {\n\n\t\t\t\t\t\tview = textureData.msaaTexture.createView();\n\t\t\t\t\t\tresolveTarget = textureView;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tview = textureView;\n\t\t\t\t\t\tresolveTarget = undefined;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolorAttachments.push( {\n\t\t\t\t\t\tview,\n\t\t\t\t\t\tresolveTarget,\n\t\t\t\t\t\tclearValue,\n\t\t\t\t\t\tloadOp: GPULoadOp.Clear,\n\t\t\t\t\t\tstoreOp: GPUStoreOp.Store\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( depth || stencil ) {\n\n\t\t\t\tconst depthTextureData = this.get( renderTargetData.depthTexture );\n\n\t\t\t\tdepthStencilAttachment = {\n\t\t\t\t\tview: depthTextureData.texture.createView()\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( depthStencilAttachment !== undefined ) {\n\n\t\t\tif ( depth ) {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.depthClearValue = renderer.getClearDepth();\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.depthStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( stencil ) {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;\n\t\t\t\tdepthStencilAttachment.stencilClearValue = renderer.getClearStencil();\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t} else {\n\n\t\t\t\tdepthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\t\t\t\tdepthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst encoder = device.createCommandEncoder( {} );\n\t\tconst currentPass = encoder.beginRenderPass( {\n\t\t\tcolorAttachments,\n\t\t\tdepthStencilAttachment\n\t\t} );\n\n\t\tcurrentPass.end();\n\n\t\tdevice.queue.submit( [ encoder.finish() ] );\n\n\t}\n\n\t// compute\n\n\tbeginCompute( computeGroup ) {\n\n\t\tconst groupGPU = this.get( computeGroup );\n\n\t\tgroupGPU.cmdEncoderGPU = this.device.createCommandEncoder( {} );\n\t\tgroupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass();\n\n\t}\n\n\tcompute( computeGroup, computeNode, bindings, pipeline ) {\n\n\t\tconst { passEncoderGPU } = this.get( computeGroup );\n\n\t\t// pipeline\n\n\t\tconst pipelineGPU = this.get( pipeline ).pipeline;\n\t\tpassEncoderGPU.setPipeline( pipelineGPU );\n\n\t\t// bind group\n\n\t\tconst bindGroupGPU = this.get( bindings ).group;\n\t\tpassEncoderGPU.setBindGroup( 0, bindGroupGPU );\n\n\t\tpassEncoderGPU.dispatchWorkgroups( computeNode.dispatchCount );\n\n\t}\n\n\tfinishCompute( computeGroup ) {\n\n\t\tconst groupData = this.get( computeGroup );\n\n\t\tgroupData.passEncoderGPU.end();\n\t\tthis.device.queue.submit( [ groupData.cmdEncoderGPU.finish() ] );\n\n\t}\n\n\t// render object\n\n\tdraw( renderObject, info ) {\n\n\t\tconst { object, geometry, context, pipeline } = renderObject;\n\n\t\tconst bindingsData = this.get( renderObject.getBindings() );\n\t\tconst contextData = this.get( context );\n\t\tconst pipelineGPU = this.get( pipeline ).pipeline;\n\t\tconst currentSets = contextData.currentSets;\n\n\t\t// pipeline\n\n\t\tconst passEncoderGPU = contextData.currentPass;\n\n\t\tif ( currentSets.pipeline !== pipelineGPU ) {\n\n\t\t\tpassEncoderGPU.setPipeline( pipelineGPU );\n\n\t\t\tcurrentSets.pipeline = pipelineGPU;\n\n\t\t}\n\n\t\t// bind group\n\n\t\tconst bindGroupGPU = bindingsData.group;\n\t\tpassEncoderGPU.setBindGroup( 0, bindGroupGPU );\n\n\t\t// attributes\n\n\t\tconst index = renderObject.getIndex();\n\n\t\tconst hasIndex = ( index !== null );\n\n\t\t// index\n\n\t\tif ( hasIndex === true ) {\n\n\t\t\tif ( currentSets.index !== index ) {\n\n\t\t\t\tconst buffer = this.get( index ).buffer;\n\t\t\t\tconst indexFormat = ( index.array instanceof Uint16Array ) ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;\n\n\t\t\t\tpassEncoderGPU.setIndexBuffer( buffer, indexFormat );\n\n\t\t\t\tcurrentSets.index = index;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// vertex buffers\n\n\t\tconst vertexBuffers = renderObject.getVertexBuffers();\n\n\t\tfor ( let i = 0, l = vertexBuffers.length; i < l; i ++ ) {\n\n\t\t\tconst vertexBuffer = vertexBuffers[ i ];\n\n\t\t\tif ( currentSets.attributes[ i ] !== vertexBuffer ) {\n\n\t\t\t\tconst buffer = this.get( vertexBuffer ).buffer;\n\t\t\t\tpassEncoderGPU.setVertexBuffer( i, buffer );\n\n\t\t\t\tcurrentSets.attributes[ i ] = vertexBuffer;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// occlusion queries - handle multiple consecutive draw calls for an object\n\n\t\tif ( contextData.occlusionQuerySet !== undefined  ) {\n\n\t\t\tconst lastObject = contextData.lastOcclusionObject;\n\n\t\t\tif ( lastObject !== object ) {\n\n\t\t\t\tif ( lastObject !== null && lastObject.occlusionTest === true ) {\n\n\t\t\t\t\tpassEncoderGPU.endOcclusionQuery();\n\t\t\t\t\tcontextData.occlusionQueryIndex ++;\n\n\t\t\t\t}\n\n\t\t\t\tif ( object.occlusionTest === true ) {\n\n\t\t\t\t\tpassEncoderGPU.beginOcclusionQuery( contextData.occlusionQueryIndex );\n\t\t\t\t\tcontextData.occlusionQueryObjects[ contextData.occlusionQueryIndex ] = object;\n\n\t\t\t\t}\n\n\t\t\t\tcontextData.lastOcclusionObject = object;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// draw\n\n\t\tconst drawRange = geometry.drawRange;\n\t\tconst firstVertex = drawRange.start;\n\n\t\tconst instanceCount = this.getInstanceCount( renderObject );\n\t\tif ( instanceCount === 0 ) return;\n\n\t\tif ( hasIndex === true ) {\n\n\t\t\tconst indexCount = ( drawRange.count !== Infinity ) ? drawRange.count : index.count;\n\n\t\t\tpassEncoderGPU.drawIndexed( indexCount, instanceCount, firstVertex, 0, 0 );\n\n\t\t\tinfo.update( object, indexCount, instanceCount );\n\n\t\t} else {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst vertexCount = ( drawRange.count !== Infinity ) ? drawRange.count : positionAttribute.count;\n\n\t\t\tpassEncoderGPU.draw( vertexCount, instanceCount, firstVertex, 0 );\n\n\t\t\tinfo.update( object, vertexCount, instanceCount );\n\n\t\t}\n\n\t}\n\n\t// cache key\n\n\tneedsRenderUpdate( renderObject ) {\n\n\t\tconst data = this.get( renderObject );\n\n\t\tconst { object, material } = renderObject;\n\n\t\tconst utils = this.utils;\n\n\t\tconst sampleCount = utils.getSampleCount( renderObject.context );\n\t\tconst colorSpace = utils.getCurrentColorSpace( renderObject.context );\n\t\tconst colorFormat = utils.getCurrentColorFormat( renderObject.context );\n\t\tconst depthStencilFormat = utils.getCurrentDepthStencilFormat( renderObject.context );\n\t\tconst primitiveTopology = utils.getPrimitiveTopology( object, material );\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( data.material !== material || data.materialVersion !== material.version ||\n\t\t\tdata.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha ||\n\t\t\tdata.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation ||\n\t\t\tdata.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha ||\n\t\t\tdata.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc ||\n\t\t\tdata.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc ||\n\t\t\tdata.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass ||\n\t\t\tdata.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask ||\n\t\t\tdata.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage ||\n\t\t\tdata.sampleCount !== sampleCount || data.colorSpace !== colorSpace ||\n\t\t\tdata.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat ||\n\t\t\tdata.primitiveTopology !== primitiveTopology \n\t\t) {\n\n\t\t\tdata.material = material; data.materialVersion = material.version;\n\t\t\tdata.transparent = material.transparent; data.blending = material.blending; data.premultipliedAlpha = material.premultipliedAlpha;\n\t\t\tdata.blendSrc = material.blendSrc; data.blendDst = material.blendDst; data.blendEquation = material.blendEquation;\n\t\t\tdata.blendSrcAlpha = material.blendSrcAlpha; data.blendDstAlpha = material.blendDstAlpha; data.blendEquationAlpha = material.blendEquationAlpha;\n\t\t\tdata.colorWrite = material.colorWrite;\n\t\t\tdata.depthWrite = material.depthWrite; data.depthTest = material.depthTest; data.depthFunc = material.depthFunc;\n\t\t\tdata.stencilWrite = material.stencilWrite; data.stencilFunc = material.stencilFunc;\n\t\t\tdata.stencilFail = material.stencilFail; data.stencilZFail = material.stencilZFail; data.stencilZPass = material.stencilZPass;\n\t\t\tdata.stencilFuncMask = material.stencilFuncMask; data.stencilWriteMask = material.stencilWriteMask;\n\t\t\tdata.side = material.side; data.alphaToCoverage = material.alphaToCoverage;\n\t\t\tdata.sampleCount = sampleCount;\n\t\t\tdata.colorSpace = colorSpace;\n\t\t\tdata.colorFormat = colorFormat;\n\t\t\tdata.depthStencilFormat = depthStencilFormat;\n\t\t\tdata.primitiveTopology = primitiveTopology;\n\n\t\t\tneedsUpdate = true;\n\n\t\t}\n\n\t\treturn needsUpdate;\n\n\t}\n\n\tgetRenderCacheKey( renderObject ) {\n\n\t\tconst { object, material } = renderObject;\n\n\t\tconst utils = this.utils;\n\t\tconst renderContext = renderObject.context;\n\n\t\treturn [\n\t\t\tmaterial.transparent, material.blending, material.premultipliedAlpha,\n\t\t\tmaterial.blendSrc, material.blendDst, material.blendEquation,\n\t\t\tmaterial.blendSrcAlpha, material.blendDstAlpha, material.blendEquationAlpha,\n\t\t\tmaterial.colorWrite,\n\t\t\tmaterial.depthWrite, material.depthTest, material.depthFunc,\n\t\t\tmaterial.stencilWrite, material.stencilFunc,\n\t\t\tmaterial.stencilFail, material.stencilZFail, material.stencilZPass,\n\t\t\tmaterial.stencilFuncMask, material.stencilWriteMask,\n\t\t\tmaterial.side,\n\t\t\tutils.getSampleCount( renderContext ),\n\t\t\tutils.getCurrentColorSpace( renderContext ), utils.getCurrentColorFormat( renderContext ), utils.getCurrentDepthStencilFormat( renderContext ),\n\t\t\tutils.getPrimitiveTopology( object, material )\n\t\t].join();\n\n\t}\n\n\t// textures\n\n\tcreateSampler( texture ) {\n\n\t\tthis.textureUtils.createSampler( texture );\n\n\t}\n\n\tdestroySampler( texture ) {\n\n\t\tthis.textureUtils.destroySampler( texture );\n\n\t}\n\n\tcreateDefaultTexture( texture ) {\n\n\t\tthis.textureUtils.createDefaultTexture( texture );\n\n\t}\n\n\tcreateTexture( texture, options ) {\n\n\t\tthis.textureUtils.createTexture( texture, options );\n\n\t}\n\n\tupdateTexture( texture, options ) {\n\n\t\tthis.textureUtils.updateTexture( texture, options );\n\n\t}\n\n\tgenerateMipmaps( texture ) {\n\n\t\tthis.textureUtils.generateMipmaps( texture );\n\n\t}\n\n\tdestroyTexture( texture ) {\n\n\t\tthis.textureUtils.destroyTexture( texture );\n\n\t}\n\n\tcopyTextureToBuffer( texture, x, y, width, height ) {\n\n\t\treturn this.textureUtils.copyTextureToBuffer( texture, x, y, width, height );\n\n\t}\n\n\t// node builder\n\n\tcreateNodeBuilder( object, renderer, scene = null ) {\n\n\t\treturn new WGSLNodeBuilder( object, renderer, scene );\n\n\t}\n\n\t// program\n\n\tcreateProgram( program ) {\n\n\t\tconst programGPU = this.get( program );\n\n\t\tprogramGPU.module = {\n\t\t\tmodule: this.device.createShaderModule( { code: program.code, label: program.stage } ),\n\t\t\tentryPoint: 'main'\n\t\t};\n\n\t}\n\n\tdestroyProgram( program ) {\n\n\t\tthis.delete( program );\n\n\t}\n\n\t// pipelines\n\n\tcreateRenderPipeline( renderObject ) {\n\n\t\tthis.pipelineUtils.createRenderPipeline( renderObject );\n\n\t}\n\n\tcreateComputePipeline( computePipeline, bindings ) {\n\n\t\tthis.pipelineUtils.createComputePipeline( computePipeline, bindings );\n\n\t}\n\n\t// bindings\n\n\tcreateBindings( bindings ) {\n\n\t\tthis.bindingUtils.createBindings( bindings );\n\n\t}\n\n\tupdateBindings( bindings ) {\n\n\t\tthis.bindingUtils.createBindings( bindings );\n\n\t}\n\n\tupdateBinding( binding ) {\n\n\t\tthis.bindingUtils.updateBinding( binding );\n\n\t}\n\n\t// attributes\n\n\tcreateIndexAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\tcreateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\tcreateStorageAttribute( attribute ) {\n\n\t\tthis.attributeUtils.createAttribute( attribute, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST );\n\n\t}\n\n\tupdateAttribute( attribute ) {\n\n\t\tthis.attributeUtils.updateAttribute( attribute );\n\n\t}\n\n\tdestroyAttribute( attribute ) {\n\n\t\tthis.attributeUtils.destroyAttribute( attribute );\n\n\t}\n\n\t// canvas\n\n\tupdateSize() {\n\n\t\tthis.colorBuffer = this.textureUtils.getColorBuffer();\n\t\n\t}\n\n\t// utils public\n\n\tgetMaxAnisotropy() {\n\n\t\treturn 16;\n\n\t}\n\n\thasFeature( name ) {\n\n\t\tconst adapter = this.adapter || _staticAdapter;\n\n\t\t//\n\n\t\tconst features = Object.values( GPUFeatureName );\n\n\t\tif ( features.includes( name ) === false ) {\n\n\t\t\tthrow new Error( 'THREE.WebGPURenderer: Unknown WebGPU GPU feature: ' + name );\n\n\t\t}\n\n\t\t//\n\n\t\treturn adapter.features.has( name );\n\n\t}\n\n\tcopyFramebufferToTexture( texture, renderContext ) {\n\n\t\tconst renderContextData = this.get( renderContext );\n\n\t\tconst { encoder, descriptor } = renderContextData;\n\n\t\tlet sourceGPU = null;\n\n\t\tif ( texture.isFramebufferTexture ) {\n\n\t\t\tsourceGPU = this.context.getCurrentTexture();\n\n\t\t} else if ( texture.isDepthTexture ) {\n\n\t\t\tsourceGPU = this.textureUtils.getDepthBuffer( renderContext.depth, renderContext.stencil );\n\n\t\t}\n\n\t\tconst destinationGPU = this.get( texture ).texture;\n\n\t\trenderContextData.currentPass.end();\n\n\t\tencoder.copyTextureToTexture(\n\t\t\t{\n\t\t\t\ttexture: sourceGPU,\n\t\t\t\torigin: { x: 0, y: 0, z: 0 }\n\t\t\t},\n\t\t\t{\n\t\t\t\ttexture: destinationGPU\n\t\t\t},\n\t\t\t[\n\t\t\t\ttexture.image.width,\n\t\t\t\ttexture.image.height\n\t\t\t]\n\t\t);\n\n\t\tif ( texture.generateMipmaps ) this.textureUtils.generateMipmaps( texture );\n\n\t\tdescriptor.colorAttachments[ 0 ].loadOp = GPULoadOp.Load;\n\t\tif ( renderContext.depth ) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;\n\t\tif ( renderContext.stencil ) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;\n\n\t\trenderContextData.currentPass = encoder.beginRenderPass( descriptor );\n\t\trenderContextData.currentSets = { attributes: {} };\n\n\t}\n\n}\n\nexport default WebGPUBackend;\n", "import Renderer from '../common/Renderer.js';\nimport WebGLBackend from '../webgl/WebGLBackend.js';\nimport WebGPUBackend from './WebGPUBackend.js';\nimport WebGPU from '../../capabilities/WebGPU.js';\n/*\nconst debugHandler = {\n\n\tget: function ( target, name ) {\n\n\t\t// Add |update\n\t\tif ( /^(create|destroy)/.test( name ) ) console.log( 'WebGPUBackend.' + name );\n\n\t\treturn target[ name ];\n\n\t}\n\n};\n*/\nclass WebGPURenderer extends Renderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tlet BackendClass;\n\n\t\tif ( WebGPU.isAvailable() ) {\n\n\t\t\tBackendClass = WebGPUBackend;\n\n\t\t} else {\n\n\t\t\tBackendClass = WebGLBackend;\n\n\t\t\tconsole.warn( 'THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.' );\n\n\t\t}\n\n\t\tconst backend = new BackendClass( parameters );\n\n\t\t//super( new Proxy( backend, debugHandler ) );\n\t\tsuper( backend, parameters );\n\n\t\tthis.isWebGPURenderer = true;\n\n\t}\n\n}\n\nexport default WebGPURenderer;\n"],
  "mappings": "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",
  "names": ["texture", "id", "texture", "image", "renderer", "scene", "texture", "id", "id", "texture", "texture", "texture", "id", "initialized", "texture", "renderContextData", "context", "index", "texture", "texture", "texture", "name", "type", "supports", "wgslTypeLib", "texture", "uniformNode", "texture", "AttributeType", "texture", "context", "colorAttachment", "texture"]
}
